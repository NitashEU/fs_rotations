# Project Rules and Patterns
1. All modifications must preserve Sylvanas API compatibility
2. Performance is critical - optimize all calculations
3. Maintain clear module boundaries and interfaces
4. Document all significant changes and decisions
5. Entry system requires validation before module loading
6. Use lazy loading for performance optimization
7. Implement comprehensive error boundaries
8. Follow progressive module loading pattern
9. Maintain callback registration consistency
10. Validate spec configuration before initialization
11. Prefer custom implementations over unused API modules
12. Ensure humanizer system handles latency compensation
13. Follow type-safe menu element patterns
14. Maintain consistent ID prefixing in menu system
15. Implement thorough buff/aura state validation
16. Follow three-tiered rotation priority system
17. Separate IDs, logic, settings, and UI components
18. Implement type-safe interfaces for all modules
19. Pass weights as parameters for flexible targeting
20. Normalize weights to ensure consistent scoring
21. Use position-based calculations for area targeting
