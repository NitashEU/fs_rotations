Project Foundation:

- Project Context: FS Rotations is a Lua-based WoW combat rotation automation system. (Further details would be inlined here).
- General Guidelines: Ensure 'repomix-output.txt' is initially loaded. (Further guidelines would be inlined here).

Code Style & Structure:

- Language: Lua.
- Modules: Use `require` for imports. (e.g., `local spell_helper = require("common/utility/spell_helper")`).
- Namespace: Plugin code outside `_api/` _must_ be within the `FS` namespace.
- API Access: Use `FS.api` for functions exposed through `core/api.lua`. (e.g., `FS.api.spell_helper:is_spell_queueable(...)`).
- Non-Exported API Modules: Use `require` with local aliases for modules in `_api/common/` not re-exported by `core/api.lua`. (e.g., `local enums = require("common/enums")`).
- Top-Level Tables: Assign top-level tables in the `FS` namespace explicitly. (e.g., `FS.paladin_holy.auras = {}`).
- Code Organization: Organize code into logical modules.
- Programming Paradigm: Prefer functional programming. Avoid OOP unless strictly necessary.
- Modularity & Iteration: Favor iterative development and modular design.

Naming Conventions:

- Variables & Functions: `snake_case` (e.g., `get_unit_health`).
- Class Naming: `PascalCase` (if classes are absolutely necessary).
- File & Directory Naming: `snake_case` (e.g., `health_prediction.lua`, `combat_routines`).
- Module Exports: Prefer named module exports (return a table).

Lua Usage:

- Scope: Always use `local` unless a global is _absolutely_ necessary (rare).
- Imports: Use `require()`. Follow rules for accessing module members.
- Documentation Comments: Use LuaDoc style. Include `@return` annotations, even for `nil`. Use specific type annotations.
- Variable Name Exceptions: Avoid single-letter variables except for loop counters (`i`, `j`, `k`).
- Explicit Comparisons: Prefer `x ~= nil` over `if x then`.
- Boolean Values: Use lowercase `true` and `false`.
- Explicit 'self': Always include `self` in method calls.
- Table Creation: Pre-allocate tables when size is known.
- Avoid table.insert in Loops: Do NOT use inside loops with index 1.
- Table Iteration: Use `ipairs()` for arrays, `pairs()` for dictionaries.
- Local Helper Functions: Declare helper functions within a module as `local`.

Error Handling:

- Error Logging: Use `core.log_error()`.
- Assertions: Use `assert()` for critical, "should never happen" conditions.
- Graceful Handling: Use `pcall()` for potential runtime errors.
- Contextual Error Messages: Include detailed information in error messages.

Memory Management:

- Table Allocation: Be mindful of table allocations. Reuse tables.
- Table Reuse in Loops: Reuse a single table.
- Object Pooling: Only use if necessary after discussion and profiling.
- Explicit Garbage Collection: Set variables to `nil` when no longer needed.

Performance Optimization:

- Iteration vs Recursion: Prefer iteration.
- Caching: Cache frequently accessed values locally.
- Loop Optimizations: Avoid unnecessary calculations/API calls _within_ loops.
- Profiling: Use API profiling tools (`core.time()`, `core.cpu_ticks()`) _before_ optimizing.
- String Concatenation: Use `table.concat()`.
- Metatables: Use with _extreme caution_ and thorough profiling.

API Usage:

- API Interaction: _Strictly_ use only `_api/` functions. _Never_ use native WoW API functions.
- API Access Method: Use `FS.api` where appropriate (as per `core/api.lua`).

Code Consistency & Readability:

- Indentation: Consistent indentation (4 spaces recommended).
- Line Length: 80-100 characters guideline.
- Spacing: Consistent spacing around operators, commas, and function arguments.
- Function Grouping: Group related functions logically within modules.

Constants:

- Definition & Naming: `UPPER_SNAKE_CASE`. Define at top of files or in `constants.lua`.

Git Usage & Commit Conventions:

- Commit Prefixes: `fix:`, `feat:`, `perf:`, `docs:`, `style:`, `refactor:`, `test:`, `chore:`.
- Lowercase Commit Messages:
- Concise Summary Line:
- Descriptive Body: (for non-trivial changes).
- Issue/Ticket References:

Documentation:

- Documentation Style: Use LuaDoc.
- Comment Focus: Explain "why" and "how," not just "what."
- Module Documentation: Document module purpose at the top of each file.

Operational Framework:

A "Memory Bank" system is used. Fundamental principles are defined here.

Memory Bank:

- Status Prefix: Responses begin with `[MEMORY BANK: ACTIVE]` or `[MEMORY BANK: INACTIVE]`.
- Detection: Scan for `memory-bank/` directories.
- Core Files: `activeContext.md`, `productContext.md`, `progress.md`, `decisionLog.md`.
- Missing Files: Inform the user and offer solutions.
- UMB: Review Chat History, gather information and update accordingly to the context.

General Rules:

- `attempt_completion`: Only use when explicitly requested, or for a UMB request with no added instructions.
- Task Completion: After a task, present results/options and ask, "Is there anything else I can help you with?"
