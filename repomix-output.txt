This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document.
Generated by Repomix on: 2025-02-10T19:45:35.351Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: .clinerules*
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
_api/common/buff_db.lua
_api/common/color.lua
_api/common/enums.lua
_api/common/geometry/geometry.lua
_api/common/geometry/vec2.lua
_api/common/geometry/vec3.lua
_api/common/modules/buff_manager.lua
_api/common/modules/combat_forecast.lua
_api/common/modules/health_prediction.lua
_api/common/modules/profiler.lua
_api/common/modules/spell_prediction.lua
_api/common/modules/spell_queue.lua
_api/common/modules/target_selector.lua
_api/common/spell_attributes.lua
_api/common/talents_id.lua
_api/common/unit_manager.lua
_api/common/utility/auto_attack_helper.lua
_api/common/utility/control_panel_helper.lua
_api/common/utility/cooldown_tracker.lua
_api/common/utility/dungeons_helper.lua
_api/common/utility/inventory_helper.lua
_api/common/utility/key_helper.lua
_api/common/utility/movement_handler.lua
_api/common/utility/plugin_helper.lua
_api/common/utility/pvp_helper.lua
_api/common/utility/spell_helper.lua
_api/common/utility/ui_buttons_info.lua
_api/common/utility/unit_helper.lua
_api/core.lua
_api/game_object.lua
_api/menu.lua
.windsurfrules
classes/paladin/holy/bootstrap.lua
classes/paladin/holy/drawing.lua
classes/paladin/holy/ids/auras.lua
classes/paladin/holy/ids/index.lua
classes/paladin/holy/ids/spells.lua
classes/paladin/holy/ids/talents.lua
classes/paladin/holy/index.lua
classes/paladin/holy/logic/index.lua
classes/paladin/holy/logic/rotations/avenging_crusader.lua
classes/paladin/holy/logic/rotations/damage.lua
classes/paladin/holy/logic/rotations/healing.lua
classes/paladin/holy/logic/rotations/index.lua
classes/paladin/holy/logic/spells/crusader_strike.lua
classes/paladin/holy/logic/spells/hammer_of_wrath.lua
classes/paladin/holy/logic/spells/index.lua
classes/paladin/holy/logic/spells/judgment.lua
classes/paladin/holy/menu.lua
classes/paladin/holy/settings.lua
classes/paladin/holy/variables.lua
core/api.lua
core/humanizer.lua
core/index.lua
core/menu.lua
core/modules/heal_engine/get_damage_taken_per_second.lua
core/modules/heal_engine/index.lua
core/modules/heal_engine/menu.lua
core/modules/heal_engine/on_update.lua
core/modules/heal_engine/reset.lua
core/modules/heal_engine/settings.lua
core/modules/heal_engine/start.lua
core/settings.lua
core/variables.lua
entry/callbacks/index.lua
entry/callbacks/on_render_control_panel.lua
entry/callbacks/on_render_menu.lua
entry/callbacks/on_render.lua
entry/callbacks/on_update.lua
entry/check_spec.lua
entry/entry_helper.lua
entry/index.lua
entry/init.lua
entry/interfaces/module_config.lua
entry/interfaces/spec_config.lua
entry/load_required_modules.lua
entry/load_spec_module.lua
header.lua
main.lua
memory-bank/activeContext.md
memory-bank/decisionLog.md
memory-bank/productContext.md
memory-bank/progress.md
memory-bank/systemPatterns.md

================================================================
Files
================================================================

================
File: _api/common/buff_db.lua
================
---@class buff_db
---@field public GHOST number[]
---@field public VENENOM_FANGS number[]
---@field public ERRATIC_GROWTH number[]
---@field public WALKING_BANE number[]
---@field public DRAGON_STRIKE number[]
---@field public OVERSURGE number[]
---@field public ENERGY_BOMB number[]
---@field public COLD_CLAWS number[]
---@field public COLD_CLAWS2 number[]
---@field public ROLLING_THUNDER number[]
---@field public STORMSLAM number[]
---@field public BLOOD_FURY number[]
---@field public ENRAGE number[]
---@field public BATTLE_STANCE number[]
---@field public DEFENSIVE_STANCE number[]
---@field public BATTLE_SHOUT number[]
---@field public RALLYING_CRY number[]
---@field public IGNORE_PAIN number[]
---@field public DIE_BY_THE_SWORD number[]
---@field public REND number[]
---@field public DEEP_WOUNDS number[]
---@field public OVERPOWER number[]
---@field public MORTAL_WOUNDS number[]
---@field public SUDDEN_DEATH number[]
---@field public SPELL_REFLECTION number[]
---@field public HAMSTRING number[]
---@field public THUNDER_CLAP number[]
---@field public SWEEPING_STRIKES number[]
---@field public BLADESTORM number[]
---@field public COLOSSUS_SMASH number[]
---@field public RECKLESSNESS number[]
---@field public HURRICANE number[]
---@field public AVATAR number[]
---@field public THUNDEROUS_ROAR number[]
---@field public STORM_BOLT number[]
---@field public SHOCKWAVE number[]
---@field public RAVAGER number[]
---@field public JUGGERNAUT number[]
---@field public MARTIAL_PROWESS number[]
---@field public MERCILESS_BONEGRINDER number[]
---@field public STRIKE_VULNERABILITIES number[]
---@field public EXECUTIONERS_PRECISION number[]
---@field public COLOSSAL_MIGHT number[]
---@field public COLLATERAL_DAMAGE number[]
---@field public THUNDER_BLAST number[]
---@field public BERSERKER_STANCE number[]
---@field public MEAT_CLEAVER number[]
---@field public BLOODCRAZE number[]
---@field public ASHEN_JUGGERNAUT number[]
---@field public CRUSHING_BLOW number[]
---@field public SLAUGHTERING_STRIKES number[]
---@field public BRUTAL_FINISH number[]
---@field public OPPORTUNIST number[]
---@field public DANCING_BLADES number[]
---@field public BERSERKING number[]
---@field public FURIOUS_BLOODTHIRST number[]
---@field public LETHAL_BLOWS number[]
---@field public MARKED_FOR_EXECUTION number[]
---@field public ODYNS_FURY number[]
---@field public GUSHING_WOUND number[]
---@field public PIERCING_HOWL number[]
---@field public VICTORIOUS number[]
---@field public REVENGE number[]
---@field public LAST_STAND number[]
---@field public DEMORALIZING_SHOUT number[]
---@field public SHIELD_WALL number[]
---@field public VIOLENT_OUTBURST number[]
---@field public SEEING_RED number[]
---@field public BURST_OF_POWER number[]
---@field public FERVID number[]
---@field public SPELL_BLOCK number[]
---@field public SHIELD_BLOCK number[]
---@field public DARK_SUCCOR number[]
---@field public BLOOD_PLAGUE number[]
---@field public MARK_OF_BLOOD number[]
---@field public BONE_SHIELD number[]
---@field public OSSIFIED_VITRIOL number[]
---@field public DEATH_AND_DECAY number[]
---@field public DANCING_RUNE_WEAPON number[]
---@field public ICE_CHAINS number[]
---@field public ICY_TALONS number[]
---@field public FROST_FEVER number[]
---@field public REAPERS_MARK number[]
---@field public RIME number[]
---@field public KILLING_MACHINE number[]
---@field public BREATH_OF_SINDRAGOSA number[]
---@field public ABOMINATION_LIMB number[]
---@field public EMPOWER_RUNE_WEAPON number[]
---@field public SUDDEN_DOOM number[]
---@field public DARK_TRANSFORMATION number[]
---@field public VIRULENT_PLAGUE number[]
---@field public FESTERING_WOUND number[]
---@field public CRYPT_FEVER number[]
---@field public DEFILE number[]
---@field public LICHBORNE number[]
---@field public DARKNESS number[]
---@field public METAMORPHOSIS number[]
---@field public FIERY_BRAND number[]
---@field public DEMON_SPIKES number[]
---@field public CALCIFIED_SPIKES number[]
---@field public SOUL_FRAGMENTS number[]
---@field public GRYANTHS_SCALE number[]
---@field public THE_HUNT number[]
---@field public RENDING_STRIKE number[]
---@field public GLAIVE_FLURRY number[]
---@field public REAVERS_MARK number[]
---@field public BEAR_FORM number[]
---@field public FYRAK number[]
---@field public ECLIPSE_SOLAR number[]
---@field public ECLIPSE_LUNAR number[]
---@field public SUNFIRE number[]
---@field public MOONFIRE number[]
---@field public PRIMORDIAL_ARCANIC_P number[]
---@field public INCARNATE number[]
---@field public BALANCE number[]
---@field public WILD_MUSS number[]
---@field public BARSKIN number[]
---@field public IRONBARK number[]
---@field public LIFE_BLOOM number[]
---@field public REGROWTH number[]
---@field public ADAPTIVE_SWARM number[]
---@field public WILD_GROWTH number[]
---@field public REJUVENATION number[]
---@field public CLEARCASTING number[]
---@field public REJUVENATION_GERMINATION number[]
---@field public INCARNATION number[]
---@field public CENARION_WARD number[]
---@field public CAT_FORM number[]
---@field public EFLOR number[]
---@field public BLOSSOM number[]
---@field public URSINE_VIGOR number[]
---@field public ESSENCE_BURST number[]
---@field public BLISTERING_SCALES number[]
---@field public EBON_MIGHT number[]
---@field public TIP_THE_SCALES number[]
---@field public PRESCIENCE number[]
---@field public BRONZE_ATTUNEMENT number[]
---@field public EBON_MIGHT_SELF number[]
---@field public IMMINENT_DESTRUCTION number[]
---@field public MASS_ERUPTION number[]
---@field public MASS_DISINTEGRATE number[]
---@field public ANCIENT_FLAME number[]
---@field public SOURCE_OF_MAGIC number[]
---@field public BOMBARDMENTS number[]
---@field public TEMPORAL_WOUND number[]
---@field public BLACK_ATTUNEMENT number[]
---@field public BLESSING_OF_THE_BRONZE number[]
---@field public BARBED_SHOT number[]
---@field public BARBED_SHOT_DEBUFF number[]
---@field public BEAST_CLEAVE number[]
---@field public HEATING_UP number[]
---@field public HOT_STREAK number[]
---@field public ICE_FLOES number[]
---@field public SHIFTING_POWER number[]
---@field public FURY_OF_THE_SUN_KING number[]
---@field public COMBUSTION number[]
---@field public SUN_KINGS_BLESSING number[]
---@field public ICE_COLD number[]
---@field public BLAZING_BARRIER number[]
---@field public WINTERS_CHILL number[]
---@field public GLACIAL_SPIKE number[]
---@field public FINGERS_OF_FROST number[]
---@field public BRAIN_FREEZE number[]
---@field public FROST_NOVA number[]
---@field public ICE_NOVA number[]
---@field public FREEZING_RAIN number[]
---@field public FREEZING_WINDS number[]
---@field public ICE_BARRIER number[]
---@field public POWER_STRIKES number[]
---@field public TEACHINGS_OF_THE_MONASTERY number[]
---@field public MARK_OF_THE_CRANE number[]
---@field public DANCE_OF_CHI_JI number[]
---@field public MARK_OF_THE_CRANE_DEBUFF number[]
---@field public BLACKOUT_KICK_BUFF number[]
---@field public TOUCH_OF_KARMA number[]
---@field public FORTIFYING_BREW number[]
---@field public DIFFUSE_MAGIC number[]
---@field public DAMPEN_HARM number[]
---@field public ANCIENT_TEACHINGS number[]
---@field public SOOTHING_MIST number[]
---@field public VIVACIOUS_VIVIFICATION number[]
---@field public ENVELOPING_MIST number[]
---@field public RENEWING_MIST number[]
---@field public CHI_HARMONY number[]
---@field public THUNDER_FOCUS number[]
---@field public RED_CRANE_ENVELOPING number[]
---@field public AWAKENED_JADEFIRE number[]
---@field public SHEILUN_CLOUD number[]
---@field public MANA_TEA number[]
---@field public TEA_PLENTY number[]
---@field public JADE_LIGHTNING number[]
---@field public ZEN_PULSE number[]
---@field public JADE_EMPOWERMENT number[]
---@field public KEG_SMASH number[]
---@field public HARSH_DISCIPLINE number[]
---@field public SURGE_OF_LIGHT number[]
---@field public ATONEMENT number[]
---@field public POWER_WORD_SHIELD number[]
---@field public POWER_OF_THE_DARK_SIDE number[]
---@field public PRAYER_OF_MENDING number[]
---@field public RENEW number[]
---@field public PURGE_THE_WICKED number[]
---@field public RHAPSODY number[]
---@field public PAIN_SUPPRESSION number[]
---@field public OPPORTUNITY number[]
---@field public GRAND_MELEE number[]
---@field public BURIED_TREASURE number[]
---@field public TRUE_BEARING number[]
---@field public BROADSIDE number[]
---@field public SKULL_AND_CROSSBONES number[]
---@field public SLICE_AND_DICE number[]
---@field public STEALTH number[]
---@field public VANISH number[]
---@field public SHADOW_DANCE number[]
---@field public SUBREFUGE number[]
---@field public FLAME_SHOCK number[]
---@field public STORMKEEPER number[]
---@field public PRIMORDIAL_WAVE number[]
---@field public LAVA_SURGE number[]
---@field public SPIRITWALKERS_GRACE number[]
---@field public PRIMORDIAL_BOND number[]
---@field public ASCENDANCE number[]
---@field public ICE_FURY number[]
---@field public RIPTIDE number[]
---@field public CLOUDBURST_TOTEM number[]
---@field public NATURES_SWIFTNESS number[]
---@field public SPIRIT_LINK_TOTEM number[]
---@field public IRIDISCENCE_RED number[]
---@field public IRIDISCENCE_BLUE number[]
---@field public BURNOUT number[]
---@field public DIVINE_PURPOSE number[]
---@field public DIVINE_RESONANCE number[]
---@field public JUDGMENT number[]
---@field public BEACON_OF_LIGHT number[]
---@field public BEACON_OF_FAITH number[]
---@field public VENERATION number[]
---@field public FREE_HAMMER_WRATH number[]
---@field public AVENGING_WRATH number[]
---@field public EXPUGNATION number[]
---@field public CONSECRATION number[]
---@field public DEVOTION_AURA number[]
---@field public CRUSADER_AURA number[]
---@field public RETRIBUTION_AURA number[]
---@field public CONCENTRATION_AURA number[]
---@field public FINAL_RECKONING number[]
---@field public HAMMER_OF_JUSTICE number[]
---@field public TRUTHS_WAKE number[]
---@field public EMPYREAN_POWER number[]
---@field public BLESSING_OF_FREEDOM number[]
---@field public DIVINE_SHIELD number[]
---@field public DIVINE_PROTECTION number[]
---@field public BLESSING_OF_PROTECTION number[]
---@field public DIVINE_STEED number[]
---@field public FORBEARANCE number[]
---@field public ETERNAL_FLAME number[]
---@field public DARKEST_BEFORE_THE_DAWN number[]
---@field public INFUSION_OF_LIGHT number[]
---@field public BLESSING_OF_SACRIFICE number[]
---@field public ULTIMATE_BLESSING_OF_SACRIFICE number[]
---@field public EMPYREAN_LEGACY number[]
---@field public HAND_OF_DIVINITY number[]
---@field public DIVINE_FAVOR number[]
---@field public TYRS_DELIVERANCE number[]
---@field public ARDENT_DEFENDER number[]
---@field public GIFT_OF_THE_GOLDEN_VALKYR number[]
---@field public GUARDIAN_OF_ANCIENT_KINGS number[]
---@field public SHINING_LIGHT number[]
---@field public SHIELD_OF_THE_RIGHTEOUS number[]
---@field public BARRICADE_OF_FAITH number[]
---@field public FAITH_IN_THE_LIGHT number[]
---@field public BLESSING_OF_BRONZE number[]
---@field public DRAGONRAGE number[]
---@field public HOVER number[]
---@field public LEAPING_FLAMES number[]
---@field public SNAPFIRE number[]
---@field public CHARGED_BLAST number[]
---@field public OBSIDIAN_SCALES number[]
---@field public SCARLET_ADAPTATION number[]
---@field public ENKINDLE number[]
---@field public IRIDESCENCE_RED number[]
---@field public IRIDESCENCE_BLUE number[]
---@field public MANEUVERABILITY number[]
---@field public EMERALD_TRANCE number[]
---@field public FIRE_BREATH number[]
---@field public SHATTERING_STAR number[]
---@field public LIVING_FLAME number[]
---@field public IMPROVED_SCORCH_DEBUFF number[]
---@field public HEAT_SHIMMER number[]
---@field public NETHER_PRECISION number[]
---@field public MAGE_CLEARCASTING number[]
---@field public ARCANE_HARMONY number[]
---@field public AETHER_ATTUNEMENT number[]
---@field public LOCK_AND_LOAD number[]
---@field public PRECISE_SHOTS number[]
---@field public TRICK_SHOTS number[]
---@field public EXPOSED_FLANK number[]
---@field public BESTIAL_BARRAGE number[]
---@field public WILDFIRE_BOMB number[]
---@field public TIP_OF_THE_SPEAR number[]
---@field public SIC_EM number[]
---@field public MONGOOSE_FURY number[]
---@field public MAELSTROM_WEAPON number[]
---@field public DEMONIC_CORE number[]
---@field public GRIMOIRE_OF_SACRIFICE number[]
---@field public DEMONIC_CALLING number[]
---@field public UNENDING_RESOLVE number[]
---@field public VILE_TAINT number[]
---@field public HAUNT number[]
---@field public NIGHTFALL number[]
---@field public SOUL_ROT number[]
---@field public UNSTABLE_AFFLICTION number[]
---@field public AGONY number[]
---@field public CORRUPTION number[]
---@field public TORMENTED_CRESCENDO number[]
---@field public SEED_OF_CORRUPTION number[]
---@field public HUNTERS_MARK number[]
---@field public RIP number[]
---@field public THRASH number[]
---@field public RAKE number[]
---@field public FERAL_FRENZY number[]
---@field public ADAPTIVE_SWARM_FERAL number[]
---@field public APEX_PREDATORS_CRAVING number[]
---@field public BLOODTALONS number[]
---@field public RAVAGE number[]
---@field public DREADFUL_WOUND number[]
---@field public TIGERS_FURY number[]
---@field public SUDDEN_AMBUSH number[]
---@field public MARK_OF_THE_WILD number[]
---@field public IRONFUR number[]
---@field public SURVIVAL_INSTINCTS number[]
---@field public FRENZIED_REGENERATION number[]
---@field public GALACTIC_GUARDIAN number[]
---@field public INCARNATION_GUARDIAN_OF_URSOC number[]
---@field public BERSERK number[]
---@field public TOOTH_AND_CLAW number[]
---@field public CONVOKE_THE_SPIRITS number[]
---@field public BLADE_FLURRY number[]
---@field public SUBTERFUGE number[]
---@field public AUDACITY number[]
---@field public TAKE_EM_BY_SURPRISE number[]
---@field public INSTANT_POISON number[]
---@field public ECHOING_REPRIMAND_3 number[]
---@field public ECHOING_REPRIMAND_4 number[]
---@field public ECHOING_REPRIMAND_5 number[]
---@field public SHADOWY_INSIGHT number[]
---@field public MIND_FLAY number[]
---@field public MIND_DEVOURER number[]
---@field public DECIMATION number[]
---@field public CONFLAGRATION_OF_CHAOS number[]
---@field public BACKDRAFT number[]
---@field public IMMOLATE number[]
---@field public HAVOC number[]
---@field public RITUAL_OF_RUIN number[]
---@field public CRIMSON_TEMPEST number[]
---@field public GARROTE number[]
---@field public RUPTURE number[]
---@field public SERRATED_BONE_SPIKE number[]
---@field public DEADLY_POISON number[]
---@field public BLINDSIDE number[]
---@field public SHIV number[]
---@field public IMPROVED_GARROTE number[]
---@field public INDISCRIMINATE_CARNAGE number[]
---@field public DEADLY_POISON_BUFF number[]
---@field public COLD_BLOOD number[]
---@field public ATROPHIC_POISON_BUFF number[]
---@field public UNBOUND_CHAOS number[]
---@field public THRILL_OF_THE_FIGHT number[]
---@field public ART_OF_THE_GLAIVE number[]
---@field public WHIRLWIND number[]
---@field public THISTLE_TEA number[]
---@field public HYPERTHERMIA number[]
---@field public WITHER number[]
---@field public CAUSTIC_SPATTER number[]
---@field public DARKEST_NIGHT number[]
---@field public DEATHBLOW number[]
---@field public ARC_DISCHARGE number[]
---@field public HAILSTORM number[]
---@field public TRAVEL_FORM number[]
---@field public DEATHS_CHILL number[]
---@field public SLICK_ICE number[]
---@field public ICY_VEINS number[]
---@field public ECHOES_OF_GREAT_SUNDERING number[]
---@field public ICE_FURY_FROST_SHOCK_EMP number[]
---@field public ICE_STRIKE number[]
---@field public INCARNATION_CHOSEN_OF_ELUNE number[]
---@field public WINDFURY_WEAPON number[]
---@field public FLAMETONGUE_WEAPON number[]
---@field public SKYFURY number[]
---@field public STORMSURGE number[]
---@field public ARCANE_SURGE_BUFF number[]
---@field public TOUCH_OF_THE_MAGI_DEBUFF number[]
---@field public LIGHTNING_SHIELD number[]
---@field public GHOST_WOLF number[]
---@field public BESTIAL_WRATH number[]
---@field public AMPLIFYING_POISON number[]
---@field public CRIPPLING_POISON number[]
---@field public ATROPHIC_POISON number[]
---@field public VOIDFORM number[]
---@field public SHADOWFORM number[]
---@field public POWER_INFUSION number[]
---@field public DARK_THOUGHT number[]
---@field public VAMPIRIC_EMBRACE number[]
---@field public DISPERSION number[]
---@field public VAMPIRIC_TOUCH number[]
---@field public SHADOW_WORD_PAIN number[]
---@field public DEVOURING_PLAGUE number[]
---@field public EARTH_SHIELD number[]
---@field public TIDAL_WAVES number[]
---@field public WATER_SHIELD number[]
---@field public HEALING_RAIN number[]
---@field public TIDEBRINGER number[]
---@field public HIGH_TIDE number[]
---@field public MASTER_OF_ELEMENTS number[]
---@field public ENVELOPING_SHADOWFLAME number[]
---@field public VOID_RIFT number[]
---@field public CURSE_OF_ENTROPY number[]
---@field public CORRUPTED_COATING number[]
---@field public ANCESTRAL_GUIDANCE number[]
---@field public CAMOUFLAGE number[]
---@field public ADRENALINE_RUSH number[]
---@field public RUTHLESS_PRECISION number[]
---@field public BINDING_SHOT_STUN number[]
---@field public BINDING_SHOT number[]
---@field public CRASH_LIGHTNING number[]
---@field public PRESENCE_OF_MIND number[]
---@field public FEIGN_DEATH_IMPROVED number[] 
---@field public SURVIVAL_TACTICS number[] 
---@field public SAP number[]
---@field public PREDATORY_SWIFTNESS number[]
---@field public CELESTIAL_ALIGNMENT number[]
---@field public ARCANE_INTELLECT number[]
---@field public ZEN_MEDITATION number[]
---@field public BLACKOUT_COMBO number[]
---@field public MASTER_OF_THE_GLAIVE number[]
---@field public DISPLACEMENT_BEACON number[]
---@field public ALTER_TIME number[]
---@field public FROSTFIRE_EMPOWERMENT number[]
---@field public RUINATION number[]
---@field public INFERNAL_BOLT number[]
---@field public GLORIOUS_INCANDESCENSE number[]
---@field public ENTANGLING_ROOTS number[]
---@field public MASS_ENTANGLEMENT number[]
---@field public RING_OF_FIRE number[]
---@field public IGNITE number[]
---@field public FROST_BOMB number[] 
---@field public FROST_BOMB_SLOW number[]
---@field public STORM_EARTH_AND_FIRE number[]
---@field public CLEARCASTING_FERAL number[]
---@field public BERSERK_FERAL number[]
---@field public DEATHSPEAKER number[]
---@field public VOIDHEART number[]
---@field public SUDDEN_AMBUSH_PROC number[]
---@field public EXCESS_FROST number[]
---@field public POLYMORPH number[]
---@field public TRICKS_OF_THE_TRADE number[]
---@field public FERAL_SPIRITS number[]
---@field public MOONKIN_FORM number[]
---@field public PRISMATIC_BARRIER number[]
---@field public ICE_BLOCK number[]
---@field public LIGHTNING_ROD number[]
---@field public CONCUSSIVE_SHOT number[]
---@field public CALL_OF_THE_WILD number[]
---@field public LOADED_DICE number[] 
---@field public FEAR number[]
---@field public SOUL_SWAP number[]
---@field public CURSE_OF_TONGUES number[]
---@field public CURSE_OF_WEAKNESS number[]
---@field public CURSE_OF_EXHAUSTION number[]
---@field public DEATHSTALKERS_MARK number[]
---@field public SNOWDRIFT number[]
---@field public DEATHMARK number[]
---@field public KINGSBANE number[]
---@field public CLEAR_THE_WITNESS number[]
---@field public HEX number[]
---@field public NUMBING_POISON number[]
---@field public WOUND_POISON number[]
---@field public ENVENOM number[]
---@field public COALESCING_WATER number[]
---@field public ANCESTRAL_SWIFTNESSS number[]
---@field public STELLAR_FLARE number[]
---@field public DOOM number[]
---@field public STARLORD number[]
---@field public WARRIOR_OF_ELUNE number[]
---@field public BETWEEN_THE_EYES number[]

================
File: _api/common/color.lua
================
-- Example:
-- ---@type color
-- local c = require("common/color")
-- c: -> IntelliSense
-- Warning: Access with ":", not "."

---@class color
---Creates a new color instance.
---@field public new fun(r: number, g: number, b: number, a?: number): color
---Clones the color instance.
---@field public clone fun(self: color): color
---Blends the color instance with another color.
---@field public blend fun(self: color, other: color, alpha: number): color
---Sets the color instance's values.
---@field public set fun(self: color, r: number, g: number, b: number, a?: number): color
---Gets the color instance's values.
---@field public get fun(self: color): (number, number, number, number)
---Clamps the color instance's values to the range [0, 255].
---@field public clamp fun(self: color): color

---@class color
---Creates a red color.
---@field public red fun(alpha?: number): color
---Creates a green color.
---@field public green fun(alpha?: number): color
---Creates a blue color.
---@field public blue fun(alpha?: number): color
---Creates a white color.
---@field public white fun(alpha?: number): color
---Creates a black color.
---@field public black fun(alpha?: number): color
---Creates a yellow color.
---@field public yellow fun(alpha?: number): color
---Creates a pink color.
---@field public pink fun(alpha?: number): color
---Creates a purple color.
---@field public purple fun(alpha?: number): color
---Creates a gray color.
---@field public gray fun(alpha?: number): color
---Creates a brown color.
---@field public brown fun(alpha?: number): color
---Creates a gold color.
---@field public gold fun(alpha?: number): color
---Creates a silver color.
---@field public silver fun(alpha?: number): color
---Creates an orange color.
---@field public orange fun(alpha?: number): color
---Creates a cyan color.
---@field public cyan fun(alpha?: number): color
---Creates a pale red color.
---@field public red_pale fun(alpha?: number): color
---Creates a pale green color.
---@field public green_pale fun(alpha?: number): color
---Creates a pale blue color.
---@field public blue_pale fun(alpha?: number): color
---Creates a pale cyan color.
---@field public cyan_pale fun(alpha?: number): color
---Creates a pale gray color.
---@field public gray_pale fun(alpha?: number): color

---@class color
---Converts HSV values to a color.
---@field public hsv_to_rgb fun(h: number, s: number, v: number): color
---Gets a rainbow color based on the current time.
---@field public get_rainbow_color fun(ratio: number): color

================
File: _api/common/enums.lua
================
---@class class_id
---@field public ANY number
---@field public WARRIOR number
---@field public PALADIN number
---@field public HUNTER number
---@field public ROGUE number
---@field public PRIEST number
---@field public DEATHKNIGHT number
---@field public SHAMAN number
---@field public MAGE number
---@field public WARLOCK number
---@field public MONK number
---@field public DRUID number
---@field public DEMONHUNTER number
---@field public EVOKER number

---@class class_id_to_name
---@field public [number] string

---@class power_type
---@field public HEALTH number
---@field public NONE number
---@field public MANA number
---@field public RAGE number
---@field public FOCUS number
---@field public ENERGY number
---@field public COMBOPOINTS number
---@field public RUNES number
---@field public RUNICPOWER number
---@field public SOULSHARDS number
---@field public LUNARPOWER number
---@field public HOLYPOWER number
---@field public ALTERNATE number
---@field public MAELSTROM number
---@field public CHI number
---@field public INSANITY number
---@field public OBSOLETE number
---@field public OBSOLETE2 number
---@field public ARCANECHARGES number
---@field public FURY number
---@field public PAIN number
---@field public ESSENCE number
---@field public RUNEFORGEPOWER number

---@class group_role
---@field public NONE number
---@field public TANK number
---@field public HEALER number
---@field public DAMAGER number

---@class classification
---@field public UNKNOWN number
---@field public NORMAL number
---@field public ELITE number
---@field public RARE_ELITE number
---@field public WORLD_BOSS number
---@field public RARE number
---@field public TRIVIAL number
---@field public MINUS number

---@class mark_index
---@field public NO_MARK number
---@field public NO_ICON number
---@field public STAR number
---@field public CIRCLE number
---@field public DIAMOND number
---@field public TRIANGLE number
---@field public MOON number
---@field public SQUARE number
---@field public CROSS number
---@field public SKULL number
---@field public NO_MARK_2 number

---@class loss_of_control_type
---@field public NONE number
---@field public POSSES number
---@field public CONFUSE number
---@field public CHARM number
---@field public FEAR number
---@field public STUN number
---@field public PACIFY number
---@field public ROOT number
---@field public SILENCE number
---@field public PACIFY_SILENCE number
---@field public DISARM number
---@field public SCHOOL_INTERRUPT number
---@field public STUN_MECHANIC number
---@field public FEAR_MECHANIC number
---@field public NONE_2 number
---@field public NONE_3 number

---@class collision_flags
---@field public None number
---@field public DoodadCollision number
---@field public DoodadRender number
---@field public WmoCollision number
---@field public WmoRender number
---@field public WmoNoCamCollision number
---@field public Terrain number
---@field public IgnoreWmoDoodad number
---@field public LiquidWaterWalkable number
---@field public LiquidAll number
---@field public Cull number
---@field public EntityCollision number
---@field public EntityRender number
---@field public Collision number
---@field public LineOfSight number
---@field public combine fun(...: string): number

---@class schools_flag : integer

---@class spell_schools_flags
---@field public Physical schools_flag
---@field public Holy schools_flag
---@field public Fire schools_flag
---@field public Nature schools_flag
---@field public Frost schools_flag
---@field public Shadow schools_flag
---@field public Arcane schools_flag
---@field public Spellstrike schools_flag
---@field public Flamestrike schools_flag
---@field public Froststrike schools_flag
---@field public Holystrike schools_flag
---@field public Stormstrike schools_flag
---@field public Shadowstrike schools_flag
---@field public Spellfire schools_flag
---@field public Spellfrost schools_flag
---@field public Spellshadow schools_flag
---@field public Frostfire schools_flag
---@field public Radiant schools_flag
---@field public Holyfrost schools_flag
---@field public Holystorm schools_flag
---@field public Twilight schools_flag
---@field public Froststorm schools_flag
---@field public Volcanic schools_flag
---@field public Astral schools_flag
---@field public Plague schools_flag
---@field public Shadowflame schools_flag
---@field public Shadowfrost schools_flag
---@field public Divine schools_flag
---@field public combine fun(...: string): schools_flag
---@field public contains fun(value: schools_flag, flag: schools_flag): boolean

---@class spell_type
---@field public TARGET number
---@field public POSITION number

---@class trigger_mode
---@field public BASIC number
---@field public PREDICTION number

---@class buff_type
---@field public EXCEPTION number
---@field public UNDEFINIED number
---@field public UNKNOWN number
---@field public MAGIC number
---@field public CURSE number
---@field public DISEASE number
---@field public POISON number
---@field public STEALTH number
---@field public TO_BE_DETERMINED number
---@field public MAGIC_CURSE_DISEASE_POISON number
---@field public SPECIAL number
---@field public ENRAGE number

---@class buff_type_to_string
---@field public [number] string

---@class menu_element_type
---@field public BUTTON number
---@field public CHECKBOX number
---@field public COLOR_PICKER number
---@field public COMBOBOX number
---@field public COMBOBOX_REORDERABLE number
---@field public KEY_CHECKBOX number
---@field public KEYBIND number
---@field public SLIDER_FLOAT number
---@field public SLIDER_INT number
---@field public TEXT_INPUT number
---@field public TREE_NODE number
---@field public HEADER number
---@field public WINDOW number

---@class window_enums
---@field public window_behaviour_flags table<string, number>
---@field public font_id table<string, number>
---@field public rect_borders_rounding_flags table<string, number>
---@field public window_resizing_flags table<string, number>
---@field public window_cross_visuals table<string, number>

---@class spec_enum
---@field public ARMS_WARRIOR number
---@field public FURY_WARRIOR number
---@field public PROTECTION_WARRIOR number
---@field public HOLY_PALADIN number
---@field public PROTECTION_PALADIN number
---@field public RETRIBUTION_PALADIN number
---@field public BEAST_MASTERY_HUNTER number
---@field public MARKSMANSHIP_HUNTER number
---@field public SURVIVAL_HUNTER number
---@field public ASSASSINATION_ROGUE number
---@field public OUTLAW_ROGUE number
---@field public SUBTLETY_ROGUE number
---@field public DISCIPLINE_PRIEST number
---@field public HOLY_PRIEST number
---@field public SHADOW_PRIEST number
---@field public BLOOD_DEATHKNIGHT number
---@field public FROST_DEATHKNIGHT number
---@field public UNHOLY_DEATHKNIGHT number
---@field public ELEMENTAL_SHAMAN number
---@field public ENHANCEMENT_SHAMAN number
---@field public RESTORATION_SHAMAN number
---@field public ARCANE_MAGE number
---@field public FIRE_MAGE number
---@field public FROST_MAGE number
---@field public AFFLICTION_WARLOCK number
---@field public DEMONOLOGY_WARLOCK number
---@field public DESTRUCTION_WARLOCK number
---@field public BREWMASTER_MONK number
---@field public MISTWEAVER_MONK number
---@field public WINDWALKER_MONK number
---@field public BALANCE_DRUID number
---@field public FERAL_DRUID number
---@field public GUARDIAN_DRUID number
---@field public RESTORATION_DRUID number
---@field public HAVOC_DEMON_HUNTER number
---@field public VENGEANCE_DEMON_HUNTER number
---@field public EVOKER_DEVASTATION number
---@field public EVOKER_PRESERVATION number
---@field public EVOKER_AUGMENTATION number

---@class class_spec_id
---@field public to_string table<number, table<number, string>>
---@field public spec_enum spec_enum
---@field public to_int table<number, table<number, number>>
---@field public get_specialization_name fun(char_class_id: number, char_spec_id: number): string
---@field public get_specialization_enum fun(char_class_id: number, char_spec_id: number): number
---@field public get_spec_id_from_enum fun(spec_enum: number): number

---@class class_spec_to_role
---@field public class_role table<string, table<number, number>>
---@field public get_group_role_backup fun(char_class_id: number, char_spec: number): number

---@class enums
---@field public class_id class_id
---@field public class_id_to_name class_id_to_name
---@field public power_type power_type
---@field public group_role group_role
---@field public classification classification
---@field public mark_index mark_index
---@field public loss_of_control_type loss_of_control_type
---@field public collision_flags collision_flags
---@field public spell_schools_flags spell_schools_flags
---@field public spell_type spell_type
---@field public trigger_mode trigger_mode
---@field public buff_db buff_db
---@field public buff_type buff_type
---@field public buff_type_to_string buff_type_to_string
---@field public menu_element_type menu_element_type
---@field public window_enums window_enums
---@field public class_spec_id class_spec_id
---@field public class_spec_to_role class_spec_to_role

================
File: _api/common/geometry/geometry.lua
================
---@class circle_data
---@field public units_hit number
---@field public best_unit game_object
---@field public best_position vec3
---@field public best_units table<game_object>

---@class circle
---@field public center vec3
---@field public radius number
---@field public create fun(self: circle, center: vec3, radius: number): circle
---@field public is_inside fun(self: circle, point: vec3, hitbox: number): boolean
---@field public get_units_inside fun(self: circle, units_list: table<game_object>): table<game_object>
---@field public get_allies_inside fun(self: circle, units_list_override: table<game_object>?): table<game_object>
---@field public get_enemies_inside fun(self: circle, units_list_override: table<game_object>?): table<game_object>
---@field public draw fun(self: circle): nil
---@field public draw_with_counter fun(self: circle, units_hit_count: number?): nil
---@field public get_optimal_hit_position fun(self: circle, search_center: vec3, search_radius: number, max_range: number, include_enemies: boolean, include_allies: boolean): circle_data

---@class rectangle
---@field public corner1 vec3
---@field public corner2 vec3
---@field public corner3 vec3
---@field public corner4 vec3
---@field public width number
---@field public length number
---@field public origin vec3
---@field public destination vec3
---@field public create fun(self: rectangle, origin: vec3, destination: vec3, width: number, length: number?): rectangle
---@field public create_direction fun(self: rectangle, position: vec3, direction: vec3, width: number, length: number): rectangle
---@field public is_inside fun(self: rectangle, point: vec3, hitbox: number): boolean
---@field public get_units_inside fun(self: rectangle, units_list: table<game_object>): table<game_object>
---@field public get_allies_inside fun(self: rectangle, units_list_override: table<game_object>?): table<game_object>
---@field public get_enemies_inside fun(self: rectangle, units_list_override: table<game_object>?): table<game_object>
---@field public draw fun(self: rectangle): nil
---@field public draw_with_counter fun(self: rectangle, count: number?): nil

---@class cone
---@field public center vec3
---@field public radius number
---@field public angle_raw number
---@field public angle number
---@field public direction vec3
---@field public path_around_cone table<vec3>
---@field public right_side_circ_points table<vec3>
---@field public left_side_circ_points table<vec3>
---@field public left_line_points table<vec3>
---@field public right_line_points table<vec3>
---@field public extra_left_point table<vec3>
---@field public extra_right_point table<vec3>
---@field public create fun(self: cone, center: vec3, destination: vec3, radius: number, angle: number): cone
---Function to create a cone given a position, radius, angle, and direction
---Note: Direction is obj:direction()
---@field public create_direction fun(self: cone, center: vec3, direction: vec3, radius: number, angle: number): cone
---@field public create_unit_frontal fun(self: cone, unit: game_object, radius: number, angle: number): cone
---@field public get_path fun(self: cone, cone_info: table): nil
---@field public is_inside fun(self: cone, point_position: vec3, hitbox: number): boolean
---@field public get_units_inside fun(self: cone, units_list: table<game_object>): table<game_object>
---@field public get_allies_inside fun(self: cone, units_list_override: table<game_object>?): table<game_object>
---@field public get_enemies_inside fun(self: cone, units_list_override: table<game_object>?): table<game_object>
---@field public draw fun(self: cone, color?:color, thickness?:number): nil
---@field public draw_with_counter fun(self: cone, count: number?): nil

================
File: _api/common/geometry/vec2.lua
================
-- Example:
-- ---@type vec2
-- local v = require("common/geometry/vector_2")
-- v: -> IntelliSense
-- Warning: Access with ":", not "."

---@class vec2
---@field public x number
---@field public y number
---@field public z number
---Creates a new vec2 instance.
---@field public new fun(x: number, y: number): vec2
---Clones the vec2 instance.
---@field public clone fun(self: vec2): vec2
---Overloads the addition operator for vec2.
---@field public __add fun(self: vec2, a: vec2): vec2
---Overloads the subtraction operator for vec2.
---@field public __sub fun(self: vec2, a: vec2): vec2
---Overloads the multiplication operator for vec2.
---@field public __mul fun(self: vec2, a: vec2 | number): vec2
---Overloads the division operator for vec2.
---@field public __div fun(self: vec2, a: vec2 | number): vec2
---Checks equality between two vec2 instances.
---@field public __eq fun(self: vec2, a: vec2): boolean
---Normalizes the vec2 instance.
---@field public normalize fun(self: vec2): vec2
---Gets the length of the vec2 instance.
---@field public length fun(self: vec2): number
---Gets the squared length of the vec2 instance.
---@field public length_squared fun(self: vec2): number
---Calculates the dot product between two vec2 instances.
---@field public dot fun(self: vec2, v: vec2): number
---Performs linear interpolation between two vec2 instances.
---@field public lerp fun(self: vec2, target: vec2, alpha: number): vec2
---Randomizes the x and y components within a margin.
---@field public randomize_xy fun(self: vec2, margin: number): nil
---Checks if the vec2 instance is NaN.
---@field public is_nan fun(self: vec2): boolean
---Checks if the vec2 instance is zero.
---@field public is_zero fun(self: vec2): boolean
---Gets the unit vector of the vec2 instance.
---@field public get_unit_vector fun(self: vec2): vec2
---Extends the vec2 instance towards a target by a certain number of units.
---@field public get_extended fun(self: vec2, target: vec2, units: number): vec2
---Calculates the distance to another vec2 instance.
---@field public dist_to fun(self: vec2, other: vec2): number
---Calculates the squared distance to another vec2 instance.
---@field public squared_dist_to fun(self: vec2, other: vec2): number
---Rotates the vec2 instance around a point by a certain number of degrees.
---@field public rotate_around fun(self: vec2, origin: vec2, degrees: number): vec2
---Calculates the dot product between two vec2 instances.
---@field public dot_product fun(v1: vec2, v2: vec2): number
---Gets the angle between two vec2 instances with respect to an origin.
---@field public get_angle fun(self: vec2, target: vec2, origin: vec2): number
---Checks if a point intersects with a segment.
---@field public intersects fun(self: vec2, segment_end: vec2, point: vec2, margin: number, radius: number, denominator: number): boolean
---Gets the left perpendicular vector of the vec2 instance with respect to an origin.
---@field public get_perp_left fun(self: vec2, origin: vec2): vec2
---Gets the left perpendicular vector of the vec2 instance with a factor applied.
---@field public get_perp_left_factor fun(self: vec2, origin: vec2, factor: number): vec2
---Gets the right perpendicular vector of the vec2 instance with respect to an origin.
---@field public get_perp_right fun(self: vec2, origin: vec2): vec2
---Gets the right perpendicular vector of the vec2 instance with a factor applied.
---@field public get_perp_right_factor fun(self: vec2, origin: vec2, factor: number): vec2

================
File: _api/common/geometry/vec3.lua
================
-- Example:
-- ---@type vec3
-- local v = require("common/geometry/vector_3")
-- v: -> IntelliSense
-- Warning: Access with ":", not "."

---@class vec3
---@field public x number
---@field public y number
---@field public z number
---Creates a new vec3 instance.
---@field public new fun(x: number, y: number, z: number): vec3
---Clones the vec3 instance.
---@field public clone fun(self: vec3): vec3
---Overloads the addition operator for vec3.
---@field public __add fun(self: vec3, a: vec3): vec3
---Overloads the subtraction operator for vec3.
---@field public __sub fun(self: vec3, a: vec3): vec3
---Overloads the multiplication operator for vec3.
---@field public __mul fun(self: vec3, a: vec3 | number): vec3
---Overloads the division operator for vec3.
---@field public __div fun(self: vec3, a: vec3 | number): vec3
---Checks equality between two vec3 instances.
---@field public __eq fun(self: vec3, a: vec3): boolean
---Normalizes the vec3 instance.
---@field public normalize fun(self: vec3): vec3
---Gets the length of the vec3 instance.
---@field public length fun(self: vec3): number
---Gets the squared length of the vec3 instance.
---@field public length_squared fun(self: vec3): number
---Calculates the dot product between two vec3 instances.
---@field public dot fun(self: vec3, v: vec3): number
---Calculates the cross product between two vec3 instances.
---@field public cross fun(self: vec3, v: vec3): vec3
---Checks if the vec3 instance is NaN.
---@field public is_nan fun(self: vec3): boolean
---Checks if the vec3 instance is zero.
---@field public is_zero fun(self: vec3): boolean
---Performs linear interpolation between two vec3 instances.
---@field public lerp fun(self: vec3, target: vec3, alpha: number): vec3
---Gets the unit vector of the vec3 instance.
---@field public get_unit_vector fun(self: vec3): vec3
---Extends the vec3 instance towards a target by a certain number of units.
---@field public get_extended fun(self: vec3, target: vec3, units: number): vec3
---Calculates the distance to another vec3 instance.
---@field public dist_to fun(self: vec3, other: vec3): number
---Calculates the squared distance to another vec3 instance.
---@field public squared_dist_to fun(self: vec3, other: vec3): number
---Calculates the distance to another vec3 instance, ignoring the z-coordinate.
---@field public dist_to_ignore_z fun(self: vec3, other: vec3): number
---Calculates the squared distance to another vec3 instance, ignoring the z-coordinate.
---@field public squared_dist_to_ignore_z fun(self: vec3, other: vec3): number
---Projects the vec3 instance onto a 2D plane.
---@field public project_2d fun(self: vec3): vec3
---Rotates the vec3 instance around a point by a certain number of degrees.
---@field public rotate_around fun(self: vec3, origin: vec3, degrees: number): vec3
---Rotates the vec3 instance around the z-axis by a certain number of radians.
---@field public rotate_3d_radians fun(self: vec3, angle_radians: number): vec3
---Calculates the dot product between two vec3 instances.
---@field public dot_product fun(v1: vec3, v2: vec3): number
---Randomizes the x and y components within a margin.
---@field public randomize_xy fun(self: vec3, margin: number): vec3
---Calculates the angle between two vec3 instances with respect to an origin.
---@field public get_angle fun(self: vec3, target: vec3, origin: vec3): number
---Checks if a point intersects with a line segment.
---@field public intersects fun(self: vec3, segment_end: vec3, point: vec3, margin: number, radius: number, denominator: number): boolean
---Gets the left perpendicular vector of the vec3 instance with respect to an origin.
---@field public get_perp_left fun(self: vec3, origin: vec3): vec3
---Gets the left perpendicular vector of the vec3 instance with a factor applied.
---@field public get_perp_left_factor fun(self: vec3, origin: vec3, factor: number): vec3
---Gets the right perpendicular vector of the vec3 instance with respect to an origin.
---@field public get_perp_right fun(self: vec3, origin: vec3): vec3
---Gets the right perpendicular vector of the vec3 instance with a factor applied.
---@field public get_perp_right_factor fun(self: vec3, origin: vec3, factor: number): vec3
---Calculates the distance from the vec3 instance to a line segment.
---@field public dist_to_line_segment fun(self: vec3, point_a: vec3, point_b: vec3): number
---Calculates the squared distance from the vec3 instance to a line segment.
---@field public squared_dist_to_line_segment fun(self: vec3, point_a: vec3, point_b: vec3): number
---Calculates the squared distance from the vec3 instance to a line segment, ignoring the z-coordinate.
---@field public squared_dist_to_ignore_z_line_segment fun(self: vec3, point_a: vec3, point_b: vec3): number

================
File: _api/common/modules/buff_manager.lua
================
-- Example:
-- ---@type buff_manager
-- local x = require("common/modules/buff_manager")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class buff_manager_data
---@field public is_active boolean
---@field public remaining number
---@field public stacks number

---@class buff_manager_cache_data
---@field public buff_id number
---@field public count number
---@field public expire_time number
---@field public duration number
---@field public caster userdata
---@field public buff_name string
---@field public buff_type number
---@field public is_undefined boolean

---@class buff_manager
--- Gets the aura data for a unit, with caching.
---@field public get_aura_data fun(self: buff_manager, unit: game_object, enum_key: buff_db, custom_cache_duration_ms?: number): buff_manager_data
--- Gets the buff data for a unit, with caching.
---@field public get_buff_data fun(self: buff_manager, unit: game_object, enum_key: buff_db, custom_cache_duration_ms?: number): buff_manager_data
--- Gets the debuff data for a unit, with caching.
---@field public get_debuff_data fun(self: buff_manager, unit: game_object, enum_key: buff_db, custom_cache_duration_ms?: number): buff_manager_data
--- Gets the buff cache for a unit.
---@field public get_buff_cache fun(self: buff_manager, unit: game_object, custom_cache_duration_ms?: number): buff_manager_cache_data[]
--- Gets the debuff cache for a unit.
---@field public get_debuff_cache fun(self: buff_manager, unit: game_object, custom_cache_duration_ms?: number): buff_manager_cache_data[]
--- Gets the aura cache for a unit.
---@field public get_aura_cache fun(self: buff_manager, unit: game_object, custom_cache_duration_ms?: number): buff_manager_cache_data[]

---@class buff_manager
--- Check if the spell is currently on cooldown.
---@field public get_buff_value_from_description fun(self: buff_manager, description_text: string, ignore_percentage: boolean, ignore_flat: boolean): number

================
File: _api/common/modules/combat_forecast.lua
================
-- Example:
-- ---@type combat_forecast
-- local x = require("common/modules/combat_forecast")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class forecast_lenghts
---@field public DISABLED number
---@field public VERY_SHORT number
---@field public SHORT number
---@field public MEDIUM number
---@field public LONG number

---@class combat_forecast
--- Enum for forecast modes.
---@field public enum forecast_lenghts
--- Gets the forecast data.
---@field public get_forecast fun(self: nil): any
--- Gets the forecast data for a single unit.
---@field public get_forecast_single fun(self: nil, unit: game_object, include_pvp?: boolean): any
--- Gets the minimum combat length for a given forecast mode, plugin, and spell.
---@field public get_min_combat_length fun(self: nil, forecast_mode: any, plugin_name: string, spell_name: string): number
--- Validates the forecast logic based on the minimum combat length and unit.
---@field public is_valid_forecast_logic fun(self: nil, min_combat_length: number, unit?: game_object, include_pvp?: boolean): boolean

================
File: _api/common/modules/health_prediction.lua
================
-- Example:
-- ---@type health_prediction
-- local x = require("common/modules/health_prediction")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class damage_type_enum
---@field public PHYSICAL_DAMAGE number[]
---@field public MAGICAL_DAMAGE number[]

---@class damage_types_table
---@field public physical_damage number[]
---@field public magical_damage number[]

---@class health_prediction
--- Get incoming damage on a target within a deadline.
---@field public get_incoming_damage fun(self: nil, target: game_object, deadline_time_in_seconds?: number, is_exception?: boolean): number
--- Check if the current situation is a PvP situation.
---@field public is_pvp_situation fun(self: nil, target: game_object): boolean
--- Speculate the auto attack damage.
---@field public speculate_auto_attack_damage fun(self: nil, caster: game_object, target: game_object, damage: number, spell_id: number): number
--- Speculate the spell damage.
---@field public speculate_spell_damage fun(self: nil, caster: game_object, target: game_object, damage: number, spell_id: number): number
--- Get the role ID of the target.
---@field public get_role_id fun(self: nil, target: game_object): number
--- Check if the unit is a tank.
---@field public is_tank fun(self: nil, unit: game_object): boolean
--- Speculate the damage of a spell considering various factors.
---@field public speculate_damage fun(self: nil, caster: game_object, target: game_object, damage: number, spell_id: number): number
--- Get incoming damage on a target within a deadline.
---@field public get_damage_types fun(self: nil, target: game_object, deadline_time_in_seconds?: number, is_exception?: boolean): damage_types_table

================
File: _api/common/modules/profiler.lua
================
-- Example:
-- ---@type profiler
-- local x = require("common/modules/profiler")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class profiler
--- Starts the profiler for a specific key.
---@field public start fun(key: string): nil
--- Stops the profiler for a specific key and processes the recorded time.
---@field public stop fun(key: string, is_failed: boolean): nil

-- Example usage:
-- local spell_name = "icebound_fortitude"
-- ---@type profiler
-- local profiler = require("common/modules/profiler")
-- profiler.start(spell_name)
-- if spells.icebound_fortitude.logics(target) then
--     core.log_file("[Cast] [Time: " .. tostring(current_core_time) .. "] -> Icebound Fortitude \n")
--     -- Stop profiling since the spell cast succeeded
--     profiler.stop(spell_name)
--     -- Set defensive block time
--     plugin_helper:set_defensive_block_time(6.50)
--     -- Skip global cooldown
--     return
-- end
-- -- Stop profiling with failure since the spell cast failed
-- profiler.stop(spell_name, true)

================
File: _api/common/modules/spell_prediction.lua
================
-- Example:
-- ---@type spell_prediction
-- local x = require("common/modules/spell_prediction")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class prediction_type
---@field public ACCURACY number
---@field public MOST_HITS number

---@class geometry_type
---@field public CIRCLE number
---@field public RECTANGLE number
---@field public CONE number

---@class spell_data
---@field public angle number
---@field public radius number
---@field public spell_id number
---@field public max_range number
---@field public cast_time number
---@field public source_position vec3
---@field public projectile_speed number
---@field public exception_is_heal boolean
---@field public geometry_type geometry_type | number
---@field public intersection_factor number
---@field public time_to_hit_override number
---@field public prediction_mode prediction_type | number
---@field public exception_target_included boolean
---@field public exception_player_included boolean
---@field public hitbox_min number
---@field public hitbox_max number
---@field public hitbox_mult number

---@class hit_data
---@field public obj game_object
---@field public center_position vec3
---@field public intersection_position vec3

---@class prediction_result
---@field public hit_list table<hit_data>
---@field public amount_of_hits number
---@field public cast_position vec3

-- spell_data constructor
---@class spell_prediction
--- Helper function to create new spell data with default values.
---@field public new_spell_data fun(self: spell_prediction, spell_id: number, max_range: number?, radius: number?, cast_time: number?, projectile_speed: number?, prediction_mode: prediction_type | number, geometry: geometry_type | number, source_position: vec3?): spell_data

-- main function
---@class spell_prediction
--- Function to get the cast position based on the prediction mode.
---@field public get_cast_position fun(self: spell_prediction, target: game_object, spell_data: spell_data): prediction_result

-- utility functions
---@class spell_prediction
--- Helper function to get the center position of a target.
---@field public get_center_position fun(self: spell_prediction, target: game_object, spell_data: spell_data): vec3
--- Helper function to get the intersection position for casting.
---@field public get_intersection_position fun(self: spell_prediction, target: game_object, center_position: vec3, circle_radius: number, intersection_percentage: number): vec3
--- Gets the circle list of hit data based on the target position and spell data.
---@field public get_circle_list fun(self: spell_prediction, target_position: vec3, spell_data: spell_data, is_heal: boolean?): table<hit_data>
--- Gets the rectangle list of hit data based on the target position and spell data.
---@field public get_rectangle_list fun(self: spell_prediction, target_position: vec3, spell_data: spell_data, is_heal: boolean?): table<hit_data>
--- Gets the cone list of hit data based on the target position and spell data.
---@field public get_cone_list fun(self: spell_prediction, target_position: vec3, spell_data: spell_data, is_heal: boolean?): table<hit_data>
--- Gets the unit geometry list of hit data based on the position and spell data.
---@field public get_unit_geometry_list fun(self: spell_prediction, position: vec3, spell_data: spell_data): table<hit_data>
--- Helper function to get the best position for most hits.
---@field public get_most_hits_position fun(self: spell_prediction, main_position: vec3, spell_data: spell_data, target: game_object?): prediction_result
--- Function to get the cast position based on the prediction mode with position override.
---@field public get_cast_position_ fun(self: spell_prediction, position_override: vec3, spell_data: spell_data): prediction_result
--- Helper function to get the center position of a target.
---@field public get_future_position fun(self: spell_prediction, target: game_object, time: number): vec3

-- utility functions
---@class spell_prediction
---@field public geometry_type geometry_type
---@field public prediction_type prediction_type

================
File: _api/common/modules/spell_queue.lua
================
-- Example:
-- ---@type spell_queue
-- local sq = require("common/modules/spell_queue")
-- sq: -> IntelliSense
-- Warning: Access with ":", not "."

---@class spell_queue
---Queues an item for self-cast.
---@field public queue_item_self fun(self: spell_queue, item_id: number, priority: number, message?: string): nil
---Queues an item for self-cast that skips global cooldown.
---@field public queue_item_self_fast fun(self: spell_queue, item_id: number, priority: number, message?: string): nil
---Queues an item for a target.
---@field public queue_item_target fun(self: spell_queue, item_id: number, target: game_object, priority: number, message?: string): nil
---Queues an item for a target that skips global cooldown.
---@field public queue_item_target_fast fun(self: spell_queue, item_id: number, target: game_object, priority: number, message?: string): nil
---Queues an item for a position.
---@field public queue_item_position fun(self: spell_queue, item_id: number, position: vec3, priority: number, message?: string): nil
---Queues an item for a position that skips global cooldown.
---@field public queue_item_position_fast fun(self: spell_queue, item_id: number, position: vec3, priority: number, message?: string): nil
---Queues a spell with a target.
---@field public queue_spell_target fun(self: spell_queue, spell_id: number, target: any, priority: number, message?: string, allow_movement?: boolean): nil
---Queues a spell that skips global cooldown with a target.
---@field public queue_spell_target_fast fun(self: spell_queue, spell_id: number, target: any, priority: number, message?: string, allow_movement?: boolean): nil
---Queues a spell with a position.
---@field public queue_spell_position fun(self: spell_queue, spell_id: number, position: any, priority: number, message?: string, allow_movement?: boolean): nil
---Queues a spell that skips global cooldown with a position.
---@field public queue_spell_position_fast fun(self: spell_queue, spell_id: number, position: any, priority: number, message?: string, allow_movement?: boolean): nil

-- Example Usage:
-- local sq = require("common/modules/spell_queue")
-- sq:queue_item_self(12345, 1, "Example message") -- Queue an item for self-cast
-- sq:queue_item_self_fast(12345, 1, "Example message") -- Queue an item for self-cast with fast cooldown
-- sq:queue_item_target(12345, some_target, 1, "Targeted message") -- Queue an item for a specific target
-- sq:queue_item_target_fast(12345, some_target, 1, "Targeted message fast") -- Queue an item for a specific target with fast cooldown
-- sq:queue_item_position(12345, some_position, 1, "Position message") -- Queue an item for a specific position
-- sq:queue_item_position_fast(12345, some_position, 1, "Position message fast") -- Queue an item for a specific position with fast cooldown
-- sq:queue_spell_target(67890, some_target, 1, "Spell on target", true) -- Queue a spell with movement allowed
-- sq:queue_spell_target_fast(67890, some_target, 1, "Spell on target fast", false) -- Queue a spell for fast cooldown
-- sq:queue_spell_position(67890, some_position, 1, "Spell on position", true) -- Queue a spell for a position
-- sq:queue_spell_position_fast(67890, some_position, 1, "Spell on position fast", false) -- Queue a spell for a position with fast cooldown

================
File: _api/common/modules/target_selector.lua
================
-- Example:
-- ---@type target_selector
-- local x = require("common/modules/target_selector")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class target_selector
--- Correct way to get targets list.
---@field public get_targets fun(self: nil, limit: number?): table<game_object>
--- Correct way to get heal targets list.
---@field public get_targets_heal fun(self: nil, limit: number?): table<game_object>
--- Table containing all target_selector menu_elements
---@field public menu_elements table

================
File: _api/common/spell_attributes.lua
================
---@class spell_attributes
---@field public SPELL_ATTR0 spell_attr0
---@field public SPELL_ATTR1 spell_attr1
---@field public SPELL_ATTR2 spell_attr2
---@field public SPELL_ATTR3 spell_attr3
---@field public SPELL_ATTR4 spell_attr4
---@field public SPELL_ATTR5 spell_attr5
---@field public SPELL_ATTR6 spell_attr6
---@field public SPELL_ATTR7 spell_attr7
---@field public SPELL_ATTR8 spell_attr8
---@field public SPELL_ATTR9 spell_attr9
---@field public SPELL_ATTR10 spell_attr10
---@field public SPELL_ATTR11 spell_attr11
---@field public SPELL_ATTR12 spell_attr12
---@field public SPELL_ATTR13 spell_attr13
---@field public SPELL_ATTR14 spell_attr14

---@class spell_attr0
---@field public PROC_FAILURE_BURNS_CHARGE number
---@field public USES_RANGED_SLOT number
---@field public ON_NEXT_SWING_NO_DAMAGE number
---@field public DO_NOT_LOG_IMMUNE_MISSES number
---@field public IS_ABILITY number
---@field public IS_TRADESKILL number
---@field public PASSIVE number
---@field public DO_NOT_DISPLAY_SPELLBOOK_AURA_ICON_COMBAT_LOG number
---@field public DO_NOT_LOG number
---@field public HELD_ITEM_ONLY number
---@field public ON_NEXT_SWING number
---@field public WEARER_CASTS_PROC_TRIGGER number
---@field public SERVER_ONLY number
---@field public ALLOW_ITEM_SPELL_IN_PVP number
---@field public INDOORS_ONLY number
---@field public OUTDOORS_ONLY number
---@field public NOT_SHAPESHIFTED number
---@field public ONLY_STEALTHED number
---@field public DO_NOT_SHEATH number
---@field public SCALES_WITH_CREATURE_LEVEL number
---@field public CANCELS_AUTO_ATTACK_COMBAT number
---@field public NO_ACTIVE_DEFENSE number
---@field public TRACK_TARGET_IN_CAST_PLAYER_ONLY number
---@field public ALLOW_CAST_WHILE_DEAD number
---@field public ALLOW_WHILE_MOUNTED number
---@field public COOLDOWN_ON_EVENT number
---@field public AURA_IS_DEBUFF number
---@field public ALLOW_WHILE_SITTING number
---@field public NOT_IN_COMBAT_ONLY_PEACEFUL number
---@field public NO_IMMUNITIES number
---@field public HEARTBEAT_RESIST number
---@field public NO_AURA_CANCEL number

---@class spell_attr1
---@field public DISMISS_PET_FIRST number
---@field public USE_ALL_MANA number
---@field public IS_CHANNELED number
---@field public NO_REDIRECTION number
---@field public NO_SKILL_INCREASE number
---@field public ALLOW_WHILE_STEALTHED number
---@field public IS_SELF_CHANNELLED number
---@field public NO_REFLECTION number
---@field public ONLY_PEACEFUL_TARGETS number
---@field public INITIATES_COMBAT_ENABLES_AUTO_ATTACK number
---@field public SPECIAL_SKILLUP number
---@field public AURA_STAYS_AFTER_COMBAT number
---@field public REQUIRE_ALL_TARGETS number
---@field public DISCOUNT_POWER_ON_MISS number
---@field public NO_AURA_ICON number
---@field public NAME_IN_CHANNEL_BAR number
---@field public DISPEL_ALL_STACKS number
---@field public CAST_WHEN_LEARNED number
---@field public TO_ATTACK number
---@field public NO_THREAT number
---@field public AURA_UNIQUE number
---@field public FAILURE_BREAKS_STEALTH number
---@field public TOGGLE_FAR_SIGHT number
---@field public TRACK_TARGET_IN_CHANNEL number
---@field public IMMUNITY_PURGES_EFFECT number
---@field public IMMUNITY_TO_HOSTILE_AND_FRIENDLY_EFFECTS number
---@field public NO_AUTOCAST_AI number
---@field public PREVENTS_ANIM number
---@field public EXCLUDE_CASTER number
---@field public FINISHING_MOVE_DAMAGE number
---@field public THREAT_ONLY_ON_MISS number
---@field public FINISHING_MOVE_DURATION number
---@field public IGNORE_OWNERS_DEATH number

---@class spell_attr2
---@field public ALLOW_DEAD_TARGET number
---@field public NO_SHAPESHIFT_UI number
---@field public IGNORE_LINE_OF_SIGHT number
---@field public ALLOW_LOW_LEVEL_BUFF number
---@field public USE_SHAPESHIFT_BAR number
---@field public AUTO_REPEAT number
---@field public CANNOT_CAST_ON_TAPPED number
---@field public DO_NOT_REPORT_SPELL_FAILURE number
---@field public INCLUDE_IN_ADVANCED_COMBAT_LOG number
---@field public ALWAYS_CAST_AS_UNIT number
---@field public SPECIAL_TAMING_FLAG number
---@field public NO_TARGET_PER_SECOND_COSTS number
---@field public CHAIN_FROM_CASTER number
---@field public ENCHANT_OWN_ITEM_ONLY number
---@field public ALLOW_WHILE_INVISIBLE number
---@field public DO_NOT_CONSUME_IF_GAINED_DURING_CAST number
---@field public NO_ACTIVE_PETS number
---@field public DO_NOT_RESET_COMBAT_TIMERS number
---@field public NO_JUMP_WHILE_CAST_PENDING number
---@field public ALLOW_WHILE_NOT_SHAPESHIFTED_CASTER_FORM number
---@field public INITIATE_COMBAT_POST_CAST_ENABLES_AUTO_ATTACK number
---@field public FAIL_ON_ALL_TARGETS_IMMUNE number
---@field public NO_INITIAL_THREAT number
---@field public PROC_COOLDOWN_ON_FAILURE number
---@field public ITEM_CAST_WITH_OWNER_SKILL number
---@field public DONT_BLOCK_MANA_REGEN number
---@field public NO_SCHOOL_IMMUNITIES number
---@field public IGNORE_WEAPONSKILL number
---@field public NOT_AN_ACTION number
---@field public CANT_CRIT number
---@field public ACTIVE_THREAT number
---@field public RETAIN_ITEM_CAST number

---@class spell_attr3
---@field public PVP_ENABLING number
---@field public NO_PROC_EQUIP_REQUIREMENT number
---@field public NO_CASTING_BAR_TEXT number
---@field public COMPLETELY_BLOCKED number
---@field public NO_RES_TIMER number
---@field public NO_DURABILTIY_LOSS number
---@field public NO_AVOIDANCE number
---@field public DOT_STACKING_RULE number
---@field public ONLY_ON_PLAYER number
---@field public NOT_A_PROC number
---@field public REQUIRES_MAIN_HAND_WEAPON number
---@field public ONLY_BATTLEGROUNDS number
---@field public ONLY_ON_GHOSTS number
---@field public HIDE_CHANNEL_BAR number
---@field public HIDE_IN_RAID_FILTER number
---@field public NORMAL_RANGED_ATTACK number
---@field public SUPPRESS_CASTER_PROCS number
---@field public SUPPRESS_TARGET_PROCS number
---@field public ALWAYS_HIT number
---@field public INSTANT_TARGET_PROCS number
---@field public ALLOW_AURA_WHILE_DEAD number
---@field public ONLY_PROC_OUTDOORS number
---@field public DO_NOT_TRIGGER_TARGET_STAND number
---@field public NO_DAMAGE_HISTORY number
---@field public REQUIRES_OFF_HAND_WEAPON number
---@field public TREAT_AS_PERIODIC number
---@field public CAN_PROC_FROM_PROCS number
---@field public ONLY_PROC_ON_CASTER number
---@field public IGNORE_CASTER_AND_TARGET_RESTRICTIONS number
---@field public IGNORE_CASTER_MODIFIERS number
---@field public DO_NOT_DISPLAY_RANGE number
---@field public NOT_ON_AOE_IMMUNE number

---@class spell_attr4
---@field public NO_CAST_LOG number
---@field public CLASS_TRIGGER_ONLY_ON_TARGET number
---@field public AURA_EXPIRES_OFFLINE number
---@field public NO_HELPFUL_THREAT number
---@field public NO_HARMFUL_THREAT number
---@field public ALLOW_CLIENT_TARGETING number
---@field public CANNOT_BE_STOLEN number
---@field public ALLOW_CAST_WHILE_CASTING number
---@field public IGNORE_DAMAGE_TAKEN_MODIFIERS number
---@field public COMBAT_FEEDBACK_WHEN_USABLE number
---@field public WEAPON_SPEED_COST_SCALING number
---@field public NO_PARTIAL_IMMUNITY number
---@field public AURA_IS_BUFF number
---@field public DO_NOT_LOG_CASTER number
---@field public REACTIVE_DAMAGE_PROC number
---@field public NOT_IN_SPELLBOOK number
---@field public NOT_IN_ARENA_OR_RATED_BATTLEGROUND number
---@field public IGNORE_DEFAULT_ARENA_RESTRICTIONS number
---@field public BOUNCY_CHAIN_MISSILES number
---@field public ALLOW_PROC_WHILE_SITTING number
---@field public AURA_NEVER_BOUNCES number
---@field public ALLOW_ENTERING_ARENA number
---@field public PROC_SUPPRESS_SWING_ANIM number
---@field public SUPPRESS_WEAPON_PROCS number
---@field public AUTO_RANGED_COMBAT number
---@field public OWNER_POWER_SCALING number
---@field public ONLY_FLYING_AREAS number
---@field public FORCE_DISPLAY_CASTBAR number
---@field public IGNORE_COMBAT_TIMER number
---@field public AURA_BOUNCE_FAILS_SPELL number
---@field public OBSOLETE number
---@field public USE_FACING_FROM_SPELL number

---@class spell_attr5
---@field public ALLOW_ACTIONS_DURING_CHANNEL number
---@field public NO_REAGENT_COST_WITH_AURA number
---@field public REMOVE_ENTERING_ARENA number
---@field public ALLOW_WHILE_STUNNED number
---@field public TRIGGERS_CHANNELING number
---@field public LIMIT_N number
---@field public IGNORE_AREA_EFFECT_PVP_CHECK number
---@field public NOT_ON_PLAYER number
---@field public NOT_ON_PLAYER_CONTROLLED_NPC number
---@field public EXTRA_INITIAL_PERIOD number
---@field public DO_NOT_DISPLAY_DURATION number
---@field public IMPLIED_TARGETING number
---@field public MELEE_CHAIN_TARGETING number
---@field public SPELL_HASTE_AFFECTS_PERIODIC number
---@field public NOT_AVAILABLE_WHILE_CHARMED number
---@field public TREAT_AS_AREA_EFFECT number
---@field public AURA_AFFECTS_NOT_JUST_REQ_EQUIPPED_ITEM number
---@field public ALLOW_WHILE_FLEEING number
---@field public ALLOW_WHILE_CONFUSED number
---@field public AI_DOESNT_FACE_TARGET number
---@field public DO_NOT_ATTEMPT_A_PET_RESUMMON_WHEN_DISMOUNTING number
---@field public IGNORE_TARGET_REQUIREMENTS number
---@field public NOT_ON_TRIVIAL number
---@field public NO_PARTIAL_RESISTS number
---@field public IGNORE_CASTER_REQUIREMENTS number
---@field public ALWAYS_LINE_OF_SIGHT number
---@field public ALWAYS_AOE_LINE_OF_SIGHT number
---@field public NO_CASTER_AURA_ICON number
---@field public NO_TARGET_AURA_ICON number
---@field public AURA_UNIQUE_PER_CASTER number
---@field public ALWAYS_SHOW_GROUND_TEXTURE number
---@field public ADD_MELEE_HIT_RATING number

---@class spell_attr6
---@field public NO_COOLDOWN_ON_TOOLTIP number
---@field public DO_NOT_RESET_COOLDOWN_IN_ARENA number
---@field public NOT_AN_ATTACK number
---@field public CAN_ASSIST_IMMUNE_PC number
---@field public IGNORE_FOR_MOD_TIME_RATE number
---@field public DO_NOT_CONSUME_RESOURCES number
---@field public FLOATING_COMBAT_TEXT_ON_CAST number
---@field public AURA_IS_WEAPON_PROC number
---@field public DO_NOT_CHAIN_TO_CROWD_CONTROLLED_TARGETS number
---@field public ALLOW_ON_CHARMED_TARGETS number
---@field public NO_AURA_LOG number
---@field public NOT_IN_RAID_INSTANCES number
---@field public ALLOW_WHILE_RIDING_VEHICLE number
---@field public IGNORE_PHASE_SHIFT number
---@field public AI_PRIMARY_RANGED_ATTACK number
---@field public NO_PUSHBACK number
---@field public NO_JUMP_PATHING number
---@field public ALLOW_EQUIP_WHILE_CASTING number
---@field public ORIGINATE_FROM_CONTROLLER number
---@field public DELAY_COMBAT_TIMER_DURING_CAST number
---@field public AURA_ICON_ONLY_FOR_CASTER_LIMIT_10 number
---@field public SHOW_MECHANIC_AS_COMBAT_TEXT number
---@field public ABSORB_CAP_PREVENTS_SHIELDS number
---@field public ALLOW_IN_ANCHOR_AREAS number
---@field public BYPASS_LOS_WHEN_TARGET_IS_NEAR number
---@field public DO_NOT_TRIGGER_IN_COMBAT number
---@field public IGNORE_WEAPON_RESTRICTIONS number
---@field public NO_STACKS number
---@field public IGNORE_TARGET_ENERGY number
---@field public CAN_BE_TARGETED_BY_FRIENDLY number
---@field public ALLOW_IN_ARENA number
---@field public NO_COMBAT_TRIGGER_ON_PROC number

---@class spell_attr7
---@field public CAN_BE_CAST_WHILE_IN_COMBAT number
---@field public ONLY_USABLE_IN_PVP number
---@field public DO_NOT_CANCEL_WHEN_RESPEC number
---@field public IGNORE_TARGET_SHAPE number
---@field public DO_NOT_TRIGGER_PROCS number
---@field public ALLOW_WHILE_DISMOUNTING number
---@field public AURA_APPLIES_THROUGH_DEATH number
---@field public ALLOW_WHILE_CHARMED number
---@field public DO_NOT_REQUIRE_PRIMARY_WEAPON number
---@field public ALLOW_WHILE_FEARED number
---@field public ALLOW_WHILE_MOUNTED number
---@field public ALLOW_WHILE_CONFUSED number
---@field public REQUIRE_ATTACKABLE_TARGET number
---@field public IGNORE_COOLDOWN_REDUCTION number
---@field public ALLOW_WHILE_ROOTED number
---@field public CAN_BE_TARGETED_WHILE_DEAD number
---@field public IGNORE_DEAD_TARGET number
---@field public ALLOW_WHILE_POLYMORPHED number
---@field public ALLOW_WHILE_STUNNED number
---@field public IGNORE_SHAPESHIFT_CONDITIONS number
---@field public ALLOW_WHILE_ENRAGED number
---@field public ALLOW_WHILE_DISARMED number
---@field public IGNORE_AURA_SCHOOL_IMMUNITY number
---@field public REQUIRE_PRIMARY_WEAPON number
---@field public IGNORE_MOVEMENT_IMPAIRING_EFFECTS number
---@field public ALLOW_WHILE_AFK number
---@field public ALLOW_WHILE_SHEATHED number
---@field public ALLOW_WHILE_IN_WATER number
---@field public ALLOW_WHILE_PACIFIED number
---@field public ALLOW_WHILE_POSSESSED number
---@field public ALLOW_WHILE_IN_BATTLE_STANCE number
---@field public ALLOW_WHILE_IN_DEFENSIVE_STANCE number

---@class spell_attr8
---@field public ALLOW_WHILE_CROUCHED number
---@field public CAN_BE_CAST_WHILE_MOVING number
---@field public IGNORE_DAMAGE_TAKEN number
---@field public DO_NOT_CANCEL_WHEN_MOVING number
---@field public ALLOW_WHILE_IN_ARENA number
---@field public REQUIRE_VALID_GROUND_TARGET number
---@field public IGNORE_INTERRUPT_FLAGS number
---@field public DO_NOT_BREAK_INVISIBILITY number
---@field public ALLOW_WHILE_IN_DISGUISE number
---@field public REQUIRE_GROUND_LOCATION number
---@field public DO_NOT_INTERRUPT_OTHER_CASTS number
---@field public ALLOW_WHILE_TRANSFORMED number
---@field public ALLOW_WHILE_IN_AIR number
---@field public IGNORE_ENERGY_COST number
---@field public ALLOW_WHILE_ON_RAFT number
---@field public CAN_BE_CAST_WHILE_SPRINTING number
---@field public REQUIRE_UNIQUE_TARGET number
---@field public IGNORE_AREA_EFFECT_RADIUS number
---@field public IGNORE_SHAPESHIFT_REQUIREMENTS number
---@field public ALLOW_WHILE_IN_UNDERWATER_MODE number
---@field public ALLOW_WHILE_IN_EVASIVE_MODE number
---@field public ALLOW_WHILE_IN_CAMO_MODE number
---@field public ALLOW_WHILE_IN_HOVER_MODE number
---@field public IGNORE_AURA_EFFECTS number
---@field public REQUIRE_CONCENTRATION number
---@field public ALLOW_WHILE_DAZED number
---@field public ALLOW_WHILE_PARALYZED number
---@field public ALLOW_WHILE_ON_SNOW number
---@field public REQUIRE_VISIBLE_TARGET number
---@field public ALLOW_WHILE_ON_ICE number
---@field public IGNORE_PASSIVE_STATE number
---@field public ALLOW_WHILE_IN_FREE_FALL number

---@class spell_attr9
---@field public ALLOW_WHILE_IN_CROUCH_MODE number
---@field public IGNORE_TARGET_POSITION number
---@field public ALLOW_WHILE_IN_COVER_MODE number
---@field public ALLOW_WHILE_IN_COVER_STATE number
---@field public ALLOW_WHILE_IN_HIDE_MODE number
---@field public ALLOW_WHILE_IN_CLOAK_MODE number
---@field public ALLOW_WHILE_IN_STEALTH_MODE number
---@field public ALLOW_WHILE_IN_SMOKE_COVER number
---@field public IGNORE_MOVEMENT_SPEED number
---@field public ALLOW_WHILE_IN_SANDSTORM number
---@field public ALLOW_WHILE_IN_DEEP_WATER number
---@field public ALLOW_WHILE_ON_FIRE number
---@field public ALLOW_WHILE_IN_VORTEX number
---@field public ALLOW_WHILE_IN_MAGNETIC_FIELD number
---@field public IGNORE_ENEMY_DETECTION number
---@field public IGNORE_ALL_CONDITIONS number
---@field public ALLOW_WHILE_UNDERGROUND number
---@field public ALLOW_WHILE_IN_DESERT number
---@field public ALLOW_WHILE_IN_SWAMP number
---@field public IGNORE_HEIGHT_RESTRICTIONS number
---@field public ALLOW_WHILE_ON_WATER_SURFACE number
---@field public IGNORE_GRAVITY number
---@field public ALLOW_WHILE_UNDER_GRAVITY number
---@field public ALLOW_WHILE_IN_HIGH_ALTITUDE number
---@field public ALLOW_WHILE_IN_LOW_ALTITUDE number
---@field public IGNORE_TERRAIN number
---@field public ALLOW_WHILE_IN_FOG number
---@field public ALLOW_WHILE_IN_RAIN number
---@field public ALLOW_WHILE_IN_LIGHTNING_STORM number
---@field public IGNORE_WEATHER_CONDITIONS number
---@field public ALLOW_WHILE_IN_DARKNESS number
---@field public ALLOW_WHILE_IN_LIGHT number

---@class spell_attr10
---@field public ALLOW_WHILE_IN_SHADOW_FORM number
---@field public ALLOW_WHILE_IN_LIGHT_FORM number
---@field public ALLOW_WHILE_IN_ETHEREAL_STATE number
---@field public ALLOW_WHILE_IN_BATTLE number
---@field public ALLOW_WHILE_IN_PEACE number
---@field public ALLOW_WHILE_IN_CROUCH number
---@field public ALLOW_WHILE_ON_SNOW_TERRAIN number
---@field public ALLOW_WHILE_ON_ROCKY_TERRAIN number
---@field public ALLOW_WHILE_IN_DUNES number
---@field public ALLOW_WHILE_IN_LAVA number
---@field public ALLOW_WHILE_IN_QUICKSAND number
---@field public ALLOW_WHILE_IN_TRENCH number
---@field public ALLOW_WHILE_IN_JUNGLE number
---@field public ALLOW_WHILE_ON_MUD number
---@field public ALLOW_WHILE_IN_BLIZZARD number
---@field public ALLOW_WHILE_IN_SANDSTORM number
---@field public ALLOW_WHILE_IN_HURRICANE number
---@field public ALLOW_WHILE_IN_SLEET number
---@field public ALLOW_WHILE_IN_HAILSTORM number
---@field public IGNORE_ENVIRONMENTAL_DAMAGE number
---@field public IGNORE_WIND_CONDITIONS number
---@field public IGNORE_WATER_CONDITIONS number
---@field public IGNORE_TEMPERATURE_CONDITIONS number
---@field public ALLOW_WHILE_IN_TROPICAL_STORM number
---@field public ALLOW_WHILE_IN_CYCLONE number
---@field public ALLOW_WHILE_IN_TEMPEST number
---@field public IGNORE_VISIBILITY_CONDITIONS number
---@field public ALLOW_WHILE_IN_OVERCAST number
---@field public ALLOW_WHILE_IN_CLEAR_WEATHER number
---@field public ALLOW_WHILE_IN_MIST number
---@field public ALLOW_WHILE_IN_SUNLIGHT number
---@field public ALLOW_WHILE_IN_SHADOWS number

---@class spell_attr11
---@field public ALLOW_WHILE_IN_CORRUPTED_STATE number
---@field public ALLOW_WHILE_IN_PURITY_STATE number
---@field public IGNORE_TARGET_ALIGNMENT number
---@field public IGNORE_CASTER_ALIGNMENT number
---@field public ALLOW_WHILE_IN_ENERGY_FIELD number
---@field public ALLOW_WHILE_ON_MOUNTAIN number
---@field public ALLOW_WHILE_IN_VALLEY number
---@field public ALLOW_WHILE_IN_RUINS number
---@field public ALLOW_WHILE_ON_PLATFORM number
---@field public ALLOW_WHILE_ON_BALCONY number
---@field public ALLOW_WHILE_ON_RAMP number
---@field public ALLOW_WHILE_IN_CAVE number
---@field public ALLOW_WHILE_IN_CASTLE number
---@field public ALLOW_WHILE_IN_FOREST number
---@field public ALLOW_WHILE_IN_FIELD number
---@field public ALLOW_WHILE_IN_GLACIER number
---@field public ALLOW_WHILE_IN_VOLCANO number
---@field public ALLOW_WHILE_ON_BRIDGE number
---@field public ALLOW_WHILE_ON_STAIRCASE number
---@field public ALLOW_WHILE_ON_ROOF number
---@field public ALLOW_WHILE_IN_VILLAGE number
---@field public ALLOW_WHILE_IN_CITY number
---@field public ALLOW_WHILE_IN_TOWN number
---@field public ALLOW_WHILE_IN_HAMLET number
---@field public ALLOW_WHILE_IN_SANCTUARY number
---@field public ALLOW_WHILE_IN_MONASTERY number
---@field public ALLOW_WHILE_IN_TEMPLE number
---@field public ALLOW_WHILE_IN_SHRINE number
---@field public ALLOW_WHILE_IN_CITADEL number
---@field public ALLOW_WHILE_IN_OUTPOST number
---@field public ALLOW_WHILE_IN_STRONGHOLD number
---@field public ALLOW_WHILE_IN_BASTION number

---@class spell_attr12
---@field public ALLOW_WHILE_IN_CRYSTAL_CAVE number
---@field public ALLOW_WHILE_IN_GEM_FIELD number
---@field public ALLOW_WHILE_IN_MINERAL_RICH_AREA number
---@field public ALLOW_WHILE_IN_GAS_FIELD number
---@field public ALLOW_WHILE_IN_ETHER_FIELD number
---@field public ALLOW_WHILE_IN_DIMENSIONAL_RIFT number
---@field public ALLOW_WHILE_IN_PARALLEL_DIMENSION number
---@field public ALLOW_WHILE_IN_ALTERNATE_REALITY number
---@field public ALLOW_WHILE_IN_POCKET_DIMENSION number
---@field public ALLOW_WHILE_IN_VOID number
---@field public ALLOW_WHILE_IN_ABYSS number
---@field public ALLOW_WHILE_IN_MIRAGE number
---@field public ALLOW_WHILE_IN_HALLUCINATION number
---@field public ALLOW_WHILE_IN_FATA_MORGANA number
---@field public ALLOW_WHILE_IN_COSMIC_VORTEX number
---@field public ALLOW_WHILE_IN_SOLAR_FLARE number
---@field public ALLOW_WHILE_IN_LUNAR_ECLIPSE number
---@field public ALLOW_WHILE_IN_SUPERNOVA number
---@field public ALLOW_WHILE_IN_GALACTIC_SHOCKWAVE number
---@field public ALLOW_WHILE_IN_PLANETARY_RING number
---@field public ALLOW_WHILE_ON_ASTERIOD number
---@field public ALLOW_WHILE_ON_COMET number
---@field public ALLOW_WHILE_ON_STAR number
---@field public ALLOW_WHILE_ON_DWARF_PLANET number
---@field public ALLOW_WHILE_ON_GAS_GIANT number
---@field public ALLOW_WHILE_ON_ICE_PLANET number
---@field public ALLOW_WHILE_ON_LAVA_PLANET number
---@field public ALLOW_WHILE_ON_METEOR_SHOWER number
---@field public ALLOW_WHILE_IN_SOLAR_STORM number
---@field public ALLOW_WHILE_IN_ORBIT number
---@field public ALLOW_WHILE_ON_SATELLITE number
---@field public ALLOW_WHILE_ON_SPACE_STATION number

---@class spell_attr13
---@field public ALLOW_WHILE_IN_RITUAL number
---@field public ALLOW_WHILE_IN_CEREMONY number
---@field public ALLOW_WHILE_IN_FESTIVAL number
---@field public ALLOW_WHILE_IN_PROCESSION number
---@field public ALLOW_WHILE_IN_MEDITATION number
---@field public ALLOW_WHILE_IN_CHANTING number
---@field public ALLOW_WHILE_IN_PRAYER number
---@field public ALLOW_WHILE_IN_DEVOTION number
---@field public ALLOW_WHILE_IN_EXORCISM number
---@field public ALLOW_WHILE_IN_BLESSING number
---@field public ALLOW_WHILE_IN_CONSECRATION number
---@field public ALLOW_WHILE_IN_CURSE number
---@field public ALLOW_WHILE_IN_BINDING number
---@field public ALLOW_WHILE_IN_SEALING number
---@field public ALLOW_WHILE_IN_SANCTIFICATION number
---@field public ALLOW_WHILE_IN_ABSOLUTION number
---@field public ALLOW_WHILE_IN_ANOINTING number
---@field public ALLOW_WHILE_IN_DIVINATION number
---@field public ALLOW_WHILE_IN_SUMMONING number
---@field public ALLOW_WHILE_IN_BANISHING number
---@field public ALLOW_WHILE_IN_ELEVATION number
---@field public ALLOW_WHILE_IN_TRANSFIGURATION number
---@field public ALLOW_WHILE_IN_COMMUNION number
---@field public ALLOW_WHILE_IN_LITURGY number
---@field public ALLOW_WHILE_IN_INCANTATION number
---@field public ALLOW_WHILE_IN_MANTRA number
---@field public ALLOW_WHILE_IN_SUTRA number
---@field public ALLOW_WHILE_IN_SERMON number
---@field public ALLOW_WHILE_IN_EPIPHANY number
---@field public ALLOW_WHILE_IN_PROPHECY number
---@field public ALLOW_WHILE_IN_REVELATION number
---@field public ALLOW_WHILE_IN_VISION number

---@class spell_attr14
---@field public ALLOW_WHILE_IN_ASTRAL_PLANE number
---@field public ALLOW_WHILE_IN_ETHEREAL_REALM number
---@field public ALLOW_WHILE_IN_SPIRIT_WORLD number
---@field public ALLOW_WHILE_IN_OTHERWORLD number
---@field public ALLOW_WHILE_IN_DREAMSTATE number
---@field public ALLOW_WHILE_IN_PARADISE number
---@field public ALLOW_WHILE_IN_NETHERWORLD number
---@field public ALLOW_WHILE_IN_UTOPIA number
---@field public ALLOW_WHILE_IN_ARCADIA number
---@field public ALLOW_WHILE_IN_ELYSIUM number
---@field public ALLOW_WHILE_IN_VALHALLA number
---@field public ALLOW_WHILE_IN_HEAVEN number
---@field public ALLOW_WHILE_IN_PURGATORY number
---@field public ALLOW_WHILE_IN_TARTARUS number
---@field public ALLOW_WHILE_IN_HADES number
---@field public ALLOW_WHILE_IN_LIMBO number
---@field public ALLOW_WHILE_IN_BIFROST number
---@field public ALLOW_WHILE_IN_ASGARD number
---@field public ALLOW_WHILE_IN_NIFLHEIM number
---@field public ALLOW_WHILE_IN_MIDGARD number
---@field public ALLOW_WHILE_IN_JOTUNHEIM number
---@field public ALLOW_WHILE_IN_MUSPELHEIM number
---@field public ALLOW_WHILE_IN_ALFHEIM number
---@field public ALLOW_WHILE_IN_VANAHEIM number
---@field public ALLOW_WHILE_IN_HELHEIM number
---@field public ALLOW_WHILE_IN_VALHALLA_REALM number
---@field public ALLOW_WHILE_IN_DEMONIC_REALM number
---@field public ALLOW_WHILE_IN_ANGELIC_REALM number
---@field public ALLOW_WHILE_IN_DIVINE_REALM number
---@field public ALLOW_WHILE_IN_MYTHICAL_REALM number
---@field public ALLOW_WHILE_IN_SACRED_REALM number
---@field public ALLOW_WHILE_IN_CELESTIAL_REALM number

================
File: _api/common/talents_id.lua
================
-- Dumped 11.0.0.56008 - Talents ID

-- 15757  ->  Second Wind
-- 15759  ->  Punish
-- 15760  ->  War Machine
-- 15774  ->  Devastator
-- 16025  ->  Slipstream
-- 16037  ->  Siegebreaker
-- 17565  ->  Crusader's Might
-- 17567  ->  Bestow Faith
-- 17569  ->  Light's Hammer
-- 17575  ->  Judgment of Light
-- 17577  ->  Holy Prism
-- 17593  ->  Rule of Law
-- 17597  ->  Divine Purpose
-- 17599  ->  Holy Avenger
-- 18569  ->  Abundance
-- 18570  ->  Renewal
-- 18571  ->  Wild Charge
-- 18572  ->  Cenarion Ward
-- 18574  ->  Nourish
-- 18576  ->  Mass Entanglement
-- 18577  ->  Heart of the Wild
-- 18579  ->  Savage Roar
-- 18580  ->  Soul of the Forest
-- 18585  ->  Spring Blossoms
-- 19138  ->  Rend
-- 19140  ->  Cruelty
-- 19165  ->  Heartbreaker
-- 19166  ->  Blooddrinker
-- 19218  ->  Rapid Decomposition
-- 19219  ->  Hemostasis
-- 19220  ->  Consumption
-- 19221  ->  Foul Bulwark
-- 19226  ->  Tightening Grasp
-- 19227  ->  Grip of the Dead
-- 19228  ->  Wraith Walk
-- 19230  ->  Voracious
-- 19231  ->  Death Pact
-- 19232  ->  Bloodworms
-- 19233  ->  Weaponmaster
-- 19234  ->  Premeditation
-- 19235  ->  Gloomblade
-- 19237  ->  Retractable Hook
-- 19238  ->  Hit and Run
-- 19239  ->  Vigor
-- 19240  ->  Deeper Stratagem
-- 19241  ->  Marked for Death
-- 19245  ->  Internal Bleeding
-- 19249  ->  Alacrity
-- 19250  ->  Dreadblades
-- 19259  ->  Echo of the Elements
-- 19260  ->  Earth Shield
-- 19262  ->  Torrent
-- 19263  ->  Undulation
-- 19264  ->  Unleash Life
-- 19265  ->  Flash Flood
-- 19266  ->  Primal Elementalist
-- 19269  ->  Graceful Spirit
-- 19271  ->  Master of the Elements
-- 19272  ->  Storm Elemental
-- 19273  ->  Liquid Magma Totem
-- 19275  ->  Spirit Wolf
-- 19279  ->  Sow the Seeds
-- 19280  ->  Demon Skin
-- 19281  ->  Creeping Death
-- 19283  ->  Tiger Dash
-- 19284  ->  Soul Conduit
-- 19285  ->  Burning Rush
-- 19286  ->  Dark Pact
-- 19290  ->  Dreadlash
-- 19291  ->  Mortal Coil
-- 19292  ->  Phantom Singularity
-- 19293  ->  Dark Soul: Misery
-- 19295  ->  Grimoire of Sacrifice
-- 19302  ->  Tiger's Lust
-- 19304  ->  Celerity
-- 19347  ->  Trailblazer
-- 19348  ->  Natural Mending
-- 19357  ->  Stomp
-- 19361  ->  Steel Trap
-- 19676  ->  Double Time
-- 19771  ->  Fist of the White Tiger
-- 19818  ->  Chi Torpedo
-- 19819  ->  Special Delivery
-- 19820  ->  Chi Wave
-- 19823  ->  Mist Wrap
-- 19992  ->  Black Ox Brew
-- 19993  ->  Tiger Tail Sweep
-- 19994  ->  Summon Black Ox Statue
-- 19995  ->  Ring of Peace
-- 20173  ->  Diffuse Magic
-- 20174  ->  Bob and Weave
-- 20175  ->  Dampen Harm
-- 20184  ->  Rushing Jade Wind
-- 20185  ->  Chi Burst
-- 21144  ->  Time Anomaly
-- 21145  ->  Enlightened
-- 21180  ->  Absolute Corruption
-- 21186  ->  Poison Bomb
-- 21188  ->  Shuriken Tornado
-- 21193  ->  Fury of Elune
-- 21198  ->  Unlimited Power
-- 21199  ->  Wellspring
-- 21201  ->  Glimmer of Light
-- 21202  ->  Righteous Protector
-- 21204  ->  Anger Management
-- 21207  ->  Purgatory
-- 21208  ->  Red Thirst
-- 21209  ->  Bonestorm
-- 21630  ->  Overpowered
-- 21631  ->  Kindling
-- 21632  ->  Thermal Void
-- 21633  ->  Meteor
-- 21634  ->  Glacial Spike
-- 21646  ->  Moment of Clarity
-- 21648  ->  Solstice
-- 21649  ->  Bloodtalons
-- 21651  ->  Germination
-- 21653  ->  Feral Frenzy
-- 21655  ->  New Moon
-- 21671  ->  Beacon of Faith
-- 21675  ->  Ascendance
-- 21694  ->  Power Siphon
-- 21695  ->  Internal Combustion
-- 21702  ->  Incarnation: Chosen of Elune
-- 21704  ->  Incarnation: Avatar of Ashamane
-- 21705  ->  Cultivation
-- 21706  ->  Starlord
-- 21707  ->  Galactic Guardian
-- 21708  ->  Soul of the Forest
-- 21709  ->  Soul of the Forest
-- 21710  ->  Soul of the Forest
-- 21711  ->  Brutal Slash
-- 21713  ->  Survival of the Fittest
-- 21714  ->  Scent of Blood
-- 21716  ->  Inner Peace
-- 21717  ->  Grimoire: Felguard
-- 21778  ->  Mighty Bash
-- 21811  ->  Blinding Light
-- 21854  ->  Blind Fury
-- 21857  ->  Insatiable Hunger
-- 21862  ->  Glaive Tempest
-- 21863  ->  Soul Rending
-- 21864  ->  Desperate Instincts
-- 21865  ->  Netherwalk
-- 21866  ->  Cycle of Hatred
-- 21867  ->  First Blood
-- 21868  ->  Essence Break
-- 21869  ->  Unleashed Power
-- 21870  ->  Master of the Glaive
-- 21900  ->  Demonic
-- 21901  ->  Momentum
-- 21902  ->  Bulk Extraction
-- 21963  ->  Surge of Earth
-- 21966  ->  Wind Rush Totem
-- 21968  ->  Cloudburst Totem
-- 21969  ->  High Tide
-- 21970  ->  Elemental Spirits
-- 21971  ->  Downpour
-- 21972  ->  Ascendance
-- 21973  ->  Crashing Storm
-- 21986  ->  Killer Cobra
-- 21990  ->  Loaded Dice
-- 21997  ->  Guerrilla Tactics
-- 21998  ->  Chimaera Shot
-- 22002  ->  Barrage
-- 22013  ->  Will of the Necropolis
-- 22014  ->  Anti-Magic Barrier
-- 22015  ->  Mark of Blood
-- 22016  ->  Inexorable Assault
-- 22017  ->  Icy Talons
-- 22018  ->  Cold Heart
-- 22019  ->  Runic Attenuation
-- 22020  ->  Murderous Efficiency
-- 22021  ->  Horn of Winter
-- 22023  ->  Icecap
-- 22024  ->  Infected Claws
-- 22025  ->  All Will Serve
-- 22026  ->  Clawing Shadows
-- 22027  ->  Bursting Sores
-- 22028  ->  Ebon Fever
-- 22029  ->  Unholy Blight
-- 22030  ->  Army of the Damned
-- 22038  ->  Flashover
-- 22039  ->  Nightfall
-- 22040  ->  Soul Fire
-- 22042  ->  Soul Strike
-- 22043  ->  Fire and Brimstone
-- 22044  ->  Writhe in Agony
-- 22045  ->  Demonic Calling
-- 22046  ->  Vile Taint
-- 22047  ->  Darkfury
-- 22048  ->  Bilescourge Bombers
-- 22089  ->  Siphon Life
-- 22090  ->  Eradication
-- 22093  ->  Hit Combo
-- 22096  ->  Energizing Elixir
-- 22097  ->  Spitfire
-- 22098  ->  Ascension
-- 22099  ->  Light Brewing
-- 22101  ->  Refreshing Jade Wind
-- 22102  ->  Dance of Chi-Ji
-- 22103  ->  Press the Advantage
-- 22104  ->  Celestial Flames
-- 22105  ->  Whirling Dragon Punch
-- 22106  ->  High Tolerance
-- 22107  ->  Spiritual Focus
-- 22108  ->  Blackout Combo
-- 22109  ->  Obliteration
-- 22110  ->  Summon Gargoyle
-- 22114  ->  Blinding Powder
-- 22115  ->  Sting Like a Bee
-- 22118  ->  Airborne Irritant
-- 22119  ->  Quick Draw
-- 22120  ->  Ghostly Strike
-- 22121  ->  Iron Stomach
-- 22122  ->  Cheat Death
-- 22123  ->  Elusiveness
-- 22125  ->  Dancing Steel
-- 22127  ->  Static Charge
-- 22128  ->  Soothing Darkness
-- 22132  ->  Master of Shadows
-- 22133  ->  Hidden Blades
-- 22134  ->  Relish in Blood
-- 22135  ->  Blood Tap
-- 22144  ->  Nature's Guardian
-- 22145  ->  Surge of Power
-- 22149  ->  Feral Lunge
-- 22152  ->  Ancestral Vigor
-- 22153  ->  Stormkeeper
-- 22156  ->  Feral Affinity
-- 22157  ->  Guardian Affinity
-- 22158  ->  Guardian Affinity
-- 22159  ->  Restoration Affinity
-- 22160  ->  Guardian Affinity
-- 22163  ->  Balance Affinity
-- 22165  ->  Stellar Flare
-- 22166  ->  Mana Tea
-- 22168  ->  Lifecycles
-- 22169  ->  Upwelling
-- 22170  ->  Rising Mist
-- 22171  ->  Fire Nova
-- 22172  ->  Ancestral Guidance
-- 22176  ->  Saved by the Light
-- 22179  ->  Fist of Justice
-- 22180  ->  Repentance
-- 22183  ->  Eye for an Eye
-- 22189  ->  Hand of the Protector
-- 22215  ->  Crusade
-- 22218  ->  Focused Thunder
-- 22219  ->  Song of Chi-Ji
-- 22220  ->  Pyroclasm
-- 22266  ->  One with the Pack
-- 22267  ->  Steady Focus
-- 22268  ->  Born To Be Wild
-- 22269  ->  A Murder of Crows
-- 22271  ->  Flanking Strike
-- 22272  ->  Birds of Prey
-- 22273  ->  Aspect of the Beast
-- 22274  ->  Calling the Shots
-- 22275  ->  Viper's Venom
-- 22276  ->  Posthaste
-- 22277  ->  Bloodseeker
-- 22278  ->  Mongoose Bite
-- 22279  ->  Master Marksman
-- 22280  ->  Animal Companion
-- 22282  ->  Dire Beast
-- 22283  ->  Terms of Engagement
-- 22286  ->  Streamline
-- 22287  ->  Double Tap
-- 22288  ->  Volley
-- 22289  ->  A Murder of Crows
-- 22290  ->  Chimaera Shot
-- 22291  ->  Killer Instinct
-- 22295  ->  Bloodshed
-- 22296  ->  Alpha Predator
-- 22297  ->  Butchery
-- 22299  ->  A Murder of Crows
-- 22300  ->  Tip of the Spear
-- 22301  ->  Wildfire Infusion
-- 22308  ->  Lock and Load
-- 22309  ->  Ray of Frost
-- 22319  ->  Fires of Justice
-- 22322  ->  Earthen Wall Totem
-- 22323  ->  Ancestral Protection Totem
-- 22324  ->  Infernal Armor
-- 22331  ->  Nightstalker
-- 22332  ->  Subterfuge
-- 22333  ->  Shadow Focus
-- 22335  ->  Dark Shadow
-- 22336  ->  Enveloping Shadows
-- 22337  ->  Master Poisoner
-- 22338  ->  Elaborate Planning
-- 22339  ->  Blindside
-- 22340  ->  Leeching Poison
-- 22343  ->  Venom Rush
-- 22344  ->  Sanguine Blades
-- 22347  ->  Thrill of the Hunt
-- 22351  ->  Sundering
-- 22352  ->  Stormkeeper
-- 22353  ->  Elemental Blast
-- 22354  ->  Lashing Flames
-- 22355  ->  Forceful Winds
-- 22356  ->  Earthen Rage
-- 22357  ->  Echo of the Elements
-- 22358  ->  Static Discharge
-- 22359  ->  Ascendance
-- 22360  ->  Sudden Death
-- 22362  ->  Cleave
-- 22363  ->  Predator
-- 22364  ->  Sabertooth
-- 22365  ->  Lunar Inspiration
-- 22366  ->  Balance Affinity
-- 22367  ->  Feral Affinity
-- 22370  ->  Primal Wrath
-- 22371  ->  Skullsplitter
-- 22372  ->  Impending Victory
-- 22378  ->  Best Served Cold
-- 22379  ->  Massacre
-- 22380  ->  Massacre
-- 22381  ->  Frenzy
-- 22382  ->  Warpaint
-- 22383  ->  Seethe
-- 22384  ->  Never Surrender
-- 22385  ->  Nature's Balance
-- 22386  ->  Warrior of Elune
-- 22387  ->  Force of Nature
-- 22388  ->  Incarnation: Guardian of Ursoc
-- 22389  ->  Twin Moons
-- 22390  ->  Guardian of Elune
-- 22391  ->  Warbreaker
-- 22392  ->  Collateral Damage
-- 22393  ->  Frothing Berserker
-- 22394  ->  In For The Kill
-- 22395  ->  Into the Fray
-- 22396  ->  Meat Cleaver
-- 22397  ->  Avatar
-- 22398  ->  Dragon Roar
-- 22399  ->  Deadly Calm
-- 22400  ->  Bladestorm
-- 22401  ->  Ravager
-- 22403  ->  Photosynthesis
-- 22404  ->  Flourish
-- 22405  ->  Anger Management
-- 22406  ->  Heavy Repercussions
-- 22407  ->  Dreadnaught
-- 22409  ->  Storm Bolt
-- 22416  ->  Felblade
-- 22418  ->  Blood Frenzy
-- 22419  ->  Brambles
-- 22421  ->  Incarnation: Tree of Life
-- 22422  ->  Overgrowth
-- 22423  ->  Earthwarden
-- 22426  ->  Rend and Tear
-- 22427  ->  Tooth and Claw
-- 22428  ->  Holy Shield
-- 22431  ->  First Avenger
-- 22433  ->  Unbreakable Spirit
-- 22434  ->  Cavalier
-- 22435  ->  Blessing of Spellwarding
-- 22438  ->  Sentinel
-- 22441  ->  Spitting Cobra
-- 22442  ->  Glacial Insulation
-- 22443  ->  Shimmer
-- 22444  ->  Incanter's Flow
-- 22445  ->  Focus Magic
-- 22446  ->  Frigid Winds
-- 22447  ->  Rune of Power
-- 22448  ->  Ice Ward
-- 22449  ->  Arcane Orb
-- 22450  ->  Flame On
-- 22451  ->  Flame Patch
-- 22452  ->  Frozen Touch
-- 22453  ->  Resonance
-- 22454  ->  Freezing Rain
-- 22455  ->  Reverberate
-- 22456  ->  Firestarter
-- 22457  ->  Bone Chilling
-- 22458  ->  Amplification
-- 22459  ->  Pyromaniac
-- 22460  ->  Lonely Winter
-- 22461  ->  Rule of Threes
-- 22462  ->  Searing Touch
-- 22463  ->  Ice Nova
-- 22464  ->  Arcane Familiar
-- 22465  ->  Alexstrasza's Fury
-- 22466  ->  Chain Reaction
-- 22467  ->  Arcane Echo
-- 22468  ->  From the Ashes
-- 22469  ->  Ebonbolt
-- 22470  ->  Nether Tempest
-- 22471  ->  Ring of Frost
-- 22472  ->  Living Bomb
-- 22473  ->  Comet Storm
-- 22474  ->  Supernova
-- 22477  ->  Wicked Maw
-- 22479  ->  Demonic Consumption
-- 22480  ->  Inferno
-- 22483  ->  Justicar's Vengeance
-- 22484  ->  Awakening
-- 22488  ->  Menace
-- 22489  ->  Fervor of Battle
-- 22491  ->  Fresh Meat
-- 22493  ->  Demonic Appetite
-- 22494  ->  Unbound Chaos
-- 22495  ->  Careful Aim
-- 22497  ->  Barrage
-- 22498  ->  Explosive Shot
-- 22499  ->  Binding Shot
-- 22500  ->  Scent of Blood
-- 22501  ->  Serpent Sting
-- 22502  ->  Abyssal Strike
-- 22503  ->  Agonizing Flames
-- 22504  ->  Felblade
-- 22505  ->  Feast of Souls
-- 22507  ->  Burning Alive
-- 22508  ->  Soul Rending
-- 22509  ->  Feed the Demon
-- 22510  ->  Quickened Sigils
-- 22511  ->  Sigil of Chains
-- 22512  ->  Void Reaver
-- 22513  ->  Demonic
-- 22515  ->  Death's Reach
-- 22516  ->  Grip of the Dead
-- 22517  ->  Asphyxiate
-- 22518  ->  Death's Reach
-- 22519  ->  Blinding Sleet
-- 22520  ->  Asphyxiate
-- 22521  ->  Avalanche
-- 22522  ->  Pestilent Pustules
-- 22523  ->  Frozen Pulse
-- 22524  ->  Harbinger of Doom
-- 22525  ->  Frostscythe
-- 22526  ->  Soul Reaper
-- 22527  ->  Permafrost
-- 22528  ->  Spell Eater
-- 22529  ->  Wraith Walk
-- 22530  ->  Wraith Walk
-- 22531  ->  Gathering Storm
-- 22532  ->  Pestilence
-- 22533  ->  Hypothermic Presence
-- 22534  ->  Unholy Pact
-- 22535  ->  Glacial Advance
-- 22536  ->  Defile
-- 22537  ->  Breath of Sindragosa
-- 22538  ->  Unholy Assault
-- 22540  ->  Spirit Bomb
-- 22541  ->  Charred Flesh
-- 22543  ->  Last Resort
-- 22544  ->  Unstoppable Force
-- 22546  ->  Concentrated Sigils
-- 22547  ->  Fel Barrage
-- 22557  ->  Righteous Verdict
-- 22558  ->  Redoubt
-- 22590  ->  Zeal
-- 22592  ->  Blade of Wrath
-- 22604  ->  Crusader's Judgment
-- 22624  ->  War Machine
-- 22625  ->  Impending Victory
-- 22626  ->  Booming Voice
-- 22627  ->  Bounding Stride
-- 22629  ->  Rumbling Earth
-- 22631  ->  Indomitable
-- 22632  ->  War Machine
-- 22633  ->  Sudden Death
-- 22634  ->  Final Reckoning
-- 22636  ->  Stormflurry
-- 22645  ->  Final Stand
-- 22765  ->  Burning Hatred
-- 22766  ->  Fallout
-- 22767  ->  Fel Eruption
-- 22768  ->  Soul Barrier
-- 22769  ->  Hydra's Bite
-- 22770  ->  Fracture
-- 22789  ->  Storm Bolt
-- 22799  ->  Demon Blades
-- 22800  ->  Impending Victory
-- 22904  ->  Frenetic Speed
-- 22907  ->  Chrono Shift
-- 22909  ->  Trail of Ruin
-- 23015  ->  Alacrity
-- 23022  ->  Master Assassin
-- 23036  ->  Night Terrors
-- 23037  ->  Iron Wire
-- 23044  ->  Stampede
-- 23063  ->  Lethal Shots
-- 23071  ->  Blazing Soul
-- 23072  ->  Master of Time
-- 23073  ->  Ice Floes
-- 23074  ->  Blast Wave
-- 23075  ->  Blade Rush
-- 23077  ->  Dirty Tricks
-- 23078  ->  Shot in the Dark
-- 23086  ->  Healing Hands
-- 23087  ->  Judgment of Light
-- 23089  ->  Elemental Assault
-- 23090  ->  Hailstorm
-- 23091  ->  Nether Portal
-- 23092  ->  Dark Soul: Instability
-- 23093  ->  Storm Bolt
-- 23096  ->  Crackling Thunder
-- 23097  ->  Furious Charge
-- 23099  ->  Bolster
-- 23100  ->  Camouflage
-- 23104  ->  Deadeye
-- 23105  ->  Chakrams
-- 23106  ->  Eye of the Tiger
-- 23107  ->  Summon Jade Serpent Statue
-- 23108  ->  Aftershock
-- 23109  ->  Ice Strike
-- 23110  ->  Earthgrab Totem
-- 23111  ->  Icefury
-- 23122  ->  Rushing Jade Wind
-- 23128  ->  Alacrity
-- 23138  ->  Demonic Strength
-- 23139  ->  Shadow Embrace
-- 23140  ->  Inevitable Demise
-- 23141  ->  Drain Soul
-- 23143  ->  Cataclysm
-- 23144  ->  Channel Demonfire
-- 23146  ->  Inner Demons
-- 23147  ->  Soul Conduit
-- 23148  ->  Reverse Entropy
-- 23155  ->  Roaring Blaze
-- 23156  ->  Rain of Chaos
-- 23157  ->  Shadowburn
-- 23158  ->  Doom
-- 23159  ->  Haunt
-- 23160  ->  Summon Vilefiend
-- 23161  ->  Sacrificed Souls
-- 23162  ->  Spirit Wolf
-- 23163  ->  Earth Shield
-- 23164  ->  Static Charge
-- 23165  ->  Spirit Wolf
-- 23166  ->  Static Charge
-- 23167  ->  Selfless Healer
-- 23174  ->  Crimson Tempest
-- 23175  ->  Killing Spree
-- 23176  ->  Splitting Ice
-- 23183  ->  Secret Technique
-- 23190  ->  Elemental Blast
-- 23191  ->  Sanctified Wrath
-- 23258  ->  Inner Strength
-- 23260  ->  Dragon Roar
-- 23362  ->  Conflagration
-- 23363  ->  Healing Elixir
-- 23364  ->  Good Karma
-- 23371  ->  Healing Elixir
-- 23372  ->  Onslaught
-- 23373  ->  Death Pact
-- 23454  ->  Tombstone
-- 23455  ->  Anger Management
-- 23456  ->  Sanctified Wrath
-- 23457  ->  Sanctified Wrath
-- 23460  ->  Echoing Shock
-- 23461  ->  Deluge
-- 23462  ->  Hot Hand
-- 23463  ->  Binding Shackles
-- 23464  ->  Ruinous Bulwark
-- 23465  ->  Howl of Terror
-- 23466  ->  Empyrean Power
-- 23467  ->  Execution Sentence
-- 23468  ->  Moment of Glory
-- 23469  ->  Blessed Hammer
-- 23680  ->  Avenging Crusader
-- 23681  ->  Beacon of Virtue

================
File: _api/common/unit_manager.lua
================
---@class unit_manager
---@field public get_cache_unit_list_raw fun(self: unit_manager): table
---@field public get_cache_unit_list fun(self: unit_manager): table
---@field public get_enemies_around_point fun(self: unit_manager, point: table, range: number, players_only: boolean, include_dead: boolean): table
---@field public get_allies_around_point fun(self: unit_manager,point: table, range: number, players_only: boolean, party_only: boolean, include_dead: boolean): table
---@field public process fun(self: unit_manager): nil

================
File: _api/common/utility/auto_attack_helper.lua
================
-- Example:
-- ---@type auto_attack_helper
-- local x = require("common/utility/auto_attack_helper")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class auto_attack_helper
---@field attacks_logs table

---@class auto_attack_helper
--- Checks if the given spell ID is an auto attack.
---@field public is_spell_auto_attack fun(self: auto_attack_helper, spell_id: number): boolean

================
File: _api/common/utility/control_panel_helper.lua
================
-- Example:
-- ---@type control_panel_helper_helper
-- local x = require("common/utility/control_panel_helper")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class control_panel_helper
--- Updates the control panel elements based on the menu.
---@field public on_update fun(self: control_panel_helper, menu: table): nil

---@class control_panel_helper
--- Inserts a toggle into the control panel table.
---@field public insert_toggle fun(self: control_panel_helper, control_panel_table: table, toggle_table: table, only_drag_drop: boolean?): boolean

---@class control_panel_helper
--- Inserts a toggle into the control panel table with display name and keybind element.
---@field public insert_toggle_ fun(self: control_panel_helper, control_panel_table: table, display_name: string, keybind_element: keybind | userdata, only_drag_drop: boolean?, no_drag_and_drop: boolean?): boolean

---@class control_panel_helper
--- Inserts a combo into the control panel table. 
--- Note: This function takes the whole table directly.
---@field public insert_combo fun(self: control_panel_helper, control_panel_table: table, combo_table: table, increase_index_key: userdata, only_drag_drop: boolean?): boolean

---@class control_panel_helper
--- Inserts a combo into the control panel table.
--- Note: This function takes the parameters instead of whole table.
---@field public insert_combo_ fun(self: control_panel_helper, control_panel_table: table, display_name: string, combobox_element: userdata, preview_value: any, max_items: number, increase_index_key: userdata, only_drag_drop: boolean?): boolean

================
File: _api/common/utility/cooldown_tracker.lua
================
-- Example:
-- ---@type cooldown_tracker
-- local x = require("common/utility/cooldown_tracker")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

--- Cooldown Tracker Module
--- Provides functionality to track and manage cooldowns for spells.

---@class cooldown_tracker
---@field public has_any_relevant_defensive_up fun(self: cooldown_tracker, unit: game_object): boolean
---@field public is_spell_ready fun(self: cooldown_tracker, unit: game_object, spell_id: number): boolean
---@field public has_any_kick_up fun(self: cooldown_tracker, caster: game_object, target: game_object, include_los: boolean): boolean
---@field public is_any_kick_around fun(self: cooldown_tracker, enemy_list: table<game_object>, include_los: boolean): boolean
---@field public is_spell_castable_to_player fun(self: cooldown_tracker, spell_id: number, caster: game_object, target: game_object, include_los: boolean): boolean
---@field public is_spell_in_range fun(self: cooldown_tracker, spell_id: number, caster: game_object, target: game_object): boolean
---@field public is_spell_los fun(self: cooldown_tracker, spell_id: number, caster: game_object, target: game_object): boolean

-- Example Usage:
-- local tracker = require("common/utility/cooldown_tracker")
-- if tracker:has_any_relevant_defensive_up(unit) then
--     print("Relevant defensive is ready!")
-- end
--
-- if tracker:is_spell_ready(unit, spell_id) then
--     print("Spell is ready to cast!")
-- end

================
File: _api/common/utility/dungeons_helper.lua
================
-- Example:
-- ---@type dungeons_helper
-- local x = require("common/utility/dungeons_helper")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class dungeons_helper
---@field public is_heroic_dungeon fun(self: dungeons_helper): boolean
---@field public is_mythic_dungeon fun(self: dungeons_helper): boolean
---@field public is_mythic_plus_dungeon fun(self: dungeons_helper): boolean
---@field public get_mythic_scaling fun(self: dungeons_helper): number
---@field public get_mythic_key_level fun(self: dungeons_helper): number
---@field public is_kite_exception fun(self: dungeons_helper): boolean, game_object | nil, game_object | nil
---@field public is_kikatal_near_cosmic_cast fun(self: dungeons_helper, energy_threshold: number): boolean, game_object | nil
---@field public is_kikatal_grasping_blood_exception fun(self: dungeons_helper): boolean, game_object | nil, game_object | nil
---@field public is_fixation_exception fun(self: dungeons_helper): boolean, game_object | nil
---@field public is_xalataths_bargain_ascendant_exception fun(self: dungeons_helper): boolean, table<game_object>

================
File: _api/common/utility/inventory_helper.lua
================
--[[
Example:
---@type inventory_helper
local inventory = require("common/utility/inventory_helper")
inventory: -> IntelliSense
Warning: Access with ":", not "."
]]

-- This library centralizes inventory management.
-- Simplifying access to items in all bags, bank slots, and tracking specific consumables like potions and elixirs.

---@class slot_data
---@field public item game_object          -- The item object in this slot
---@field public global_slot number        -- Global slot identifier
---@field public bag_id integer            -- ID of the bag containing the item
---@field public bag_slot integer          -- Slot number within the bag
---@field public stack_count integer       -- Stack count of the item in this slot

---@class consumable_data
---@field public is_mana_potion boolean    -- Whether the item is a mana potion
---@field public is_health_potion boolean  -- Whether the item is a health potion
---@field public is_damage_bonus_potion boolean -- Whether the item is a damage bonus potion
---@field public item game_object          -- The item object for the consumable
---@field public bag_id integer            -- ID of the bag containing the item
---@field public bag_slot integer          -- Slot number within the bag
---@field public stack_count integer       -- Stack count of the item in this slot

---@class inventory_helper
---@field public get_all_slots fun(self: inventory_helper): table<slot_data> 
---@field public get_character_bag_slots fun(self: inventory_helper): table<slot_data> 
---@field public get_bank_slots fun(self: inventory_helper): table<slot_data> 
---@field public get_current_consumables_list fun(self: inventory_helper): table<consumable_data> 
---@field public update_consumables_list fun(self: inventory_helper)
---@field public debug_print_consumables fun(self: inventory_helper)

================
File: _api/common/utility/key_helper.lua
================
-- Example:
-- ---@type key_helper
-- local x = require("common/utility/key_helper")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class key_helper
--- Function to get the name of a key based on its key code.
---@field public get_key_name fun(self: key_helper, key_code: number): string

================
File: _api/common/utility/movement_handler.lua
================
-- Example:
-- ---@type movement_handler
-- local x = require("common/utility/movement_handler")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class movement_handler
---@field public pause_movement fun(self: movement_handler, seconds: number, delay?: number): boolean
---@field public resume_movement fun(self: movement_handler, seconds: number): nil
---@field public block_spell_cast fun(self: movement_handler, seconds: number, delay?: number): nil
---@field public on_process fun(self: movement_handler): nil
---@field public start_move_forward fun(self: movement_handler, walk_duration: number, delay?: number): nil
---@field public stop_move_forward fun(self: movement_handler): nil
---@field public start_strafe_left fun(self: movement_handler, strafe_duration: number, delay?: number): nil
---@field public stop_strafe_left fun(self: movement_handler): nil
---@field public start_strafe_right fun(self: movement_handler, strafe_duration: number, delay?: number): nil
---@field public stop_strafe_right fun(self: movement_handler): nil

-- Example Usage:
-- local handler = require("common/utility/movement_handler")
-- handler:pause_movement(2.0, 1.0) -- Pauses movement for 2 seconds after a 1-second delay
-- handler:resume_movement(0.0) -- Instantly resumes movement
-- handler:block_spell_cast(3.0, 0.5) -- Blocks spell casting for 3 seconds after a 0.5-second delay
-- handler:on_process() -- Call every frame
-- handler:start_move_forward(5.0, 1.0) -- Starts moving forward for 5 seconds after a 1-second delay
-- handler:stop_move_forward() -- Stops moving forward
-- handler:start_strafe_left(3.0, 0.5) -- Strafes left for 3 seconds after a 0.5-second delay
-- handler:stop_strafe_left() -- Stops strafing left
-- handler:start_strafe_right(4.0, 2.0) -- Strafes right for 4 seconds after a 2-second delay
-- handler:stop_strafe_right() -- Stops strafing right

================
File: _api/common/utility/plugin_helper.lua
================
-- Example:
-- ---@type plugin_helper
-- local x = require("common/utility/plugin_helper")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class plugin_helper
--- Checks if a toggle menu element is enabled, taking special cases into account.
---@field public is_toggle_binded fun(self: plugin_helper, element: keybind): boolean

---@class plugin_helper
--- Checks if a toggle menu element is enabled, taking special cases into account.
---@field public is_toggle_enabled fun(self: plugin_helper, element: keybind): boolean

---@class plugin_helper
--- Checks if a keybind menu element is active, considering special cases.
---@field public is_keybind_enabled fun(self: plugin_helper, element: keybind): boolean

---@class plugin_helper
--- Draws centered text at the character's screen position with an optional vertical offset.
---@field public draw_text_character_center fun(self: plugin_helper, text: string, text_color: color?, y_offset: number?, is_static: boolean?, counter_special_id: string?):nil

---@class plugin_helper
--- Draws centered text at the character's screen position with an optional vertical offset.
--- text, text_color, border_color, screen_position, size
---@field public draw_text_message fun(self: plugin_helper, text: string, text_color: color, border_color: color, screen_position: vec2, size: vec2, is_static:boolean, add_rectangles: boolean, unique_id: string, counter_special_id: string|nil)

---@class plugin_helper
--- Calculates latency based on the current ping, clamped to a maximum value.
---@field public get_latency fun(self: plugin_helper): number

---@class plugin_helper
--- Retrieves the current combat lenght in core time.
---@field public get_current_combat_length_seconds fun(self: plugin_helper): number

---@class plugin_helper
--- Retrieves the current combat lenght in game time.
---@field public get_current_combat_length_miliseconds fun(self: plugin_helper): number

---@class plugin_helper
--- Determines if defensive actions are allowed based on a global variable.
---@field public is_defensive_allowed fun(self: plugin_helper): boolean

---@class plugin_helper
--- Retrieves the current defensive block time.
---@field public get_defensive_block_time fun(self: plugin_helper): number

---@class plugin_helper
--- Sets the defensive block time based on the given extra time.
---@field public set_defensive_block_time fun(self: plugin_helper, extra_time: number): nil

================
File: _api/common/utility/pvp_helper.lua
================
--- Example:
--- ---@type pvp_helper
--- local x = require("common/utility/pvp_helper")
--- x: -> IntelliSense
--- Warning: Access with ":", not "."

---@class pvp_helper
---@field public is_player fun(self: pvp_helper, unit: game_object): boolean
---@field public is_pvp_scenario fun(self: pvp_helper): boolean
---@field public cc_flags cc_flags_table
---@field public cc_flag_descriptions table<number, string>
---@field public cc_debuffs table<number, {debuff_id: number, debuff_name: string, flag: number, weak: boolean, immune: boolean, source: number}>
---@field public slow_debuffs table<number, {debuff_id: number, debuff_name: string, mult: number, source: number}>
---@field public cc_immune_buffs table<number, {buff_id: number, buff_name: string, flag: number, class: number, mult: number}>
---@field public slow_immune_buffs table<number, {buff_id: number, buff_name: string, class: number}>
---@field public damage_reduction_buff table<number, {buff_id: number, buff_name: string, flag: number, class: number, mult: number}>
---@field public burst_buffs table<number, {buff_id: number, buff_name: string, class: number}>
---@field public purgeable_buffs table<number, {buff_id: number, buff_name: string, priority: number, min_remaining: number}>
---@field public stealeable_buffs table<number, {buff_id: number, buff_name: string, priority: number, min_remaining: number}>

---@class pvp_helper
---@field public is_crowd_controlled fun(self: pvp_helper, unit: game_object, type_flags: number?, min_remaining: number?, source_filter: number?): boolean, number, number, boolean, boolean
---@field public is_crowd_controlled_weak fun(self: pvp_helper, unit: game_object, min_remaining: number?, source_filter: number?): boolean, number, number
---@field public get_unit_dr fun(self: pvp_helper, unit: game_object, cc_flag: number, hit_time: number): number
---@field public get_cc_reduction_mult fun(self: pvp_helper, unit: game_object, type_flags: number?, min_remaining: number?): number, number, number
---@field public get_cc_reduction_percentage fun(self: pvp_helper, unit: game_object, type_flags: number?, min_remaining: number?): number, number, number
---@field public has_cc_reduction fun(self: pvp_helper, unit: game_object, threshold: number?, type_flags: number?, min_remaining: number?): boolean, number, number
---@field public is_cc_immune fun(self: pvp_helper, unit: game_object, type_flags: number?, min_remaining: number?): boolean, number, number
---@field public is_slow fun(self: pvp_helper, unit: game_object, threshold: number?, min_remaining: number?, source_filter: number?): boolean, number, number
---@field public get_slow_percentage fun(self: pvp_helper, unit: game_object, min_remaining: number?, source_filter: number?): number, number
---@field public is_slow_immune fun(self: pvp_helper, unit: game_object, source_filter: number?, min_remaining: number?): boolean, number

---@class pvp_helper
---@field public get_damage_reduction_mult fun(self: pvp_helper, unit: game_object, type_flags: number?, min_remaining: number?): number, number, number
---@field public get_damage_reduction_percentage fun(self: pvp_helper, unit: game_object, type_flags: number?, min_remaining: number?): number, number, number
---@field public has_damage_reduction fun(self: pvp_helper, unit: game_object, threshold: number?, type_flags: number?, min_remaining: number?): boolean, number, number
---@field public is_damage_immune fun(self: pvp_helper, unit: game_object, type_flags: number?, min_remaining: number?): boolean, number, number

---@class pvp_helper
---@field public is_purgeable fun(self: pvp_helper, unit: game_object, min_remaining: number?): {is_purgeable: boolean, table: {buff_id: number, buff_name: string, priority: number, min_remaining: number}?, current_remaining_ms: number, expire_time: number}
---@field public is_stealable fun(self: pvp_helper, unit: game_object, min_remaining: number?): {is_stealable: boolean, table: {buff_id: number, buff_name: string, priority: number, min_remaining: number}?, current_remaining_ms: number, expire_time: number}

---@class pvp_helper
---@field public is_melee fun(self: pvp_helper, unit: game_object): boolean
---@field public is_disarmable fun(self: pvp_helper, unit: game_object, include_all: boolean?): boolean

---@class pvp_helper
---@field public has_burst_active fun(self: pvp_helper, unit: game_object, min_remaining: number?): boolean

---@class pvp_helper
---@field public get_combined_cc_descriptions fun(self: pvp_helper, type: number): string
---@field public get_combined_damage_type_descriptions fun(self: pvp_helper, type: number): string

---@class cc_flags_table
---@field public MAGICAL number
---@field public PHYSICAL number
---@field public ROOT number
---@field public STUN number
---@field public INCAPACITATE number
---@field public DISORIENT number
---@field public FEAR number
---@field public SAP number
---@field public CYCLONE number
---@field public KNOCKBACK number
---@field public SILENCE number
---@field public DISARM number
---@field public ANY number
---@field public ANY_BUT_ROOT number
---@field public combine fun(...: number): number

---@class damage_type_flags_table
---@field public PHYSICAL number
---@field public MAGICAL number
---@field public ANY number
---@field public combine fun(...: string): number

================
File: _api/common/utility/spell_helper.lua
================
-- Example:
-- ---@type spell_helper
-- local x = require("common/utility/spell_helper")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class spell_helper
--- Check if the spell is in the spellbook.
---@field public has_spell_equipped fun(self: spell_helper, spell_id: number): boolean

---@class spell_helper
--- Check if the spell is currently on cooldown.
---@field public is_spell_on_cooldown fun(self: spell_helper, spell_id: number): boolean

---@class spell_helper
--- Check if a spell is within castable range given a target.
---@field public is_spell_in_range fun(self: spell_helper, spell_id: number, target: game_object, source: vec3, destination: vec3): boolean

---@class spell_helper
--- Check if the target is within a permissible angle for casting a spell.
---@field public is_spell_within_angle fun(self: spell_helper, spell_id: number, caster: game_object, target: game_object, caster_position: vec3, target_position: vec3): boolean

---@class spell_helper
--- Check if the caster has the target in line of sight.
---@field public is_spell_in_line_of_sight fun(self: spell_helper, spell_id: number, caster: game_object, target: game_object): boolean

---@class spell_helper
--- Check if the caster has the target in line of sight.
---@field public is_spell_in_line_of_sight_position fun(self: spell_helper, spell_id: number, caster: game_object, cast_position: vec3): boolean

---@class spell_helper
--- Retrieve the cost of a spell.
---@field public get_spell_cost fun(self: spell_helper, spell_id: number): table

---@class spell_helper
--- Check if a unit has enough resources to cast a spell.
---@field public can_afford_spell fun(self: spell_helper, unit: game_object, spell_id: number, spell_costs: table): boolean

---@class spell_helper
--- Check if the spell can be cast by considering various factors like cooldown, range, and caster's resources.
---@field public is_spell_castable fun(self: spell_helper, spell_id: number, caster: game_object, target: game_object, skip_facing: boolean, skips_range: boolean): boolean

---@class spell_helper
--- Check if the spell can be cast (on position vec3) by considering various factors like cooldown, range, and caster's resources.
---@field public is_spell_castable_position fun(self: spell_helper, spell_id: number, caster: game_object, target: game_object, cast_position: vec3, skip_facing: boolean, skips_range: boolean,  is_queue: boolean?): boolean

---@class spell_helper
--- Check if the spell can be cast by considering various factors like cooldown, range, and caster's resources.
---@field public is_spell_queueable fun(self: spell_helper, spell_id: number, caster: game_object, target: game_object, skip_facing: boolean, skips_range: boolean): boolean

---@class spell_helper
--- Return parsed tooltip info, is not precise and doesnt support all spells.
---@field public get_spell_damage fun(self: spell_helper, spell_id: number, ignore_percentage?: boolean, ignore_flat?: boolean): number

---@class spell_helper
--- Return parsed tooltip info, is not precise and doesnt support all spells.
---@field public get_spell_healing fun(self: spell_helper, spell_id: number, ignore_percentage?: boolean, ignore_flat?: boolean): number

---@class spell_helper
--- Return the cooldown remaining of current charge and the total cooldown for all the remaining charges
---@field public get_remaining_charge_cooldown fun(self: spell_helper, spell_id: number): number, number

================
File: _api/common/utility/ui_buttons_info.lua
================
-- Example:
-- ---@type ui_buttons_info
-- local x = require("common/utility/ui_buttons_info")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class ui_buttons_info
---@field public launch_checkbox checkbox
---@field public force_render checkbox
---@field public are_buttons_empty fun(self: ui_buttons_info): boolean
---@field public push_button fun(self: ui_buttons_info, button_id: string, title: string, spell_ids: table<integer>, logic_function: function): nil
---@field public get_button_info fun(self: ui_buttons_info, button_id: string): table | nil
---@field public get_current_buttons_infos fun(self: ui_buttons_info): table
---@field public is_logic_attempting_only_once fun(self: ui_buttons_info): boolean
---@field public get_timeout_time fun(self: ui_buttons_info): number
---@field public set_no_render_timeout_time_slider_flag fun(self: ui_buttons_info, state: boolean): nil
---@field public is_target_dr_allowed fun(self: ui_buttons_info, target: game_object, cc_type: number, hit_time: number): nil

-- Example Usage:
-- local ui = require("common/utility/ui_buttons_info")
-- if ui:are_buttons_empty() then
--     print("No buttons are present")
-- end
-- ui:push_button("test_button", "Test Title", {12345}, function() print("Logic executed") end)
-- local button_info = ui:get_button_info("test_button")
-- if button_info then
--     print("Found button:", button_info.title)
-- end
-- local timeout = ui:get_timeout_time()
-- print("Timeout time:", timeout)
-- ui:set_no_render_timeout_time_slider_flag(true)

================
File: _api/common/utility/unit_helper.lua
================
-- Example:
-- ---@type unit_helper
-- local x = require("common/utility/unit_helper")
-- x: -> IntelliSense
-- Warning: Access with ":", not "."

---@class unit_helper
--- Returns true if the given unit is a training dummy.
---@field public is_dummy fun(self: unit_helper, unit: game_object): boolean

---@class unit_helper
--- Determine if the unit is in combat with certain exceptions.
---@field public is_in_combat fun(self: unit_helper, unit: game_object): boolean

---@class unit_helper
--- Return true when the npc_id is inside a blacklist.  
--- For example, incorporeal being, which will be ignored by target selector.
---@field public is_blacklist fun(self: unit_helper, npc_id: number): boolean

---@class unit_helper
--- Determine if the unit is a boss with exceptions.
---@field public is_boss fun(self: unit_helper, unit: game_object): boolean

---@class unit_helper
--- Determine if the unit is a valid enemy with exceptions.
---@field public is_valid_enemy fun(self: unit_helper, unit: game_object): boolean

---@class unit_helper
--- Determine if the unit is a valid ally with exceptions.
---@field public is_valid_ally fun(self: unit_helper, unit: game_object): boolean

---@class unit_helper
--- Returns the health percentage of the unit in format 0.0 to 1.0.
---@field public get_health_percentage fun(self: unit_helper, unit: game_object): number

---@class unit_helper
--- First = Health Percentage - Incoming Damage
--- Second = Incoming Damage
--- Third = Health Percentage Raw
--- Fourth = Incoming Damage Relative to Health (Incoming Percentage)
--- Calculate the health percentage of a unit considering incoming damage within a specified time frame.
--- local health_percentage_inc, incoming_damage, health_percentage_raw, incoming_damage_percentage = fnc()
---@field public get_health_percentage_inc fun(self: unit_helper, unit: game_object, time_limit: number?): number, number, number, number

---@class unit_helper
--- Determine the role ID of the unit (Tank, Dps, Healer).  
---@field public get_role_id fun(self: unit_helper, unit: game_object): number

---@class unit_helper
--- Determine if the unit is in the tank role.
---@field public is_tank fun(self: unit_helper, unit: game_object): boolean
--- Determine if the unit is in the healer role.
---@field public is_healer fun(self: unit_helper, unit: game_object): boolean
--- Determine if the unit is in the damage dealer role.
---@field public is_damage_dealer fun(self: unit_helper, unit: game_object): boolean

---@class unit_helper
--- Get the power percentage of the unit.  
--- https://wowpedia.fandom.com/wiki/Enum.PowerType
---@field public get_resource_percentage fun(self: unit_helper, unit: game_object, power_type: number): number

---@class unit_helper
--- Returns a list of enemies within a designated area.  
--- Note: This function is performance-friendly with lua core cache.
---@field public get_enemy_list_around fun(self: unit_helper, point: vec3, range: number, incl_out_combat?: boolean, incl_blacklist?: boolean, players_only?: boolean, include_dead?: boolean): table<game_object>

---@class unit_helper
--- Returns a list of allies within a designated area.  
--- Note: This function is performance-friendly with lua core cache.
---@field public get_ally_list_around fun(self: unit_helper, point: vec3, range: number, players_only: boolean, party_only: boolean, include_dead?: boolean): table<game_object>

================
File: _api/core.lua
================
---@class core
_G.core = {}

--- Log a message to the console.
---@param message string The message to log.
function core.log(message) end

--- Log a message to log files.
---@param message string The message to log to files.
function core.log_file(message) end

--- Log a warning message to the console.
---@param message string The warning message to log.
function core.log_warning(message) end

--- Log an error message to the console.
---@param message string The error message to log.
function core.log_error(message) end

--- Register a function to be called before each tick.
---@param callback function The function to register as a pre-tick callback.
function core.register_on_pre_tick_callback(callback) end

--- Register a function to be called before each tick.
---@param callback function The function to register as a pre-tick callback.
function core.register_on_render_window_callback(callback) end

--- Register a function to be called during the update phase.
---@param callback function The function to register as an update callback.
function core.register_on_update_callback(callback) end

--- Register a function to be called during the rendering phase.
---@param callback function The function to register as a render callback.
function core.register_on_render_callback(callback) end

--- Register a function to be called during the rendering of menus.
---@param callback function The function to register as a render menu callback.
function core.register_on_render_menu_callback(callback) end

--- Register a function to be called to send control_panel data to core
---@param callback function The function to register as a control_panel callback
function core.register_on_render_control_panel_callback(callback) end

--- Register a function that triggers every time game registers a legit cast attempt
---@param callback function The function to register as a legit cast callback
function core.register_on_legit_spell_cast_callback(callback) end

--- Register a function that triggers every time game registers an spell cast
---@param callback function The function to register as an spell cast callback
function core.register_on_spell_cast_callback(callback) end

--- Get the current ping.
---@return number The current ping.
function core.get_ping()
    return 0
end

--- Get the current time in milliseconds since the injection time.
---@return number The current time in milliseconds.
function core.time()
    return 0
end

--- Useful for profiling
---@return number
function core.cpu_ticks()
    return 0
end

--- Useful for profiling
---@return number
function core.cpu_ticks_per_second()
    return 0
end

--- Get the current game time in milliseconds since the start of the game.
---@return number The current game time in milliseconds.
function core.game_time()
    return 0
end

--- Get the time in seconds since the last frame.
---@return number The time in seconds since the last frame.
function core.delta_time()
    return 0
end

--- Get the screen position of cursor.
---@return vec2 The screen position of cursor.
function core.get_cursor_position()
    return {}
end

--- Get the id of the current localplayer map.
---@return number The id of the current localplayer map.
function core.get_map_id()
    return 0
end

---@return number
function core.get_instance_id()
    return 0
end

---@return number
function core.get_difficulty_id()
    return 0
end

---@return number
function core.get_keystone_level()
    return 0
end

---@return string
function core.get_instance_name()
    return ""
end

---@return string
function core.get_difficulty_name()
    return ""
end

--- Get the name of the current localplayer map.
---@return string The name of the current localplayer map.
function core.get_map_name()
    return ""
end

---@return boolean
function core.is_debug()
    return false
end

---@return number
function core.get_user_role_flags()
    return 0
end

---@return number
function core.get_user_flags()
    return 0
end

---@return number
---@param pos vec3
function core.get_height_for_position(pos)
    return 0
end

---@return nil
function core.disable_drawings()
    return nil
end

---@return nil
function core.enable_drawings()
    return nil
end

---@return string
function core.get_account_name()
    return ""
end

---@return string
---@param text string
function core.read_file(text)
    return ""
end

--- Creates a new log file.
---@return nil
---@param filename string The name of the log file to create.
function core.create_log_file(filename)
    return nil
end

--- Writes a message to the log file.
---@return nil
---@param filename string The name of the log file to write to.
---@param message string The message to write into the log file.
function core.write_log_file(filename, message)
    return nil
end

--- Creates a new data file.
---@return nil
---@param filename string The name of the data file to create.
function core.create_data_file(filename)
    return nil
end

--- Writes data to a file.
---@return nil
---@param filename string The name of the data file to write to.
---@param data string The data to write into the file.
function core.write_data_file(filename, data)
    return nil
end

--- Reads data from a file.
---@return string
---@param filename string The name of the data file to read from.
function core.read_data_file(filename)
    return ""
end

---@class inventory
core.inventory = {}

--- -2 for the keyring
--- -4 for the tokens bag
--- 0 = backpack, 1 to 4 for the bags on the character
--- While bank is opened -1 for the bank content, 5 to 11 for bank bags (numbered left to right, was 5-10 prior to tbc expansion, 2.0 game version)
---@param bag_id integer BagId https://wowwiki-archive.fandom.com/wiki/BagId
---@return table<item_slot_info>
function core.inventory.get_items_in_bag(bag_id)
    return {}
end

---@class input
core.input = {}

--- Casts a spell on a specific target game object.
---@param spell_id integer The ID of the spell to cast.
---@param target game_object The target game object on which the spell will be cast.
---@return boolean Indicates whether the spell was successfully cast on the target.
function core.input.cast_target_spell(spell_id, target)
    return false
end

--- Casts a spell on a vec3 position
---@param spell_id integer The ID of the spell to cast.
---@param position vec3 the position where you want to cast the spell.
---@return boolean Indicates whether the spell was successfully cast on the position.
function core.input.cast_position_spell(spell_id, position)
    return false
end

--- Use a self cast item
---@param item_id integer The ID of the item to use.
---@return boolean Indicates whether the spell was successfully usage of the item
function core.input.use_item(item_id)
    return false
end

---@param target game_object
---@param item_id integer The ID of the item to use.
---@return boolean Indicates whether the spell was successfully usage of the item
function core.input.use_item_target(item_id, target)
    return false
end

---@param position vec3
---@param item_id integer The ID of the item to use.
---@return boolean Indicates whether the spell was successfully usage of the item
function core.input.use_item_position(item_id, position)
    return false
end

--- Set the local player target
---@param unit game_object The game_object to set as target
---@return boolean Return true on successfully targetting the desired unit
function core.input.set_target(unit)
    return false
end

--- Set the local player focus
---@param unit game_object The game_object to set as focus
---@return boolean Return true on successfully focusing the desired unit
function core.input.set_focus(unit)
    return false
end

--- Get the local player focus
---@return table Return the game_object focus, can be nil
function core.input.get_focus()
    return {};
end

--- Checks if the key is pressed
--- @param key integer The key to check if is pressed or not
--- @return boolean Returns true if the passed key is being currently pressed. Check https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes
function core.input.is_key_pressed(key)
    return false;
end

--- @return nil
--- Starts local rotation to right side
function core.input.turn_right_start()
    return nil
end

--- @return nil
--- Stops local rotation to right side
function core.input.turn_right_stop()
    return nil
end

--- @return nil
--- Starts local rotation to left side
function core.input.turn_left_start()
    return nil
end

--- @return nil
--- Stops local rotation to left side
function core.input.turn_left_stop()
    return nil
end

--- @return nil
--- Starts local strafe to right
function core.input.strafe_right_start()
    return nil
end

--- @return nil
--- Stops local strafe to right
function core.input.strafe_right_stop()
    return nil
end

--- @return nil
--- Starts local strafe to left
function core.input.strafe_left_start()
    return nil
end

--- @return nil
--- Stops local strafe to left
function core.input.strafe_left_stop()
    return nil
end

--- @return nil
--- Starts local forward
function core.input.move_forward_start()
    return nil
end

--- @return nil
--- Stops local forward
function core.input.move_forward_stop()
    return nil
end

--- @return nil
--- Starts local backward
function core.input.move_backward_start()
    return nil
end

--- @return nil
--- Stops local backward
function core.input.move_backward_stop()
    return nil
end

--- @return nil
function core.input.cancel_spells()
    return nil
end

--- @return nil
function core.input.enable_movement()
    return nil
end

--- @return nil
function core.input.disable_movement()
    return nil
end

--- @return nil
--- @param object game_object
function core.input.set_control_object(object)
    return nil
end

--- @return game_object
function core.input.get_control_object(object)
    return object
end

--- @return nil
--- Faces to vec3
--- @param point vec3
function core.input.look_at(point)
    return nil
end

--- Stops the local player’s current attack.
---@return nil
function core.input.stop_attack()
    return nil
end

--- Sets the pet to passive mode.
---@return nil
function core.input.set_pet_passive()
    return nil
end

--- Sets the pet to defensive mode.
---@return nil
function core.input.set_pet_defensive()
    return nil
end

--- Sets the pet to aggressive mode.
---@return nil
function core.input.set_pet_aggressive()
    return nil
end

--- Sets the pet to assist mode.
---@return nil
function core.input.set_pet_assist()
    return nil
end

--- Commands the pet to wait at its current position.
---@return nil
function core.input.set_pet_wait()
    return nil
end

--- Commands the pet to follow the player.
---@return nil
function core.input.set_pet_follow()
    return nil
end

--- Commands the pet to attack a target.
---@param target game_object The target to attack.
---@return nil
function core.input.pet_attack(target)
    return nil
end

--- Commands the pet to cast a spell on a target.
---@param spell_id integer The ID of the spell to cast.
---@param target game_object The target to cast the spell on.
---@return nil
function core.input.pet_cast_target_spell(spell_id, target)
    return nil
end

--- Commands the pet to cast a spell at a position.
---@param spell_id integer The ID of the spell to cast.
---@param position vec3 The position to cast the spell at.
---@return nil
function core.input.pet_cast_position_spell(spell_id, position)
    return nil
end

--- Commands the pet to move to a specified game object.
---@param target game_object The game object to move to.
---@return nil
function core.input.pet_move(target)
    return nil
end

--- Commands the pet to move to a specified position.
---@param position vec3 The position to move to.
---@return nil
function core.input.pet_move_position(position)
    return nil
end

--- Loots a specified game object.
---@param target game_object The game object to loot.
---@return nil
function core.input.loot_object(target)
    return nil
end

--- Skins a specified game object.
---@param target game_object The game object to skin.
---@return nil
function core.input.skin_object(target)
    return nil
end

--- Uses a specified game object.
---@param target game_object The game object to use.
---@return nil
function core.input.use_object(target)
    return nil
end

---@return nil
function core.input.release_spirit()
    return nil
end

---@return nil
function core.input.resurrect_corpse()
    return nil
end

---@class object_manager
core.object_manager = {}

--- Retrieves the local player game object.
---@return game_object
function core.object_manager.get_local_player()
    return {}
end

--- Retrieves all game objects.
---@return game_object[]
function core.object_manager.get_all_objects()
    return {}
end

-- Retrieves the player for the given arena frame index, nil means we are not in arena
--- @param index integer
--- @return game_object | nil
function core.object_manager.get_arena_target(index)
    return {}
end

--- Retrieves all visible game objects.
---@return game_object[]
function core.object_manager.get_visible_objects()
    return {}
end

--- Retrieves a list of game objects with all the arena frames.
---@return game_object
function core.object_manager.get_arena_frames()
    return {}
end

--- Retrieves mouse_over object
---@return game_object
function core.object_manager.get_mouse_over_object()
    return {}
end

---@class spell_book
core.spell_book = {}

--- Retrieves the local_player specialization_id
---@return number The local_player specialization_id
function core.spell_book.get_specialization_id()
    return 0
end

--- Retrieves the global cooldown duration in seconds.
---@return number The global cooldown duration in seconds.
function core.spell_book.get_global_cooldown()
    return 0
end

--- Retrieves the cooldown duration of the specified spell identified by its ID.
---@param spell_id integer The ID of the spell.
---@return number The cooldown duration of the specified spell in seconds.
function core.spell_book.get_spell_cooldown(spell_id)
    return 0
end

--- Retrieves the amount of current charges of the specified spell identified by its ID.
---@param spell_id integer The ID of the spell.
---@return integer The amount of current stacks of the specified spell.
function core.spell_book.get_spell_charge(spell_id)
    return 0
end

--- Retrieves the amount of max charges of the specified spell identified by its ID.
---@param spell_id integer The ID of the spell.
---@return integer The amount of max stacks of the specified spell.
function core.spell_book.get_spell_charge_max(spell_id)
    return 0
end

--- Retrieves the total cooldown of the specified spell charge identified by its ID.
---@param spell_id integer The ID of the spell.
---@return integer The amount of max stacks of the specified spell.
function core.spell_book.get_spell_charge_cooldown_duration(spell_id)
    return 0
end

--- Retrieves the last time a charge was triggered of the specified spell identified by its ID.
---@param spell_id integer The ID of the spell.
---@return integer The amount of max stacks of the specified spell.
function core.spell_book.get_spell_charge_cooldown_start_time(spell_id)
    return 0
end

--- Retrieves the name of the specified spell identified by its ID.
---@param spell_id integer The ID of the spell.
---@return string The name of the specified spell.
function core.spell_book.get_spell_name(spell_id)
    return ""
end

--- Retrieves the whole tooltip text of the specified spell identified by its ID.
---@param spell_id integer The ID of the spell.
---@return string The tooltip text of the specified spell.
function core.spell_book.get_spell_description(spell_id)
    return ""
end

--- Retrieves the whole tooltip text of the specified buff.
---@param buff_ptr buff
---@return string The tooltip text of the specified buff.
function core.spell_book.get_buff_description(buff_ptr)
    return ""
end

--- Retrieves a table containing all spells and their corresponding IDs.
---@return table<number>
function core.spell_book.get_spells()
    return {}
end

--- Checks if the specified spell identified by its ID is owned by the localplayer.
---@param spell_id integer The ID of the spell.
---@return boolean Returns true if the specified spell is equipped, otherwise returns false.
function core.spell_book.has_spell(spell_id)
    return false
end

--- Checks if the specified spell identified by its ID is learned by the localplayer.
---@param spell_id integer The ID of the spell.
---@return boolean Returns true if the specified spell is learned, otherwise returns false.
function core.spell_book.is_spell_learned(spell_id)
    return false
end

---@param n integer
---@param flag integer
---@param spell_id integer The ID of the spell.
---@return boolean Returns true if the specified spell has certain attribute.
function core.spell_book.spell_has_attribute(spell_id, n, flag)
    return false
end

--- Returns the spell_id from the talent_id.
---@param talent_id integer The ID of the talent.
---@return number Returns the spell_id from the talent_id.
function core.spell_book.get_talent_spell_id(talent_id)
    return 0
end

--- Returns the name from the talent_id.
---@param talent_id integer The ID of the talent.
---@return string Returns the name from the talent_id.
function core.spell_book.get_talent_name(talent_id)
    return ""
end

--- Checks if the specified spell is melee type.
---@param spell_id integer The ID of the spell.
---@return boolean Returns true if the specified spell is melee type.
function core.spell_book.is_melee_spell(spell_id)
    return false
end

--- Checks if the specified spell is an skillshot.
---@param spell_id integer The ID of the spell.
---@return boolean Returns true if the specified spell is skillshot.
function core.spell_book.is_spell_position_cast(spell_id)
    return false
end

--- Checks if the cursor is currently busy with an skillshot.
---@return boolean Returns true if the cursor is currently busy with an skillshot.
function core.spell_book.cursor_has_spell()
    return false
end

---@class spell_costs
---@field public min_cost number
---@field public cost number
---@field public cost_per_sec number
---@field public cost_type number
---@field public required_buff_id number

--- Returns spell_costs structure
---@param spell_id integer The ID of the spell.
---@return table<spell_costs>
function core.spell_book.get_spell_costs(spell_id)
    return {}
end

---@class range_data
---@field public min number
---@field public max number

--- Retrieves the range data of the specified spell identified by its ID.
---@param spell_id integer The ID of the spell.
---@return range_data A table containing the minimum and maximum range of the specified spell.
function core.spell_book.get_spell_range_data(spell_id)
    return {}
end

--- Retrieves the minimum range of the specified spell identified by its ID.
---@param spell_id integer The ID of the spell.
---@return number The minimum range of the specified spell.
function core.spell_book.get_spell_min_range(spell_id)
    return 0
end

--- Retrieves the maximum range of the specified spell identified by its ID.
---@param spell_id integer The ID of the spell.
---@return number The maximum range of the specified spell.
function core.spell_book.get_spell_max_range(spell_id)
    return 0
end

--- Retrieves the school flag of the specified spell identified by its ID.
---@param spell_id integer The ID of the spell.
---@return schools_flag The spell school flag.
function core.spell_book.get_spell_school(spell_id)

    ---@type schools_flag
    return nil
end

--- Retrieves the cast time of the specified spell identified by its ID.
---@param spell_id integer The ID of the spell.
---@return number The cast time in seconds.
function core.spell_book.get_spell_cast_time(spell_id)
    return 0
end

--- Note: This Function is deprecated
--- Alternative: Common Utility Spell Helper
--- Retrieves the damage value of the spell_id.
---@param spell_id integer The ID of the spell.
---@return number The damage value of the spell.
function core.spell_book.get_spell_damage(spell_id)
    return 0
end

--- Retrieves the mode flag of our pet
---@return number
function core.spell_book.get_pet_mode()
    return 0
end

--- Retrieves a table with all the pet spells
---@return table
function core.spell_book.get_pet_spells()
    return {}
end

---@class graphics
core.graphics = {}

--- Adds a notification to the display.
--- @param unique_id string UNIQUE identifier for the notification.
--- @param label string The title or heading for the notification.
--- @param message string The main content of the notification.
--- @param duration_ms integer The duration in seconds that the notification should be displayed.
--- @param color color The color of the notification text.
--- @param x_pos_offset number Optional horizontal position offset, defaults to 0.0.
--- @param y_pos_offset number Optional vertical position offset, defaults to 0.0.
--- @param max_background_alpha number Optional maximum background alpha (opacity), defaults to 0.95.
--- @param length number Optional length of the notification box, defaults to 0.0.
--- @param height number Optional height of the notification box, defaults to 0.0.
--- @overload fun(unique_id:string, label: string, message: string, duration_s: number, color: color):boolean
--- @overload fun(unique_id:string, label: string, message: string, duration_s: number, color: color, x_pos_offset: number):boolean
--- @overload fun(unique_id:string, label: string, message: string, duration_s: number, color: color, x_pos_offset: number, y_pos_offset: number):boolean
--- @overload fun(unique_id:string, label: string, message: string, duration_s: number, color: color, x_pos_offset: number, y_pos_offset: number, max_background_alpha: number):boolean
--- @overload fun(unique_id:string, label: string, message: string, duration_s: number, color: color, x_pos_offset: number, y_pos_offset: number, max_background_alpha: number, length: number):boolean
function core.graphics.add_notification(unique_id, label, message, duration_ms, color, x_pos_offset, y_pos_offset, max_background_alpha, length, height)
    return false
end

---@return vec2 main_menu_screen_position
function core.graphics.get_main_menu_screen_pos()
    return {}
end

---@return string key_name
---@param key integer
function core.graphics.translate_vkey_to_string(key)
    return ""
end

---@return vec2 main_menu_screen_size
function core.graphics.get_main_menu_screen_size()
    return {}
end

--- @param unique_id string UNIQUE identifier of the notification.
--- @param delay number|nil Optional delay to trigger (eg. delay = 5.0, this function will return true if the notification was clicked 5 seconds ago), defaults to 0.0
function core.graphics.is_notification_clicked(unique_id, delay)
    return false
end

-- Returns true if the notification is being shown on screen
--- @param unique_id string UNIQUE identifier of the notification.
function core.graphics.is_notification_active(unique_id)
    return false
end

--- Retrieves the current screen position of notifications.
---@return vec2 notifications_position The screen coordinates (x, y) where notifications are displayed.
function core.graphics.get_notifications_menu_position()
    return {}
end

--- Retrieves the default size of notifications.
---@return vec2 notifications_default_size The default width and height of notifications.
function core.graphics.get_notifications_default_size()
    return {}
end

---@return string current_dragged_menu_element_pending_to_be_added_to_control_panel_label The current dragged menu element that is pending to be added to control panel
function core.graphics.get_current_control_panel_element_label()
    return ""
end

---@param label string
function core.graphics.set_current_control_panel_element_label(label) end

--- Retrieves the scaled width - Main resolution is your current resolution X, must be hardcoded. (Eg. 1920)
---@return number scaled_width
---@param value_to_scale number
---@param main_resolution number
function core.graphics.scale_width_to_screen_size(value_to_scale, main_resolution)
    return 0.0
end

--- Retrieves the scaled height - Main resolution is your current resolution Y, must be hardcoded. (Eg. 1080)
---@return number scaled_width
---@param value_to_scale number
---@param main_resolution number
function core.graphics.scale_height_to_screen_size(value_to_scale, main_resolution)
    return 0.0
end

--- Retrieves the scaled size - Main resolution is your current resolution. Must be hardcoded. (Eg. 1920*1080)
---@return vec2 scaled_size
---@param value_to_scale vec2
---@param main_resolution vec2
function core.graphics.scale_size_to_screen_size(value_to_scale, main_resolution)
    return {}
end

--- Line Of Sight
---@return boolean
---@param caster game_object
---@param target game_object
function core.graphics.is_line_of_sight(caster, target)
    return false
end

--- Trace Line
---@return boolean
---@param pos1 vec3
---@param pos2 vec3
---@param flags number
function core.graphics.trace_line(pos1, pos2, flags)
    return false
end

--- World to Screen
---@param position vec3 The 3D world position to convert.
---@return vec2 | nil
function core.graphics.w2s(position)
    return {}
end

--- World to Screen
---@return vec2 --| nil
function core.graphics.get_screen_size()
    return {}
end

--- Cursor World Position (Vec3)
---@return vec3
function core.graphics.get_cursor_world_position()
    return {}
end

--- Returns true when the main menu is open
---@return boolean
function core.graphics.is_menu_open()
    return false
end

--- Render 2D text.
---@param text string The text to render.
---@param position vec2 The position where the text will be rendered.
---@param font_size number The font size of the text.
---@param color color The color of the text.
---@param centered? boolean Indicates whether the text should be centered at the specified position. Default is false.
---@param font_id? integer The font ID. Default is 0.
function core.graphics.text_2d(text, position, font_size, color, centered, font_id) end

--- Render 3D text.
---@param text string The text to render.
---@param position vec3 The position in 3D space where the text will be rendered.
---@param font_size number The font size of the text.
---@param color color The color of the text.
---@param centered? boolean Indicates whether the text should be centered at the specified position. Default is false.
---@param font_id? integer The font ID. Default is 0.
function core.graphics.text_3d(text, position, font_size, color, centered, font_id) end

--- Get Text Width
---@return number
---@param text string The text to render.
---@param font_size number The font size of the text.
---@param font_id? integer The font ID. Default is 0.
function core.graphics.get_text_width(text, font_size, font_id)
    return 0
end

--- Draw 2D Line
---@param start_point vec2 The start point of the line.
---@param end_point vec2 The end point of the line.
---@param color color The color of the line.
---@param thickness? number The thickness of the line. Default is 1.
function core.graphics.line_2d(start_point, end_point, color, thickness) end

--- Draw 2D Rectangle Outline
---@param top_left_point vec2 The top-left corner point of the rectangle.
---@param width number The width of the rectangle.
---@param height number The height of the rectangle.
---@param color color The color of the rectangle outline.
---@param thickness? number The thickness of the outline. Default is 1.
---@param rounding? number The rounding of corners. Default is 0.
function core.graphics.rect_2d(top_left_point, width, height, color, thickness, rounding) end

--- Draw 2D Filled Rectangle
---@param top_left_point vec2 The top-left corner point of the rectangle.
---@param width number The width of the rectangle.
---@param height number The height of the rectangle.
---@param color color The color of the rectangle outline.
---@param rounding? number The rounding of corners. Default is 0.
function core.graphics.rect_2d_filled(top_left_point, width, height, color, rounding) end

--- Draw 3D Line
---@param start_point vec3 The start point of the line in 3D space.
---@param end_point vec3 The end point of the line in 3D space.
---@param color color The color of the line.
---@param thickness? number The thickness of the line. Default is 1.
---@param fade_factor? number The thickness of the outline. Default is 2.5.
function core.graphics.line_3d(start_point, end_point, color, thickness, fade_factor) end

--- Draw 3D Rectangle Outline
-- ---@param p1 vec3 The first corner point of the rectangle in 3D space.
-- ---@param p2 vec3 The second corner point of the rectangle in 3D space.
-- ---@param p3 vec3 The third corner point of the rectangle in 3D space.
-- ---@param p4 vec3 The fourth corner point of the rectangle in 3D space.
-- ---@param color color The color of the rectangle outline.
-- ---@param thickness? number The thickness of the outline. Default is 1.
-- function core.graphics.rect_3d(p1, p2, p3, p4, color, thickness) end

--- Draw 3D Rectangle Outline New
---@param origin vec3
---@param destination vec3
---@param color color The color of the rectangle outline.
---@param thickness? number The thickness of the line. Default is 1.
---@param fade_factor? number The thickness of the outline. Default is 2.5.
function core.graphics.rect_3d(origin, destination, width, color, thickness, fade_factor) end

--- Draw 3D Filled Rectangle
---@param p1 vec3 The first corner point of the rectangle in 3D space.
---@param p2 vec3 The second corner point of the rectangle in 3D space.
---@param p3 vec3 The third corner point of the rectangle in 3D space.
---@param p4 vec3 The fourth corner point of the rectangle in 3D space.
---@param color color The fill color of the rectangle.
function core.graphics.rect_3d_filled(p1, p2, p3, p4, color) end

--- Draw 2D Circle Outline
---@param center vec2 The center point of the circle.
---@param radius number The radius of the circle.
---@param color color The color of the circle outline.
---@param thickness? number The thickness of the outline. Default is 1.
function core.graphics.circle_2d(center, radius, color, thickness) end

--- Draw 2D Circle Outline Gradient
---@param center vec2 The center point of the circle.
---@param radius number The radius of the circle.
---@param color_1 color
---@param color_2 color
---@param color_3 color
---@param thickness? number The thickness of the outline. Default is 1.
function core.graphics.circle_2d_gradient(center, radius, color_1, color_2, color_3, thickness) end

--- Draw 2D Filled Circle
---@param center vec2 The center point of the circle.
---@param radius number The radius of the circle.
---@param color color The fill color of the circle.
function core.graphics.circle_2d_filled(center, radius, color) end

--- Draw 3D Circle Outline
---@param center vec3 The center point of the circle in 3D space.
---@param radius number The radius of the circle.
---@param color color The color of the circle outline.
---@param thickness? number The thickness of the outline. Default is 1.
---@param fade_factor? number The factor / strenght it fades out, bigger value, faster fade. Default is 2.5.
function core.graphics.circle_3d(center, radius, color, thickness, fade_factor) end

--- Draw 3D Circle Outline Percentage
---@param center vec3 The center point of the circle in 3D space.
---@param radius number The radius of the circle.
---@param color color The color of the circle outline.
---@param percentage number The percentage of the circle to render.
---@param thickness? number The thickness of the outline. Default is 1.
function core.graphics.circle_3d_percentage(center, radius, color, percentage, thickness) end

--- Draw 3D Circle Outline Gradient
---@param center vec3 The center point of the circle in 3D space.
---@param radius number The radius of the circle.
---@param color_1 color
---@param color_2 color
---@param color_3 color
---@param thickness? number The thickness of the outline. Default is 1.
function core.graphics.circle_3d_gradient(center, radius, color_1, color_2, color_3, thickness) end

--- Draw 3D Circle Outline Gradient Percentage
---@param center vec3 The center point of the circle in 3D space.
---@param radius number The radius of the circle.
---@param color_1 color
---@param color_2 color
---@param color_3 color
---@param percentage number The percentage of the circle to render.
---@param thickness? number The thickness of the outline. Default is 1.
function core.graphics.circle_3d_gradient_percentage(center, radius, color_1, color_2, color_3, percentage, thickness) end

--- Draw 3D Filled Circle
---@param center vec3 The center point of the circle in 3D space.
---@param radius number The radius of the circle.
---@param color color The fill color of the circle.
function core.graphics.circle_3d_filled(center, radius, color) end

--- Draw 2D Filled Triangle
---@param p1 vec2 The first corner point of the triangle in 2D space.
---@param p2 vec2 The second corner point of the triangle in 2D space.
---@param p3 vec2 The third corner point of the triangle in 2D space.
---@param color color The fill color of the triangle.
function core.graphics.triangle_2d_filled(p1, p2, p3, color) end

--- Draw 3D Filled Triangle
---@param p1 vec3 The first corner point of the triangle in 3D space.
---@param p2 vec3 The second corner point of the triangle in 3D space.
---@param p3 vec3 The third corner point of the triangle in 3D space.
---@param color color The fill color of the triangle.
function core.graphics.triangle_3d_filled(p1, p2, p3, color) end

--- Load Image
---@param path_to_asset string The path to the image file.
function core.graphics.load_image(path_to_asset) end

--- Draw Image
---@param image any Loaded image object.
---@param position vec2 The position to place the image.
function core.graphics.draw_image(image, position) end

--- Renders System Menu from C++
function core.graphics.render_system_menu() end

---@class menu
core.menu = {}

--- Registers the menu for interaction.
function core.menu.register_menu() end

--- Creates a new tree node instance
---@return tree_node
function core.menu.tree_node()
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new checkbox instance.
---@param default_state boolean The default state of the checkbox.
---@param id string The unique identifier for the checkbox.
---@return checkbox
function core.menu.checkbox(default_state, id)
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new checkbox instance.
---@param default_key integer The default state of the checkbox.
---@param initial_toggle_state boolean The initial toggle state of the keybind
---@param default_state boolean The default state of the checkbox
---@param show_in_binds boolean The default show in binds state of the checkbox
---@param default_mode_state integer The default show in binds state of the checkbox  -> 0 is hold, 1 is toggle, 2 is always
---@param id string The unique identifier for the checkbox.
---@return key_checkbox
function core.menu.key_checkbox(default_key, initial_toggle_state, default_state, show_in_binds,  default_mode_state, id)
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new slider with integer values.
---@param min_value number The minimum value of the slider.
---@param max_value number The maximum value of the slider.
---@param default_value number The default value of the slider.
---@param id string The unique identifier for the slider.
---@return slider_int
function core.menu.slider_int(min_value, max_value, default_value, id)
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new slider with floating-point values.
---@param min_value number The minimum value of the slider.
---@param max_value number The maximum value of the slider.
---@param default_value number The default value of the slider.
---@param id string The unique identifier for the slider.
---@return slider_float
function core.menu.slider_float(min_value, max_value, default_value, id)
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new combobox.
---@param default_index number The default index of the combobox options (1-based).
---@param id string The unique identifier for the combobox.
---@return combobox
function core.menu.combobox(default_index, id)
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new combobox_reorderable.
---@param default_index number The default index of the combobox options (1-based).
---@param id string The unique identifier for the combobox.
---@return combobox_reorderable
function core.menu.combobox_reorderable(default_index, id)
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new keybind.
---@param default_value number The default value for the keybind.
---@param initial_toggle_state boolean The initial toggle state for the keybind.
---@param id string The unique identifier for the keybind.
---@return keybind
function core.menu.keybind(default_value, initial_toggle_state, id)
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new button.
---@return button
---@param id string The unique identifier for the button.
function core.menu.button(id)
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new color picker.
---@param default_color color The default color value.
---@param id string The unique identifier for the color picker.
---@return color_picker
function core.menu.colorpicker(default_color, id)
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new header
---@return header
function core.menu.header()
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new text input
---@return text_input
function core.menu.text_input(id)
    return {} -- Empty return statement to implicitly return nil
end

--- Creates a new window
---@return window
function core.menu.window(window_id)
    return {} -- Empty return statement to implicitly return nil
end

================
File: _api/game_object.lua
================
---@class threat_table
---@field public is_tanking boolean
---@field public status integer -- 0, 1, 2, 3
---@field public threat_percent number -- 0 to 100

---@class buff
---@field public buff_name string
---@field public buff_id integer
---@field public count number
---@field public expire_time number
---@field public duration number
---@field public type integer
---@field public caster game_object

---@class loss_of_control_info
---@field public valid boolean
---@field public spell_id integer
---@field public start_time integer
---@field public end_time integer
---@field public duration integer
---@field public type integer
---@field public lockout_school schools_flag

---@class item_slot_info
---@field public object game_object
---@field public slot_id integer

---@class game_object
---Returns whether the game_object is valid.
---@field public is_valid fun(self: game_object): boolean
---Returns whether the game_object is visible.
---@field public is_visible fun(self: game_object): boolean
---Returns the type of the game object.
---@field public get_type fun(self: game_object): number
---Returns the class of the game object.
---@field public get_class fun(self: game_object): number
---Returns the spec_id of the game object.
---@field public get_specialization_id fun(self: game_object): number
---Returns the npc_id of the game object.
---@field public get_npc_id fun(self: game_object): number
---Returns the item_id of the game object.
---@field public get_item_id fun(self: game_object): number
---Returns the level of the game object.
---@field public get_level fun(self: game_object): number
---Returns the faction id of the game object.
---@field public get_faction_id fun(self: game_object): number
---Returns the mark id of the game object.  
--- 0 = No Icon   
--- 1 = Yellow 4-point Star  
--- 2 = Orange Circle  
--- 3 = Purple Diamond  
--- 4 = Green Triangle  
--- 5 = White Crescent Moon  
--- 6 = Blue Square  
--- 7 = Red "X" Cross  
--- 8 = White Skull  
---@field public get_target_marker_index fun(self: game_object): number
---Returns the creature_type id of the game object.  
-- 1 -> Beast
-- 2 -> Dragonkin
-- 3 -> Demon
-- 4 -> Elemental
-- 5 -> Giant
-- 6 -> Undead
-- 7 -> Humanoid
-- 8 -> Critter
-- 9 -> Mechanical
-- 10 -> Not specified
-- 11 -> Totem
-- 12 -> Non-combat Pet
-- 13 -> Gas Cloud
-- 14 -> Wild Pet
-- 15 -> Aberration
---@field public get_creature_type fun(self: game_object): number
---Returns the classification id of the game object.  
--- -1 = unknown  
--- 0 = normal  
--- 1 = elite  
--- 2 = rareelite  
--- 3 = worldboss  
--- 4 = rare  
--- 5 = trivial  
--- 6 = minus  
---@field public get_classification fun(self: game_object): number
---Returns the group role of the game object.  
--- "NONE" / unknown = -1  
--- "TANK" = 0  
--- "HEALER" = 1  
--- "DAMAGER" = 2  
---@field public get_group_role fun(self: game_object): number
---Returns the bounding radius of the game object.
---@field public get_bounding_radius fun(self: game_object): number
---Returns the height of the game object.
---@field public get_height fun(self: game_object): number
---Returns the scale of the game object.
---@field public get_scale fun(self: game_object): number
---Returns the cooldown of the specified item.
---@field public get_item_cooldown fun(self: game_object, item_id: integer): number
---Returns whether the game object is a party member.
---@field public is_party_member fun(self: game_object): boolean
---Returns whether the game object has the specified item.
---@field public has_item fun(self: game_object, item_id: integer): boolean
---Returns whether the game object is dead.
---@field public is_dead fun(self: game_object): boolean
---Returns whether the game object is ghost.
---@field public is_ghost fun(self: game_object): boolean
---Returns whether the game object is feigning death.
---@field public is_feign_death fun(self: game_object): boolean
---Returns whether the game object is a basic object.
---@field public is_basic_object fun(self: game_object): boolean
---Returns whether the game object is a player.
---@field public is_player fun(self: game_object): boolean
---Returns whether the game object is a unit.
---@field public is_unit fun(self: game_object): boolean
---Returns whether the game object is a boss.
---@field public is_boss fun(self: game_object): boolean
---Returns whether the game object is an item.
---@field public is_item fun(self: game_object): boolean
---Returns whether the game object is mounted.
---@field public is_mounted fun(self: game_object): boolean
---Returns whether the game object is outdoors.
---@field public is_outdoors fun(self: game_object): boolean
---Returns whether the game object is indoors.
---@field public is_indoors fun(self: game_object): boolean
---Returns whether the game object is glowing.
---@field public is_glow fun(self: game_object): boolean
---Sets the glowing state of the game object.
---@field public set_glow fun(self: game_object, state: boolean): nil
---Returns whether the game object is in combat.
---@field public is_in_combat fun(self: game_object): boolean
---Returns the position of the game object.
---@field public get_position fun(self: game_object): vec3
---Returns the name of the game object.
---@field public get_name fun(self: game_object): string
---Returns the current health of the game object.
---@field public get_health fun(self: game_object): number
---Returns the maximum health of the game object.
---@field public get_max_health fun(self: game_object): number
---Returns the max health modifier of the game object.
---@field public get_max_health_modifier fun(self: game_object): number
---Returns the current power of the game object for the specified power type.  
--- Note: https://wowpedia.fandom.com/wiki/Enum.PowerType
---@field public get_power fun(self: game_object, power_type: number): number
---Returns the maximum power of the game object for the specified power type.  
--- Note: https://wowpedia.fandom.com/wiki/Enum.PowerType
---@field public get_max_power fun(self: game_object, power_type: number): number
---Returns the experience points (XP) of the game object.
---@field public get_xp fun(self: game_object): number
---Returns the maximum experience points (XP) of the game object.
---@field public get_max_xp fun(self: game_object): number
---Returns the total absorb shield of the game object.
---@field public get_total_shield fun(self: game_object): number
---Returns the total incoming heals of the game object.
---@field public get_incoming_heals fun(self: game_object): number
---Returns the incoming heals of the game object from an specific game_object.
---@field public get_incoming_heals_from fun(self: game_object): number
---Returns whether the game object can attack the specified game object.
---@field public can_attack fun(self: game_object, other_game_object: game_object): boolean
---Returns whether the game object is an enemy with the specified game object.
---@field public is_enemy_with fun(self: game_object, other_game_object: game_object): boolean
---Returns whether the game object is a friend with the specified game object.
---@field public is_friend_with fun(self: game_object, other_game_object: game_object): boolean
---Returns whether the game object is moving.
---@field public is_moving fun(self: game_object): boolean
---Returns whether the game object is dashing.
---@field public is_dashing fun(self: game_object): boolean
---Returns the current movement speed of the game object.
---@field public get_movement_speed fun(self: game_object): number
---Returns the maximum movement speed of the game object.
---@field public get_movement_speed_max fun(self: game_object): number
---Returns the maximum swim speed of the game object.
---@field public get_swim_speed_max fun(self: game_object): number
---Returns the maximum flight speed of the game object.
---@field public get_flight_speed_max fun(self: game_object): number
---Returns the auto attack swing speed of the game object.
---@field public get_attack_speed fun(self: game_object): number
---Returns the rotation of the game object.
---@field public get_rotation fun(self: game_object): number
---Returns the direction of the game object.
---@field public get_direction fun(self: game_object): vec3
---Returns the direction of the game object movement manager.
---@field public get_movement_direction fun(self: game_object): vec3
---Returns whether the game object is a pet.
---@field public is_pet fun(self: game_object): boolean
---Returns whether the game object is a minion (alt pets).
---@field public is_minion fun(self: game_object): boolean
---Returns whether the game object is a bag type item.
---@field public is_item_bag fun(self: game_object): boolean
---Returns the stack count of the item in our bag.
---@field public get_item_stack_count fun(self: game_object): number
---Returns the owner of the game object.
---@field public get_owner fun(self: game_object): game_object
---Returns the pet of the game object.
---@field public get_pet fun(self: game_object): game_object
---Returns the target of the game object.
---@field public get_target fun(self: game_object): game_object
---Returns the target of the active spell being cast by the game object.
---@field public get_active_spell_target fun(self: game_object): game_object
---Returns whether the game object is casting a spell.
---@field public is_casting_spell fun(self: game_object): boolean
---Returns the ID of the active spell being cast by the game object.
---@field public get_active_spell_id fun(self: game_object): number
---Returns the start time of the active spell being cast by the game object.
---@field public get_active_spell_cast_start_time fun(self: game_object): number
---Returns the end time of the active spell being cast by the game object.
---@field public get_active_spell_cast_end_time fun(self: game_object): number
---Returns whether the active spell being cast by the game object can be interrupted.
---@field public is_active_spell_interruptable fun(self: game_object): boolean
---Returns whether the game object is currently channeling a spell.
---@field public is_channelling_spell fun(self: game_object): boolean
---Returns the ID of the active channel spell being cast by the game object.
---@field public get_active_channel_spell_id fun(self: game_object): number
---Returns the start time of the active channel spell being cast by the game object.
---@field public get_active_channel_cast_start_time fun(self: game_object): number
---Returns the end time of the active channel spell being cast by the game object.
---@field public get_active_channel_cast_end_time fun(self: game_object): number
---Returns the threat situation from the game_object to another game_object.
---@field public get_threat_situation fun(self: game_object, obj: game_object): threat_table
---Returns a table containing the auras applied to the game object.
---@field public get_auras fun(self: game_object): table<buff>
---Returns a table containing the buffs applied to the game object.
---@field public get_buffs fun(self: game_object): table<buff>
---Returns a table containing the debuffs applied to the game object.
---@field public get_debuffs fun(self: game_object): table<buff>
---Returns a list of equipped items (item_slot_info) of the game object, the format comes in we call item_slot_info, a table that contains game_object ptr of the item and item_slot.
---@field public get_equipped_items fun(self: game_object): table<item_slot_info>
---Returns a table with the item game_object ptr and the slot_id where the item is on the game object equipped items.
---@field public get_item_at_inventory_slot fun(self: game_object, slot:number): item_slot_info
--- Returns whether the game object can be looted.
---@field public can_be_looted fun(self: game_object): boolean
--- Returns whether the game object can be used.
---@field public can_be_used fun(self: game_object): boolean
--- Returns whether the game object can be skinned.
---@field public can_be_skinned fun(self: game_object): boolean
---Returns a table containing the loss of control info for the game object.
---@field public get_loss_of_control_info fun(self: game_object): loss_of_control_info

================
File: _api/menu.lua
================
---@class tree_node
---@field public is_open fun():boolean
---@field public render fun(self:tree_node, header:string, callback:function):nil
---@field public get_widget_bounds fun(self:tree_node):table -- Returns a table with 2 elements, min and max. get_widget_bounds().min is the left border of the widget, and .max is the right border.
---@field public set_open_state fun(self:tree_node, state:boolean):nil
---@class checkbox
---@field public get_state fun():boolean
---@field public get_type fun(self:checkbox)
---@field public set fun(self: checkbox, new_state:boolean):nil
---@field public render fun(self:checkbox, label:string, tooltip:string|nil):nil
---@field public get_widget_bounds fun(self:checkbox):table -- Returns a table with 2 elements, min and max. get_widget_bounds().min is the left border of the widget, and .max is the right border.

---@class key_checkbox
---@field public get_main_checkbox_state fun(self:key_checkbox):boolean
---@field public get_key_code fun(self:key_checkbox):integer
---@field public get_keybind_state fun(self:key_checkbox):integer
---@field public set_toggle_state fun(self:key_checkbox, state:boolean):nil
---@field public set_key fun(self:key_checkbox, key:integer):nil
---@field public set_mode fun(self:key_checkbox, mode:integer):nil
---@field public should_show_on_control_panel fun(self:key_checkbox):boolean
---@field public get_mode fun(self:key_checkbox):integer -- 0 is hold, 1 is toggle, 2 is always
---@field public get_type fun(self:key_checkbox)
---@field public render fun(self:key_checkbox, label:string, tooltip:string|nil):nil

---@class slider_int
---@field public get fun():number
---@field public get_type fun(self:slider_int)
---@field public set fun(self:slider_int, new_value:integer):nil
---@field public render fun(self:slider_int, label:string, tooltip:string|nil):nil
---@field public get_widget_bounds fun(self:slider_int):table -- Returns a table with 2 elements, min and max. get_widget_bounds().min is the left border of the widget, and .max is the right border.

---@class slider_float
---@field public get fun():number
---@field public get_type fun(self:slider_float)
---@field public set fun(self:slider_float, new_value:number):nil
---@field public render fun(self:slider_float, label:string, tooltip:string|nil):nil
---@field public get_widget_bounds fun(self:slider_float):table -- Returns a table with 2 elements, min and max. get_widget_bounds().min is the left border of the widget, and .max is the right border.

---@class combobox
---@field public get fun():number
---@field public get_type fun(self:combobox)
---@field public get_label fun(self:keybind):string -- The menu element needs to be rendered for this to return a string different than ""
---@field public get_widget_bounds fun(self:combobox):table -- Returns a table with 2 elements, min and max. get_widget_bounds().min is the left border of the widget, and .max is the right border.
---@field public set fun(self:combobox, new_value:number):nil
---@field public is_showing_on_control_panel fun(self:combobox):boolean
---@field public set_is_showing_on_control_panel fun(self:combobox):nil
---@field public render fun(self:combobox, label:string, options:table, tooltip:string|nil):nil

---@class combobox_reorderable
---@field public get fun():number
---@field public get_type fun(self:combobox_reorderable)
---@field public render fun(self:combobox_reorderable, label:string, options:table, tooltip:string|nil):nil

---@class keybind
---@field public get_type fun(self:keybind)
---@field public get_label fun(self:keybind):string -- The menu element needs to be rendered for this to return a string different than ""
---@field public get_state fun(self:keybind):boolean
---@field public get_key_code fun(self:keybind):integer
---@field public get_widget_bounds fun(self:keybind):table -- Returns a table with 2 elements, min and max. get_widget_bounds().min is the left border of the widget, and .max is the right border.
---@field public get_toggle_state fun(self:keybind):boolean
---@field public set_key fun(self:keybind, new_key:number):nil
---@field public set_is_showing_on_control_panel fun(self:keybind):nil
---@field public is_showing_on_control_panel fun(self:keybind):boolean
---@field public set_toggle_state fun(self:keybind, new_state:boolean):nil
---@field public render fun(self:keybind, label:string, tooltip:string|nil):nil

---@class button
---@field public get_type fun(self:button)
---@field public is_clicked fun(self:button):boolean
---@field public get_widget_bounds fun(self:button):table -- Returns a table with 2 elements, min and max. get_widget_bounds().min is the left border of the widget, and .max is the right border.
---@field public render fun(self:button, label:string, tooltip:string|nil):nil

---@class text_input
---@field public get_type fun(self:text_input)
---@field public get_text fun(self:text_input):string
---@field public get_widget_bounds fun(self:text_input):table -- Returns a table with 2 elements, min and max. get_widget_bounds().min is the left border of the widget, and .max is the right border.
---@field public get_text_as_number fun(self:text_input):number
---@field public render fun(self:text_input, label:string, tooltip:string|nil):nil
---@field public render_custom fun(self:text_input, label:string, tooltip:string, frame_bg:color, border_color:color, text_selected_bg_col:color, text_color:color, width_offset:number):nil

---@class color_picker
---@field public get fun():color
---@field public get_type fun(self:color_picker)
---@field public get_widget_bounds fun(self:color_picker):table -- Returns a table with 2 elements, min and max. get_widget_bounds().min is the left border of the widget, and .max is the right border.
---@field public render fun(self:color_picker, label:string, tooltip:string|nil):nil

---@class header
---@field public get_type fun(self:header)
---@field public render fun(self:header, label:string, color:color):nil

---@class window
---@field public set_window_cross_round fun(self:window):nil
---@field public set_initial_size fun(self:window, size:vec2):nil
---@field public set_initial_position fun(self:window, pos:vec2):nil
---@field public set_visibility fun(self:window, visibility:boolean):nil
---@field public set_next_widget_width fun(self:window, width:number):nil
---@field public set_next_window_padding fun(self:window, padding:vec2):nil
---@field public set_next_window_min_size fun(self:window, min_size:vec2):nil
---@field public set_next_window_items_spacing fun(self:window, spacing:vec2):nil
---@field public set_next_window_items_inner_spacing fun(self:window, inner_spacing:vec2):nil

---@class window
---@field public get_size fun(self:window):vec2
---@field public get_position fun(self:window):vec2
---@field public get_mouse_pos fun(self:window):vec2
---@field public get_text_size fun(self:window, text:string):vec2
---@field public force_window_size fun(self:window, size:vec2):nil
---@field public get_text_centered_x_pos fun(self:window, text:string):number
---@field public set_current_context_dynamic_drawing_offset fun(self:window, offset:vec2):nil
---@field public get_current_context_dynamic_drawing_offset fun(self:window):vec2
---@field public add_artificial_item_bounds fun(self:window, bounds_start:vec2, bounds_end:vec2):nil

---@class window
---@field public is_being_shown fun(self:window):boolean
---@field public render_tooltip_default fun(self:window, text:string):nil
---@field public is_animation_finished fun(self:window, id:integer):boolean
---@field public is_mouse_button_pressed fun(self:window, button:integer):boolean
---@field public is_mouse_button_clicked fun(self:window, button:integer):boolean
---@field public is_rect_clicked fun(self:window, rect_min:vec2, rect_max:vec2):boolean
---@field public is_window_clicked fun(self:window):boolean
---@field public is_window_hovered fun(self:window):boolean
---@field public is_window_double_clicked fun(self:window):boolean
---@field public stop_forcing_size fun(self:window):nil
---@field public is_rect_pressed fun(self:window, rect_min:vec2, rect_max:vec2):boolean
---@field public is_mouse_hovering_rect fun(self:window, rect_min:vec2, rect_max:vec2):boolean
---@field public is_rect_double_clicked fun(self:window, rect_min:vec2, rect_max:vec2):boolean
---@field public render_tooltip_text_only fun(self:window, text:string, text_color:color):nil
---@field public render_tooltip_custom fun(self:window, text:string, text_color:color, background_color:color, border_color:color, faded_rects_color:color, x_text_offset:number, y_text_offset:number, faded_rects_y_thickness:number, faded_rects_x_thickness:number):nil

---@class window
---@field public render_text fun(self:window, font_id:integer, pos_offset:vec2, col:color, text:string):nil
--note: you can also pass special rect rounding flags after the thickness parameter (up to 4 flags, integers). Check enums to see what these flags mean.
---@field public render_rect fun(self:window, pos_min_offset:vec2, pos_max_offset:vec2, col:color, rounding:number, thickness:number):nil
--note: you can also pass special rect rounding flags after the thickness parameter (up to 4 flags, integers). Check enums to see what these flags mean.
---@field public render_rect_filled fun(self:window, pos_min_offset:vec2, pos_max_offset:vec2, col:color, rounding:number):nil
--note: you can also pass special rect rounding flags after the thickness parameter (up to 4 flags, integers). Check enums to see what these flags mean.
---@field public render_rect_filled_multicolor fun(self:window, pos_min_offset:vec2, pos_max_offset:vec2, col_upr_left:color, col_upr_right:color, col_bot_right:color, col_bot_left:color, rounding:number):nil
---@field public render_circle fun(self:window, center:vec2, radius:number, color:color, thickness:number):nil
---@field public render_circle_filled fun(self:window, center:vec2, radius:number, color:color):nil
---@field public render_bezier_quadratic fun(self:window, p1:vec2, p2:vec2, p3:vec2, color:color, thickness:number, num_segments:integer):nil
---@field public render_bezier_cubic fun(self:window, p1:vec2, p2:vec2, p3:vec2, p4:vec2, color:color, thickness:number, num_segments:integer):nil
---@field public render_triangle fun(self:window, p1:vec2, p2:vec2, p3:vec2, col:color, thickness:number):nil
---@field public render_triangle_filled fun(self:window, p1:vec2, p2:vec2, p3:vec2, col:color):nil
---@field public render_triangle_filled_multi_color fun(self:window, p1:vec2, p2:vec2, p3:vec2, col_1:color, col_2:color, col_3:color):nil
---@field public render_line fun(self:window, p1:vec2, p2:vec2, col:color, thickness:number):nil
--- sets the background of the window (call before begin) to a multi-colored rectangle with the given colors. If this function is called, the color passed to the begin function is ignored.
---@field public set_background_multicolored fun(self:window, top_left_color:color, top_right_color:color, bot_right_color:color, bot_left_color:color)nil
---forces the next window position. Call before begin.
---@field public force_next_begin_window_pos fun(self:window, position:vec2):nil
---stops forcing the next window position 
---@field public stop_forcing_position fun(self:window):nil
---function to avoid console errors when calling set_next_window_padding or spacing
---@field public set_end_called_state fun(self:window):nil

---@class window
---@field public push_font fun(self:window, font_id:integer):nil
---@field public add_menu_element_pos_offset fun(self:window, pos_offset:vec2):nil
---@field public begin_group fun(self:window, begin_func:function):nil
---@field public begin_window_sub_context fun(self:window, offset:vec2, add_flags:boolean, begin_func:function):nil
---@field public set_next_window_close_cross_pos_offset fun(self:window, offset:vec2):nil
---@field public render_text_clipped fun(self:window, rect_start:vec2, rect_end:vec2, text:string):nil
---@field public block_input_capture fun(self:window):nil
---@field public begin_popup fun(self:window, bg_color:color, border_color:color, size:vec2, pos:vec2, is_close_on_release:boolean, is_triggering_from_button:boolean, begin_func:function):boolean
--note: you can also pass special_window_flag_1:integer, special_window_flag_2:integer, special_window_flag_3:integer after the cross_style parameter. Check enums to see what these parameters represent

---@class window
local window = {}

--- Begins rendering the window with various options.
--- @param self window The window object.
--- @param resizing_flag integer The flag for resizing options.
--- @param is_adding_close_cross boolean Whether to add a close cross to the window.
--- @param bg_color color The background color of the window.
--- @param border_color color The border color of the window.
--- @param cross_style integer The style of the close cross.
--- @param begin_func function The function to execute when beginning the window.
--- @return boolean Indicates if the window is open.
--- @overload fun(self: window, resizing_flag: integer, is_adding_close_cross: boolean, bg_color: color, border_color: color, cross_style: integer, special_window_flag_1: integer, begin_func: function): boolean
--- @overload fun(self: window, resizing_flag: integer, is_adding_close_cross: boolean, bg_color: color, border_color: color, cross_style: integer, special_window_flag_1: integer, special_window_flag_2: integer, begin_func: function): boolean
--- @overload fun(self: window, resizing_flag: integer, is_adding_close_cross: boolean, bg_color: color, border_color: color, cross_style: integer, special_window_flag_1: integer, special_window_flag_2: integer, special_window_flag_3: integer, begin_func: function): boolean
function window:begin(resizing_flag, is_adding_close_cross, bg_color, border_color, cross_style, begin_func, ...)
    -- Function implementation
    return false
end

---@class window
---@field public draw_next_dynamic_widget_on_new_line fun(self:window):nil
---@field public draw_next_dynamic_widget_on_same_line fun(self:window, offset_from_start:number|nil, spacing:number|nil):nil
---@field public add_text_on_dynamic_pos fun(self:window, col:color, text:string):nil
---@field public add_separator fun(self:window, right_sep_offset:number, left_sep_offset:number, y_offset:number, width_offset:number, custom_color:color):nil
---@field public animate_widget fun(self:window, animation_id:integer, start_pos:vec2, end_pos:vec2, starting_alpha:integer, max_alpha:integer, alpha_speed:number, movement_speed:number, only_once:boolean):table
---@field public make_loading_circle_animation fun(self:window, id:integer, center:vec2, radius:number, color:color, thickness:number, animation_type:integer)

================
File: .windsurfrules
================
Project Foundation:

* Project Context: FS Rotations is a Lua-based WoW combat rotation automation system. (Further details would be inlined here).
* General Guidelines: Ensure 'repomix-output.txt' is initially loaded. (Further guidelines would be inlined here).

Code Style & Structure:

* Language: Lua.
* Modules: Use `require` for imports. (e.g., `local spell_helper = require("common/utility/spell_helper")`).
* Namespace: Plugin code outside `_api/` *must* be within the `FS` namespace.
* API Access: Use `FS.api` for functions exposed through `core/api.lua`. (e.g., `FS.api.spell_helper:is_spell_queueable(...)`).
* Non-Exported API Modules: Use `require` with local aliases for modules in `_api/common/` not re-exported by `core/api.lua`. (e.g., `local enums = require("common/enums")`).
* Top-Level Tables: Assign top-level tables in the `FS` namespace explicitly. (e.g., `FS.paladin_holy.auras = {}`).
* Code Organization: Organize code into logical modules.
* Programming Paradigm: Prefer functional programming. Avoid OOP unless strictly necessary.
* Modularity & Iteration: Favor iterative development and modular design.

Naming Conventions:

* Variables & Functions: `snake_case` (e.g., `get_unit_health`).
* Class Naming: `PascalCase` (if classes are absolutely necessary).
* File & Directory Naming: `snake_case` (e.g., `health_prediction.lua`, `combat_routines`).
* Module Exports: Prefer named module exports (return a table).

Lua Usage:

* Scope: Always use `local` unless a global is *absolutely* necessary (rare).
* Imports: Use `require()`. Follow rules for accessing module members.
* Documentation Comments: Use LuaDoc style. Include `@return` annotations, even for `nil`. Use specific type annotations.
* Variable Name Exceptions: Avoid single-letter variables except for loop counters (`i`, `j`, `k`).
* Explicit Comparisons: Prefer `x ~= nil` over `if x then`.
* Boolean Values: Use lowercase `true` and `false`.
* Explicit 'self': Always include `self` in method calls.
* Table Creation: Pre-allocate tables when size is known.
* Avoid table.insert in Loops: Do NOT use inside loops with index 1.
* Table Iteration: Use `ipairs()` for arrays, `pairs()` for dictionaries.
* Local Helper Functions: Declare helper functions within a module as `local`.

Error Handling:

* Error Logging: Use `core.log_error()`.
* Assertions: Use `assert()` for critical, "should never happen" conditions.
* Graceful Handling: Use `pcall()` for potential runtime errors.
* Contextual Error Messages: Include detailed information in error messages.

Memory Management:

* Table Allocation: Be mindful of table allocations. Reuse tables.
* Table Reuse in Loops: Reuse a single table.
* Object Pooling: Only use if necessary after discussion and profiling.
* Explicit Garbage Collection: Set variables to `nil` when no longer needed.

Performance Optimization:

* Iteration vs Recursion: Prefer iteration.
* Caching: Cache frequently accessed values locally.
* Loop Optimizations: Avoid unnecessary calculations/API calls *within* loops.
* Profiling: Use API profiling tools (`core.time()`, `core.cpu_ticks()`) *before* optimizing.
* String Concatenation: Use `table.concat()`.
* Metatables: Use with *extreme caution* and thorough profiling.

API Usage:

* API Interaction: *Strictly* use only `_api/` functions. *Never* use native WoW API functions.
* API Access Method: Use `FS.api` where appropriate (as per `core/api.lua`).

Code Consistency & Readability:

* Indentation: Consistent indentation (4 spaces recommended).
* Line Length: 80-100 characters guideline.
* Spacing: Consistent spacing around operators, commas, and function arguments.
* Function Grouping: Group related functions logically within modules.

Constants:

* Definition & Naming: `UPPER_SNAKE_CASE`. Define at top of files or in `constants.lua`.

Git Usage & Commit Conventions:

* Commit Prefixes: `fix:`, `feat:`, `perf:`, `docs:`, `style:`, `refactor:`, `test:`, `chore:`.
* Lowercase Commit Messages:
* Concise Summary Line:
* Descriptive Body: (for non-trivial changes).
* Issue/Ticket References:

Documentation:

* Documentation Style: Use LuaDoc.
* Comment Focus: Explain "why" and "how," not just "what."
* Module Documentation: Document module purpose at the top of each file.

Operational Framework:

A "Memory Bank" system is used. Fundamental principles are defined here.

Memory Bank:

* Status Prefix: Responses begin with `[MEMORY BANK: ACTIVE]` or `[MEMORY BANK: INACTIVE]`.
* Detection: Scan for `memory-bank/` directories.
* Core Files: `activeContext.md`, `productContext.md`, `progress.md`, `decisionLog.md`.
* Missing Files: Inform the user and offer solutions.
* UMB: Review Chat History, gather information and update accordingly to the context.

General Rules:

* `attempt_completion`: Only use when explicitly requested, or for a UMB request with no added instructions.
* Task Completion: After a task, present results/options and ask, "Is there anything else I can help you with?"

================
File: classes/paladin/holy/bootstrap.lua
================
FS.paladin_holy = {}

require("classes/paladin/holy/index")

---@type SpecConfig
return {
    spec_id = 0,
    class_id = 0,
    on_update = FS.paladin_holy.logic.on_update,
    on_render = FS.paladin_holy.drawing.on_render,
    on_render_menu = FS.paladin_holy.menu.on_render_menu,
    on_render_control_panel = FS.paladin_holy.menu.on_render_control_panel
}

================
File: classes/paladin/holy/drawing.lua
================
FS.paladin_holy.drawing = {}

---@type on_render
function FS.paladin_holy.drawing.on_render()
end

================
File: classes/paladin/holy/ids/auras.lua
================
FS.paladin_holy.auras = {
    avenging_crusader = 216331,
    awakening_max = 414193,
    blessed_assurance = 433019,
}

================
File: classes/paladin/holy/ids/index.lua
================
require("classes/paladin/holy/ids/auras")
require("classes/paladin/holy/ids/spells")
require("classes/paladin/holy/ids/talents")

================
File: classes/paladin/holy/ids/spells.lua
================
FS.paladin_holy.spells = {
    avenging_crusader = 216331,
    beacon_of_virtue = 200025,
    blessing_of_the_seasons = 388007,
    consecration = 26573,
    crusader_strike = 35395,
    divine_toll = 375576,
    hammer_of_wrath = 24275,
    holy_arnament = 432459,
    holy_prism = 114165,
    holy_shock = 20473,
    judgment = 275773,
    lay_on_hands = 471195,
    light_of_dawn = 85222,
    shield_of_the_righteous = 415091,
    word_of_glory = 85673,
}

================
File: classes/paladin/holy/ids/talents.lua
================
FS.paladin_holy.talents = {
    after_image = core.spell_book.is_spell_learned(385414),
    ashen_hallow = core.spell_book.is_spell_learned(316958),
    awakening = core.spell_book.is_spell_learned(414193),
    avenging_wrath = core.spell_book.is_spell_learned(31884),
    beacon_of_faith = core.spell_book.is_spell_learned(156910),
    beacon_of_virtue = core.spell_book.is_spell_learned(200025),
    bestow_faith = core.spell_book.is_spell_learned(223306),
    blessed_hammer = core.spell_book.is_spell_learned(204019),
    crusaders_might = core.spell_book.is_spell_learned(196926),
    divine_purpose = core.spell_book.is_spell_learned(223817),
    divine_resonance = core.spell_book.is_spell_learned(384029),
    glimmer_of_light = core.spell_book.is_spell_learned(325966),
    golden_path = core.spell_book.is_spell_learned(377128),
    holy_avenger = core.spell_book.is_spell_learned(105809),
    holy_prism = core.spell_book.is_spell_learned(114165),
    infusion_of_light = core.spell_book.is_spell_learned(53576),
    judgment_of_light = core.spell_book.is_spell_learned(183778),
    lights_hammer = core.spell_book.is_spell_learned(114158),
    maraads = core.spell_book.is_spell_learned(281178),
    righteous_protector = core.spell_book.is_spell_learned(204074),
    rule_of_law = core.spell_book.is_spell_learned(214202),
    sanctified_wrath = core.spell_book.is_spell_learned(53376),
    seal_of_clarity = core.spell_book.is_spell_learned(384810),
    shining_righteousness = core.spell_book.is_spell_learned(414445),
    tyrs_boundless_justice = core.spell_book.is_spell_learned(200652),
    unbreakable_spirit = core.spell_book.is_spell_learned(11415),
}

================
File: classes/paladin/holy/index.lua
================
require("classes/paladin/holy/drawing")
require("classes/paladin/holy/menu")
require("classes/paladin/holy/settings")
require("classes/paladin/holy/variables")
require("classes/paladin/holy/ids/index")
require("classes/paladin/holy/logic/index")

================
File: classes/paladin/holy/logic/index.lua
================
---@type spell_helper
local spell_helper = require("common/utility/spell_helper")

FS.paladin_holy.logic = {}

require("classes/paladin/holy/logic/rotations/index")
require("classes/paladin/holy/logic/spells/index")

---@type on_update
function FS.paladin_holy.logic.on_update()
    if not FS.paladin_holy.settings.is_enabled() then
        return
    end
    if FS.paladin_holy.logic.rotations.avenging_crusader() then
        return
    end
    if FS.paladin_holy.logic.rotations.healing() then
        return
    end
    if FS.paladin_holy.logic.rotations.damage() then
        return
    end
end

================
File: classes/paladin/holy/logic/rotations/avenging_crusader.lua
================
---@return boolean
function FS.paladin_holy.logic.rotations.avenging_crusader()
    if not FS.paladin_holy.variables.avenging_crusader_up() then
        return false
    end
    if FS.paladin_holy.logic.spells.ac_judgment() then
        return true
    end
    if FS.paladin_holy.logic.spells.ac_crusader_strike() then
        return true
    end
    return true
end

================
File: classes/paladin/holy/logic/rotations/damage.lua
================
---@return boolean
function FS.paladin_holy.logic.rotations.damage()
    -- Follow priority system
    -- 1. Judgment
    if FS.paladin_holy.logic.spells.judgment() then
        return true
    end

    -- 2. Crusader Strike
    if FS.paladin_holy.logic.spells.crusader_strike() then
        return true
    end

    -- 3. Hammer of Wrath
    if FS.paladin_holy.logic.spells.hammer_of_wrath() then
        return true
    end

    return false
end

================
File: classes/paladin/holy/logic/rotations/healing.lua
================
---@return boolean
function FS.paladin_holy.logic.rotations.healing()
    -- Healing rotation implementation will be added here
    if FS.paladin_holy.logic.spells.judgment() then
        return true
    end
    if FS.paladin_holy.logic.spells.crusader_strike() then
        return true
    end
    if FS.paladin_holy.logic.spells.hammer_of_wrath() then
        return true
    end
    return false
end

================
File: classes/paladin/holy/logic/rotations/index.lua
================
FS.paladin_holy.logic.rotations = {}

require("classes/paladin/holy/logic/rotations/avenging_crusader")
require("classes/paladin/holy/logic/rotations/healing")
require("classes/paladin/holy/logic/rotations/damage")

================
File: classes/paladin/holy/logic/spells/crusader_strike.lua
================
---@return boolean
function FS.paladin_holy.logic.spells.crusader_strike()
    local target = FS.variables.enemy_target()
    if not target then
        return false
    end
    if not FS.api.spell_helper:is_spell_queueable(FS.paladin_holy.spells.crusader_strike, FS.variables.me, target, false, false) then
        return false
    end
    FS.api.spell_queue:queue_spell_target(FS.paladin_holy.spells.crusader_strike, target, 1)
    return true
end

---@return boolean
function FS.paladin_holy.logic.spells.ac_crusader_strike()
    if not FS.paladin_holy.variables.blessed_assurance_up() then
        return false
    end
    local target = FS.variables.enemy_target()
    if not target then
        return false
    end
    if not FS.api.spell_helper:is_spell_queueable(FS.paladin_holy.spells.crusader_strike, FS.variables.me, target, false, false) then
        return false
    end
    FS.api.spell_queue:queue_spell_target(FS.paladin_holy.spells.crusader_strike, target, 1)
    return true
end

================
File: classes/paladin/holy/logic/spells/hammer_of_wrath.lua
================
---@return boolean
function FS.paladin_holy.logic.spells.hammer_of_wrath()
    -- Get valid target
    local target = FS.variables.enemy_target()
    if not target then
        return false
    end

    -- Check spell can be cast
    if not FS.api.spell_helper:is_spell_queueable(FS.paladin_holy.spells.hammer_of_wrath, FS.variables.me, target, false, false) then
        return false
    end

    -- Queue spell cast
    FS.api.spell_queue:queue_spell_target(FS.paladin_holy.spells.hammer_of_wrath, target, 1)
    return true
end

================
File: classes/paladin/holy/logic/spells/index.lua
================
FS.paladin_holy.logic.spells = {}

require("classes/paladin/holy/logic/spells/crusader_strike")
require("classes/paladin/holy/logic/spells/judgment")
require("classes/paladin/holy/logic/spells/hammer_of_wrath")

================
File: classes/paladin/holy/logic/spells/judgment.lua
================
---@return boolean
function FS.paladin_holy.logic.spells.judgment()
    local target = FS.variables.enemy_target()
    if not target then
        return false
    end

    -- Don't cast if awakening_max buff is active with more than 4 seconds remaining
    if FS.paladin_holy.variables.awakening_max_remains() > 4000 then
        return false
    end

    if not FS.api.spell_helper:is_spell_queueable(FS.paladin_holy.spells.judgment, FS.variables.me, target, false, false) then
        return false
    end
    FS.api.spell_queue:queue_spell_target(FS.paladin_holy.spells.judgment, target, 1)
    return true
end

---@return boolean
function FS.paladin_holy.logic.spells.ac_judgment()
    local target = FS.variables.enemy_target()
    if not target then
        return false
    end
    if not FS.api.spell_helper:is_spell_queueable(FS.paladin_holy.spells.judgment, FS.variables.me, target, false, false) then
        return false
    end
    FS.api.spell_queue:queue_spell_target(FS.paladin_holy.spells.judgment, target, 1)
    return true
end

================
File: classes/paladin/holy/menu.lua
================
local tag = "paladin_holy_"
local name = "Holy Paladin"

FS.paladin_holy.menu = {
    main_tree = FS.menu.tree_node(),
    enable_toggle = FS.menu.keybind(999, false, tag .. "enable_toggle"),
}

---@type on_render_menu
function FS.paladin_holy.menu.on_render_menu()
    FS.paladin_holy.menu.main_tree:render("Holy Paladin", function()
        FS.paladin_holy.menu.enable_toggle:render("Enable Script")
    end)
end

---@type on_render_control_panel
function FS.paladin_holy.menu.on_render_control_panel(control_panel)
    FS.menu.insert_toggle(control_panel, FS.paladin_holy.menu.enable_toggle, name)
    return control_panel
end

================
File: classes/paladin/holy/settings.lua
================
FS.paladin_holy.settings = {
    ---@type fun(): boolean
    is_enabled = function() return FS.settings.is_toggle_enabled(FS.paladin_holy.menu.enable_toggle) end,
}

================
File: classes/paladin/holy/variables.lua
================
---@type enums
local enums = require("common/enums")

FS.paladin_holy.variables = {
    holy_power = function() return FS.variables.resource(enums.power_type.HOLYPOWER) end,
    avenging_crusader_up = function() return FS.variables.buff_up(FS.paladin_holy.auras.avenging_crusader) end,
    awakening_max_remains = function() return FS.variables.buff_remains(FS.paladin_holy.auras.awakening_max) end,
    blessed_assurance_up = function() return FS.variables.buff_up(FS.paladin_holy.auras.blessed_assurance) end
}

================
File: core/api.lua
================
---@type buff_manager
local buff_manager = require("common/modules/buff_manager")
---@type combat_forecast
local combat_forecast = require("common/modules/combat_forecast")
---@type health_prediction
local health_prediction = require("common/modules/health_prediction")
---@type spell_helper
local spell_helper = require("common/utility/spell_helper")
---@type spell_queue
local spell_queue = require("common/modules/spell_queue")
---@type unit_helper
local unit_helper = require("common/utility/unit_helper")
---@type target_selector
local target_selector = require("common/modules/target_selector")
---@type plugin_helper
local plugin_helper = require("common/utility/plugin_helper")
---@type control_panel_helper
local control_panel_helper = require("common/utility/control_panel_helper")
---@type key_helper
local key_helper = require("common/utility/key_helper")

FS.api = {
    buff_manager = buff_manager,
    combat_forecast = combat_forecast,
    health_prediction = health_prediction,
    spell_helper = spell_helper,
    spell_queue = spell_queue,
    unit_helper = unit_helper,
    target_selector = target_selector,
    plugin_helper = plugin_helper,
    control_panel_helper = control_panel_helper,
    key_helper = key_helper,
}

================
File: core/humanizer.lua
================
FS.humanizer = {
    next_run = 0
}

function FS.humanizer.can_run()
    return core:game_time() >= FS.humanizer.next_run
end

function FS.humanizer.update()
    local latency = core.get_ping() * 1.5
    local min_delay = FS.settings.min_delay() + latency
    local max_delay = FS.settings.max_delay() + latency
    FS.humanizer.next_run = math.random(min_delay, max_delay) + core:game_time()
end

================
File: core/index.lua
================
require("core/api")
require("core/humanizer")
require("core/menu")
require("core/settings")
require("core/variables")

FS.modules = {}

================
File: core/menu.lua
================
---@type control_panel_helper
local control_panel_helper = require("common/utility/control_panel_helper")
---@type key_helper
local key_helper = require("common/utility/key_helper")

local tag = "fs_rotations_core_"

FS.menu = {
    main_tree = core.menu.tree_node(),
    enable_script_check = core.menu.checkbox(false, tag .. "enable_script_check"),
    --enable_bitch_mode = core.menu.keybind(999, false, tag .. "enable_bitch_mode"),
    --enable_cd_manager = core.menu.keybind(999, false, tag .. "enable_cd_manager"),
    humanizer = core.menu.header(),
    min_delay = core.menu.slider_int(0, 1500, 125, tag .. "min_delay"),
    max_delay = core.menu.slider_int(1, 1500, 250, tag .. "max_delay"),
}

--- Inserts a toggle into the control panel table.
---@param control_panel table
---@param keybind keybind
---@param name string
function FS.menu.insert_toggle(control_panel, keybind, name)
    control_panel_helper:insert_toggle(control_panel,
        {
            name = "[FS " .. name .. "] Enable (" ..
                key_helper:get_key_name(keybind:get_key_code()) .. ") ",
            keybind = keybind
        })
end

--- Registers the menu for interaction.
function FS.menu.register_menu()
    return core.menu.register_menu()
end

--- Creates a new tree node instance
---@return tree_node
function FS.menu.tree_node()
    return core.menu.tree_node()
end

--- Creates a new checkbox instance.
---@param default_state boolean The default state of the checkbox.
---@param id string The unique identifier for the checkbox.
---@return checkbox
function FS.menu.checkbox(default_state, id)
    return core.menu.checkbox(default_state, "fs_rotations_" .. id)
end

--- Creates a new checkbox instance.
---@param default_key integer The default state of the checkbox.
---@param initial_toggle_state boolean The initial toggle state of the keybind
---@param default_state boolean The default state of the checkbox
---@param show_in_binds boolean The default show in binds state of the checkbox
---@param default_mode_state integer The default show in binds state of the checkbox  -> 0 is hold, 1 is toggle, 2 is always
---@param id string The unique identifier for the checkbox.
---@return key_checkbox
function FS.menu.key_checkbox(default_key, initial_toggle_state, default_state, show_in_binds, default_mode_state, id)
    return core.menu.key_checkbox(default_key, initial_toggle_state, default_state, show_in_binds, default_mode_state,
        "fs_rotations_" .. id)
end

--- Creates a new slider with integer values.
---@param min_value number The minimum value of the slider.
---@param max_value number The maximum value of the slider.
---@param default_value number The default value of the slider.
---@param id string The unique identifier for the slider.
---@return slider_int
function FS.menu.slider_int(min_value, max_value, default_value, id)
    return core.menu.slider_int(min_value, max_value, default_value, "fs_rotations_" .. id)
end

--- Creates a new slider with floating-point values.
---@param min_value number The minimum value of the slider.
---@param max_value number The maximum value of the slider.
---@param default_value number The default value of the slider.
---@param id string The unique identifier for the slider.
---@return slider_float
function FS.menu.slider_float(min_value, max_value, default_value, id)
    return core.menu.slider_float(min_value, max_value, default_value, "fs_rotations_" .. id)
end

--- Creates a new combobox.
---@param default_index number The default index of the combobox options (1-based).
---@param id string The unique identifier for the combobox.
---@return combobox
function FS.menu.combobox(default_index, id)
    return core.menu.combobox(default_index, "fs_rotations_" .. id)
end

--- Creates a new combobox_reorderable.
---@param default_index number The default index of the combobox options (1-based).
---@param id string The unique identifier for the combobox.
---@return combobox_reorderable
function FS.menu.combobox_reorderable(default_index, id)
    return core.menu.combobox_reorderable(default_index, "fs_rotations_" .. id)
end

--- Creates a new keybind.
---@param default_value number The default value for the keybind.
---@param initial_toggle_state boolean The initial toggle state for the keybind.
---@param id string The unique identifier for the keybind.
---@return keybind
function FS.menu.keybind(default_value, initial_toggle_state, id)
    return core.menu.keybind(default_value, initial_toggle_state, "fs_rotations_" .. id)
end

--- Creates a new button.
---@return button
---@param id string The unique identifier for the button.
function FS.menu.button(id)
    return core.menu.button("fs_rotations_" .. id)
end

--- Creates a new color picker.
---@param default_color color The default color value.
---@param id string The unique identifier for the color picker.
---@return color_picker
function FS.menu.colorpicker(default_color, id)
    return core.menu.colorpicker(default_color, "fs_rotations_" .. id)
end

--- Creates a new header
---@return header
function FS.menu.header()
    return core.menu.header()
end

--- Creates a new text input
---@return text_input
function FS.menu.text_input(id)
    return core.menu.text_input("fs_rotations_" .. id)
end

--- Creates a new window
---@return window
function FS.menu.window(window_id)
    return core.menu.window("fs_rotations_" .. window_id)
end

================
File: core/modules/heal_engine/get_damage_taken_per_second.lua
================
local profiler = require("common/modules/profiler")

-- Store last DPS values to detect significant changes
FS.modules.heal_engine.last_dps_values = FS.modules.heal_engine.last_dps_values or {}

---Calculate the damage taken per second for a unit over a specified time period
---@param unit game_object The unit to calculate damage for
---@param last_x_seconds number The number of seconds to look back
---@return number The calculated damage per second
function FS.modules.heal_engine.get_damage_taken_per_second(unit, last_x_seconds)
    local current_time = core.game_time()
    local values = FS.modules.heal_engine.health_values[unit] or {}
    
    -- Early exit if we don't have enough values
    if #values < 2 then
        return 0
    end

    -- Start profiling
    profiler.start("get_damage_taken_per_second")

    -- Find first valid index (binary search for better performance)
    local start_time = current_time - last_x_seconds * 1000
    local left, right = 1, #values
    local first_valid_index = right + 1

    while left <= right do
        local mid = math.floor((left + right) / 2)
        if values[mid].time >= start_time then
            first_valid_index = mid
            right = mid - 1
        else
            left = mid + 1
        end
    end

    -- Early exit if we don't have enough valid values
    if first_valid_index >= #values then
        profiler.stop("get_damage_taken_per_second")
        return 0
    end

    -- Single pass for damage calculation
    local first_time = values[first_valid_index].time
    local last_time = values[#values].time
    local prev_health = values[first_valid_index].health
    local total_damage = 0
    local damage_events = 0
    local significant_damage = false

    for i = first_valid_index + 1, #values do
        local current_health = values[i].health
        local health_diff = prev_health - current_health
        
        if health_diff > 0 then
            total_damage = total_damage + health_diff
            damage_events = damage_events + 1
            if health_diff > unit:get_max_health() * 0.01 then
                significant_damage = true
            end
        end
        prev_health = current_health
    end

    -- Calculate DPS using the actual time span
    local time_span = (last_time - first_time) / 1000 -- Convert to seconds
    if time_span <= 0 then
        profiler.stop("get_damage_taken_per_second")
        return 0
    end
    
    local dps = total_damage / time_span

    -- Only log if debug logging is enabled and we detected significant damage AND DPS changed significantly
    if FS.modules.heal_engine.settings.logging.is_debug_enabled() and
       FS.modules.heal_engine.settings.logging.dps.should_show_windows() then
        local unit_key = tostring(unit) .. "_" .. last_x_seconds
        local last_dps = FS.modules.heal_engine.last_dps_values[unit_key] or 0
        local dps_change = math.abs(dps - last_dps)
        local dps_change_threshold = unit:get_max_health() * FS.modules.heal_engine.settings.logging.dps.get_threshold()

        if (last_x_seconds == 15 and significant_damage) or 
           (significant_damage and dps_change > dps_change_threshold) then
            core.log(string.format("DPS (%ds): %.0f damage over %.1f seconds = %.0f DPS (%d hits)", 
                last_x_seconds, total_damage, time_span, dps, damage_events))
            FS.modules.heal_engine.last_dps_values[unit_key] = dps
        end
    end

    profiler.stop("get_damage_taken_per_second")
    return dps
end

================
File: core/modules/heal_engine/index.lua
================
---@class HealthValue
---@field public health number
---@field public max_health number
---@field public health_percentage number
---@field public time number

-- Initialize heal engine module
FS.modules.heal_engine = {
    is_in_combat = false,
    ---@type game_object[]
    units = {},
    ---@type game_object[]
    tanks = {},
    ---@type game_object[]
    healers = {},
    ---@type game_object[]
    damagers = {},
    ---@type table<game_object, { health: number, max_health: number, health_percentage: number, time: number }[]>
    health_values = {},
    ---@type table<game_object, { health: number, max_health: number, health_percentage: number, time: number }>
    current_health_values = {},
    ---@type table<game_object, number>
    damage_taken_per_second = {},
    ---@type table<game_object, number>
    damage_taken_per_second_last_5_seconds = {},
    ---@type table<game_object, number>
    damage_taken_per_second_last_10_seconds = {},
    ---@type table<game_object, number>
    damage_taken_per_second_last_15_seconds = {},
    ---@type table<game_object, number>
    last_dps_values = {},
    ---@type table<game_object, number>
    fight_start_health = {},
    ---@type table<game_object, number>
    fight_total_damage = {},
    ---@type number
    fight_start_time = nil,
    ---@type table<game_object, {last_update: number, values: table<number, number>}>
    dps_cache = {} -- Add cache table
}

-- Load module files
require("core/modules/heal_engine/menu")
require("core/modules/heal_engine/settings")
require("core/modules/heal_engine/start")
require("core/modules/heal_engine/reset")
require("core/modules/heal_engine/get_damage_taken_per_second")
require("core/modules/heal_engine/on_update")

-- Export module interface
---@type ModuleConfig
return {
    on_update = FS.modules.heal_engine.on_update,
    on_fast_update = FS.modules.heal_engine.on_fast_update,
    on_render_menu = FS.modules.heal_engine.menu.on_render_menu
}

================
File: core/modules/heal_engine/menu.lua
================
local tag = "heal_engine_"
local name = "Heal Engine"

---@type color
local color = require("common/color")

FS.modules.heal_engine.menu = {
    main_tree = FS.menu.tree_node(),
    
    -- Logging settings
    logging = {
        tree = FS.menu.tree_node(),
        enable_debug = FS.menu.checkbox(false, tag .. "enable_debug"),
        health = {
            tree = FS.menu.tree_node(),
            threshold = FS.menu.slider_float(0.01, 0.1, 0.01, tag .. "log_health_threshold"),
            show_cleanup = FS.menu.checkbox(true, tag .. "log_cleanup"),
        },
        dps = {
            tree = FS.menu.tree_node(),
            threshold = FS.menu.slider_float(0.02, 0.1, 0.02, tag .. "log_dps_threshold"),
            show_fight = FS.menu.checkbox(true, tag .. "log_fight_dps"),
            show_windows = FS.menu.checkbox(true, tag .. "log_window_dps"),
        }
    },
    
    -- DPS tracking settings
    tracking = {
        tree = FS.menu.tree_node(),
        windows = {
            tree = FS.menu.tree_node(),
            enable_1s = FS.menu.checkbox(true, tag .. "enable_1s_window"),
            enable_5s = FS.menu.checkbox(true, tag .. "enable_5s_window"),
            enable_10s = FS.menu.checkbox(true, tag .. "enable_10s_window"),
            enable_15s = FS.menu.checkbox(true, tag .. "enable_15s_window"),
        }
    }
}

-- Render sub-menus
local function render_health_logging()
    FS.modules.heal_engine.menu.logging.health.tree:render("Health Changes", function()
        FS.modules.heal_engine.menu.logging.health.threshold:render("Threshold (%)", 
            "Only log health changes greater than this % of max health")
        FS.modules.heal_engine.menu.logging.health.show_cleanup:render("Show Cleanup Operations", 
            "Log when old health values are cleaned up")
    end)
end

local function render_dps_logging()
    FS.modules.heal_engine.menu.logging.dps.tree:render("DPS Updates", function()
        FS.modules.heal_engine.menu.logging.dps.threshold:render("Threshold (%)",
            "Only log DPS changes greater than this % of max health per second")
        FS.modules.heal_engine.menu.logging.dps.show_fight:render("Show Fight-Wide DPS",
            "Log total fight damage and DPS")
        FS.modules.heal_engine.menu.logging.dps.show_windows:render("Show Window DPS",
            "Log DPS for configured time windows")
    end)
end

local function render_dps_windows()
    FS.modules.heal_engine.menu.tracking.windows.tree:render("Time Windows", function()
        FS.modules.heal_engine.menu.tracking.windows.enable_1s:render("1 Second Window",
            "Track damage over the last 1 second")
        FS.modules.heal_engine.menu.tracking.windows.enable_5s:render("5 Second Window",
            "Track damage over the last 5 seconds")
        FS.modules.heal_engine.menu.tracking.windows.enable_10s:render("10 Second Window",
            "Track damage over the last 10 seconds")
        FS.modules.heal_engine.menu.tracking.windows.enable_15s:render("15 Second Window",
            "Track damage over the last 15 seconds")
    end)
end

---@type on_render_menu
function FS.modules.heal_engine.menu.on_render_menu()
    FS.modules.heal_engine.menu.main_tree:render(name, function()
        -- Logging settings
        FS.modules.heal_engine.menu.logging.tree:render("Logging", function()
            FS.modules.heal_engine.menu.logging.enable_debug:render("Enable Debug Logging",
                "Show detailed debug information")
            render_health_logging()
            render_dps_logging()
        end)
        
        -- DPS tracking settings
        FS.modules.heal_engine.menu.tracking.tree:render("DPS Tracking", function()
            render_dps_windows()
        end)
    end)
end

================
File: core/modules/heal_engine/on_update.lua
================
function FS.modules.heal_engine.on_fast_update()
    if not FS.modules.heal_engine.is_in_combat then
        return
    end

    local current_time = core.game_time()

    -- Update health values for all units
    for _, unit in pairs(FS.modules.heal_engine.units) do
        local stored_values = FS.modules.heal_engine.health_values[unit] or {}
        local last_value = #stored_values > 0 and stored_values[#stored_values] or nil
        local current_health = unit:get_health()
        local current_shield = unit:get_total_shield() or 0
        local total_health = current_health + current_shield

        -- Initialize fight-wide tracking if needed
        if not FS.modules.heal_engine.fight_start_time then
            FS.modules.heal_engine.fight_start_time = current_time
            FS.modules.heal_engine.fight_start_health[unit] = total_health
            FS.modules.heal_engine.fight_total_damage[unit] = 0
        end

        -- Only store if health changed or enough time passed (250ms)
        local should_store = not last_value
        if last_value then
            local health_changed = math.abs(last_value.health - total_health) > 0.01
            local time_passed = current_time - last_value.time >= 250
            should_store = health_changed or time_passed

            -- Track fight-wide damage
            if health_changed and last_value.health > total_health then
                local damage = last_value.health - total_health
                FS.modules.heal_engine.fight_total_damage[unit] = (FS.modules.heal_engine.fight_total_damage[unit] or 0) +
                damage

                -- Log fight-wide DPS if enabled and significant damage occurred
                if FS.modules.heal_engine.settings.logging.dps.should_show_fight() and
                    FS.modules.heal_engine.settings.logging.is_debug_enabled() and
                    damage > unit:get_max_health() * FS.modules.heal_engine.settings.logging.dps.get_threshold() then
                    local fight_duration = (current_time - FS.modules.heal_engine.fight_start_time) / 1000
                    local fight_dps = FS.modules.heal_engine.fight_total_damage[unit] / fight_duration
                    core.log(string.format("Fight DPS: %.0f damage over %.1fs = %.0f DPS",
                        FS.modules.heal_engine.fight_total_damage[unit], fight_duration, fight_dps))
                end
            end

            -- Only log significant health changes if enabled
            if FS.modules.heal_engine.settings.logging.is_debug_enabled() and
                health_changed and
                math.abs(last_value.health - total_health) > unit:get_max_health() * FS.modules.heal_engine.settings.logging.health.get_threshold() then
                core.log(string.format("Health change for %s: %.0f -> %.0f (diff: %.0f)",
                    unit:get_name(), last_value.health, total_health,
                    total_health - last_value.health))
            end
        end

        if should_store then
            local new_value = {
                health = total_health,
                max_health = unit:get_max_health(),
                health_percentage = total_health / unit:get_max_health(),
                time = current_time
            }

            table.insert(stored_values, new_value)
            FS.modules.heal_engine.current_health_values[unit] = new_value
        end

        -- Only clean up old values every 5 seconds to avoid excessive processing
        if current_time % 5000 < 100 then
            local valid_values = {}
            local removed_count = 0
            for _, value in ipairs(stored_values) do
                if current_time - value.time < 15000 then
                    table.insert(valid_values, value)
                else
                    removed_count = removed_count + 1
                end
            end

            if FS.modules.heal_engine.settings.logging.health.should_show_cleanup() and
                FS.modules.heal_engine.settings.logging.is_debug_enabled() and
                removed_count > 0 then
                core.log(string.format("Cleaned up %d old values for %s", removed_count, unit:get_name()))
            end

            stored_values = valid_values
        end

        FS.modules.heal_engine.health_values[unit] = stored_values
    end
end

-- Track last DPS update time
FS.modules.heal_engine.last_dps_update = FS.modules.heal_engine.last_dps_update or 0

function FS.modules.heal_engine.on_update()
    local current_time = core.game_time()
    local is_in_combat = FS.variables.me:is_in_combat()

    if is_in_combat and not FS.modules.heal_engine.is_in_combat then
        FS.modules.heal_engine.is_in_combat = true
        FS.modules.heal_engine.start()
        if FS.modules.heal_engine.settings.logging.is_debug_enabled() then
            core.log("Entered combat - starting heal engine")
        end
    elseif not is_in_combat and FS.modules.heal_engine.is_in_combat then
        -- Log final fight DPS before resetting
        if FS.modules.heal_engine.fight_start_time and
            FS.modules.heal_engine.settings.logging.dps.should_show_fight() and
            FS.modules.heal_engine.settings.logging.is_debug_enabled() then
            local fight_duration = (current_time - FS.modules.heal_engine.fight_start_time) / 1000
            for _, unit in pairs(FS.modules.heal_engine.units) do
                local total_damage = FS.modules.heal_engine.fight_total_damage[unit] or 0
                if total_damage > 0 then
                    local fight_dps = total_damage / fight_duration
                    core.log(string.format("Final Fight Stats: %.0f total damage over %.1fs = %.0f average DPS",
                        total_damage, fight_duration, fight_dps))
                end
            end
        end

        FS.modules.heal_engine.is_in_combat = false
        FS.modules.heal_engine.reset()
        if FS.modules.heal_engine.settings.logging.is_debug_enabled() then
            core.log("Left combat - resetting heal engine")
        end
        -- Clear DPS history when leaving combat
        FS.modules.heal_engine.last_dps_values = {}
        FS.modules.heal_engine.last_dps_update = 0
    end

    if FS.modules.heal_engine.is_in_combat then
        -- Only update DPS every 500ms to reduce spam
        if current_time - FS.modules.heal_engine.last_dps_update >= 500 then
            FS.modules.heal_engine.last_dps_update = current_time

            for _, unit in pairs(FS.modules.heal_engine.units) do
                -- Calculate DPS for enabled windows
                if FS.modules.heal_engine.settings.tracking.windows.is_1s_enabled() then
                    FS.modules.heal_engine.damage_taken_per_second[unit] =
                        FS.modules.heal_engine.get_damage_taken_per_second(unit, 1)
                end
                if FS.modules.heal_engine.settings.tracking.windows.is_5s_enabled() then
                    FS.modules.heal_engine.damage_taken_per_second_last_5_seconds[unit] =
                        FS.modules.heal_engine.get_damage_taken_per_second(unit, 5)
                end
                if FS.modules.heal_engine.settings.tracking.windows.is_10s_enabled() then
                    FS.modules.heal_engine.damage_taken_per_second_last_10_seconds[unit] =
                        FS.modules.heal_engine.get_damage_taken_per_second(unit, 10)
                end
                if FS.modules.heal_engine.settings.tracking.windows.is_15s_enabled() then
                    FS.modules.heal_engine.damage_taken_per_second_last_15_seconds[unit] =
                        FS.modules.heal_engine.get_damage_taken_per_second(unit, 15)
                end
            end
        end
    end
end

================
File: core/modules/heal_engine/reset.lua
================
function FS.modules.heal_engine.reset()
    FS.modules.heal_engine.units = {}
    FS.modules.heal_engine.tanks = {}
    FS.modules.heal_engine.healers = {}
    FS.modules.heal_engine.damagers = {}
    FS.modules.heal_engine.current_health_values = {}
    FS.modules.heal_engine.health_values = {}
    FS.modules.heal_engine.damage_taken_per_second = {}
    FS.modules.heal_engine.damage_taken_per_second_last_5_seconds = {}
    FS.modules.heal_engine.damage_taken_per_second_last_10_seconds = {}
    FS.modules.heal_engine.damage_taken_per_second_last_15_seconds = {}
    FS.modules.heal_engine.dps_cache = {}
    FS.modules.heal_engine.last_dps_values = {}
    -- Fight-wide DPS tracking
    FS.modules.heal_engine.fight_start_time = nil
    FS.modules.heal_engine.fight_start_health = {}
    FS.modules.heal_engine.fight_total_damage = {}
end

================
File: core/modules/heal_engine/settings.lua
================
FS.modules.heal_engine.settings = {
    logging = {
        ---@type fun(): boolean
        is_debug_enabled = function() return FS.modules.heal_engine.menu.logging.enable_debug:get_state() end,
        
        health = {
            ---@type fun(): number
            get_threshold = function() return FS.modules.heal_engine.menu.logging.health.threshold:get() end,
            ---@type fun(): boolean
            should_show_cleanup = function() return FS.modules.heal_engine.menu.logging.health.show_cleanup:get_state() end,
        },
        
        dps = {
            ---@type fun(): number
            get_threshold = function() return FS.modules.heal_engine.menu.logging.dps.threshold:get() end,
            ---@type fun(): boolean
            should_show_fight = function() return FS.modules.heal_engine.menu.logging.dps.show_fight:get_state() end,
            ---@type fun(): boolean
            should_show_windows = function() return FS.modules.heal_engine.menu.logging.dps.show_windows:get_state() end,
        }
    },
    
    tracking = {
        windows = {
            ---@type fun(): boolean
            is_1s_enabled = function() return FS.modules.heal_engine.menu.tracking.windows.enable_1s:get_state() end,
            ---@type fun(): boolean
            is_5s_enabled = function() return FS.modules.heal_engine.menu.tracking.windows.enable_5s:get_state() end,
            ---@type fun(): boolean
            is_10s_enabled = function() return FS.modules.heal_engine.menu.tracking.windows.enable_10s:get_state() end,
            ---@type fun(): boolean
            is_15s_enabled = function() return FS.modules.heal_engine.menu.tracking.windows.enable_15s:get_state() end,
        }
    }
}

================
File: core/modules/heal_engine/start.lua
================
function FS.modules.heal_engine.start()
    FS.modules.heal_engine.reset()
    local units = core.object_manager.get_all_objects()

    local function addUnitToTables(unit)
        table.insert(FS.modules.heal_engine.units, unit)
        if FS.api.unit_helper:is_tank(unit) then
            table.insert(FS.modules.heal_engine.tanks, unit)
        elseif FS.api.unit_helper:is_healer(unit) then
            table.insert(FS.modules.heal_engine.healers, unit)
        else
            table.insert(FS.modules.heal_engine.damagers, unit)
        end
    end

    for _, v in pairs(units) do
        local isValid = v:is_valid()
        local isPlayerOrPet = v:is_player() or v:get_npc_id() == 210759
        local isVisible = v:is_visible()
        local isPartyMember = v:is_party_member()
        local isNotMe = v ~= FS.variables.me

        if isValid and isPlayerOrPet and isVisible and isPartyMember and isNotMe then
            addUnitToTables(v)
        end
    end

    addUnitToTables(FS.variables.me)

    core.log("started")
    core.log(tostring(#FS.modules.heal_engine.units))
end

================
File: core/settings.lua
================
---@type plugin_helper
local plugin_helper = require("common/utility/plugin_helper")

FS.settings = {
    ---@type fun(): boolean
    is_enabled = function() return FS.menu.enable_script_check:get_state() end,
    ---@type fun(): integer
    min_delay = function() return FS.menu.min_delay:get() end,
    ---@type fun(): integer
    max_delay = function() return FS.menu.max_delay:get() end,
}

---@param keybind keybind
---@return boolean
function FS.settings.is_toggle_enabled(keybind)
    return plugin_helper:is_toggle_enabled(keybind)
end

================
File: core/variables.lua
================
---@diagnostic disable: missing-fields

---@type enums
local enums = require("common/enums")
---@type buff_manager
local buff_manager = require("common/modules/buff_manager")

FS.variables = {
    ---@type game_object
    me = core.object_manager.get_local_player(),
    ---@type fun(): game_object?
    target = function() return FS.variables.me:get_target() end,
    ---@type fun(): game_object?
    enemy_target = function() return FS.variables.is_valid_enemy_target() and FS.variables.me:get_target() or nil end,
    is_valid_enemy_target = function()
        local target = FS.variables.target()
        if not target then return false end
        if not target:is_valid() then return false end
        if target:is_dead() then return false end
        if not FS.variables.me:can_attack(target) then return false end
        return true
    end,
}

---@param spell_id number
---@return boolean
function FS.variables.buff_up(spell_id)
    return buff_manager:get_buff_data(FS.variables.me, { spell_id }).is_active
end

---@param spell_id number
---@return number
function FS.variables.buff_remains(spell_id)
    return buff_manager:get_buff_data(FS.variables.me, { spell_id }).remaining
end

---@param power_type number
---@return number
function FS.variables.resource(power_type)
    return FS.variables.me:get_power(power_type)
end

================
File: entry/callbacks/index.lua
================
require("entry/callbacks/on_render_control_panel")
require("entry/callbacks/on_render_menu")
require("entry/callbacks/on_render")
require("entry/callbacks/on_update")

================
File: entry/callbacks/on_render_control_panel.lua
================
---@alias on_render_control_panel fun(control_panel: table): table

---@type on_render_control_panel
function FS.entry_helper.on_render_control_panel(control_panel)
    local control_panel_elements = control_panel or {}
    if FS.spec_config.on_render_control_panel then
        control_panel_elements = FS.spec_config.on_render_control_panel(control_panel_elements)
    end
    return control_panel_elements
end

================
File: entry/callbacks/on_render_menu.lua
================
---@type color
local color = require("common/color")

---@alias on_render_menu fun()

---@type on_render_menu
function FS.entry_helper.on_render_menu()
    FS.menu.main_tree:render("FS Rotations", function()
        FS.menu.enable_script_check:render("Enable Script")
        if not FS.settings.is_enabled() then return end
        --FS.menu.enable_bitch_mode:render("Enable BitchMode", "In BitchMode you'll get humanized AF.")
        --FS.menu.enable_cd_manager:render("Enable CD Manager",
        --    "CD Manager automatically pulls CDs on certain encounters.")
        FS.menu.humanizer:render("Humanizer", color.white())
        FS.menu.min_delay:render("Min delay", "Min delay until next run.")
        FS.menu.max_delay:render("Max delay", "Min delay until next run.")

        for _, module in pairs(FS.modules) do
            if module.on_render_menu then
                module.on_render_menu()
            end
        end
        if FS.spec_config.on_render_menu then
            FS.spec_config.on_render_menu()
        end
    end)
end

================
File: entry/callbacks/on_render.lua
================
---@alias on_render fun()

---@type on_render
function FS.entry_helper.on_render()
end

================
File: entry/callbacks/on_update.lua
================
---@alias on_update fun()

---@type on_update
function FS.entry_helper.on_update()
    if not FS.settings.is_enabled() then
        return
    end
    for _, module in pairs(FS.modules) do
        if module.on_fast_update then
            module.on_fast_update()
        end
    end
    if not FS.humanizer.can_run() then
        return
    end
    FS.variables.me = core.object_manager.get_local_player()
    FS.humanizer.update()
    for _, module in pairs(FS.modules) do
        if module.on_update then
            module.on_update()
        end
    end
    if FS.spec_config.on_update then
        FS.spec_config.on_update()
    end
end

================
File: entry/check_spec.lua
================
---@type enums
local enums = require("common/enums")

---Checks whether
---@param player_class number
---@param player_spec_id number
---@return boolean
function FS.entry_helper.check_spec(player_class, player_spec_id)
    local spec_enum = enums.class_spec_id.get_specialization_enum(player_class, player_spec_id)
    if not FS.entry_helper.allowed_specs[spec_enum] then
        return false
    end
    FS.spec_config = {
        class_id = player_class,
        spec_id = player_spec_id,
        on_update = function() end,
        on_render = function() end,
        on_render_menu = function() end,
        on_render_control_panel = function(_) return _ end
    }
    return true
end

================
File: entry/entry_helper.lua
================
---@type enums
local enums = require("common/enums")

FS.entry_helper = {
    class_spec_map = {
        [enums.class_spec_id.spec_enum.ARMS_WARRIOR] = "warrior/arms",
        [enums.class_spec_id.spec_enum.FURY_WARRIOR] = "warrior/fury",
        [enums.class_spec_id.spec_enum.PROTECTION_WARRIOR] = "warrior/protection",
        [enums.class_spec_id.spec_enum.HOLY_PALADIN] = "paladin/holy",
        [enums.class_spec_id.spec_enum.PROTECTION_PALADIN] = "paladin/protection",
        [enums.class_spec_id.spec_enum.RETRIBUTION_PALADIN] = "paladin/retribution",
        [enums.class_spec_id.spec_enum.BEAST_MASTERY_HUNTER] = "hunter/beast_mastery",
        [enums.class_spec_id.spec_enum.MARKSMANSHIP_HUNTER] = "hunter/marksmanship",
        [enums.class_spec_id.spec_enum.SURVIVAL_HUNTER] = "hunter/survival",
        [enums.class_spec_id.spec_enum.ASSASSINATION_ROGUE] = "rogue/assassination",
        [enums.class_spec_id.spec_enum.OUTLAW_ROGUE] = "rogue/outlaw",
        [enums.class_spec_id.spec_enum.SUBTLETY_ROGUE] = "rogue/subtlety",
        [enums.class_spec_id.spec_enum.DISCIPLINE_PRIEST] = "priest/discipline",
        [enums.class_spec_id.spec_enum.HOLY_PRIEST] = "priest/holy",
        [enums.class_spec_id.spec_enum.SHADOW_PRIEST] = "priest/shadow",
        [enums.class_spec_id.spec_enum.BLOOD_DEATHKNIGHT] = "deathknight/blood",
        [enums.class_spec_id.spec_enum.FROST_DEATHKNIGHT] = "deathknight/frost",
        [enums.class_spec_id.spec_enum.UNHOLY_DEATHKNIGHT] = "deathknight/unholy",
        [enums.class_spec_id.spec_enum.ELEMENTAL_SHAMAN] = "shaman/elemental",
        [enums.class_spec_id.spec_enum.ENHANCEMENT_SHAMAN] = "shaman/enhancement",
        [enums.class_spec_id.spec_enum.RESTORATION_SHAMAN] = "shaman/restoration",
        [enums.class_spec_id.spec_enum.ARCANE_MAGE] = "arcane",
        [enums.class_spec_id.spec_enum.FIRE_MAGE] = "fire",
        [enums.class_spec_id.spec_enum.FROST_MAGE] = "frost",
        [enums.class_spec_id.spec_enum.AFFLICTION_WARLOCK] = "affliction",
    },
    allowed_specs = {
        [enums.class_spec_id.spec_enum.HOLY_PALADIN] = true,
    }
}

================
File: entry/index.lua
================
require("entry/entry_helper")
require("entry/check_spec")
require("entry/init")
require("entry/load_required_modules")
require("entry/load_spec_module")
require("entry/callbacks/index")

================
File: entry/init.lua
================
function FS.entry_helper.init()
    if not FS.entry_helper.load_required_modules() then
        core.log("Failed to load required modules")
        return false
    end
    if not FS.entry_helper.load_spec_module() then
        core.log("Failed to load required modules")
        return false
    end
    return true
end

================
File: entry/interfaces/module_config.lua
================
---@class ModuleConfig
---@field on_update fun() Called on each update cycle
---@field on_fast_update fun() Called on each fast update cycle
---@field on_render fun() Called when rendering the module's visuals
---@field on_render_menu fun() Called when rendering the module's menu

================
File: entry/interfaces/spec_config.lua
================
-- Add class/spec configuration
---@class SpecConfig
---@field class_id number
---@field spec_id number
---@field on_update on_update
---@field on_render on_render
---@field on_render_menu on_render_menu
---@field on_render_control_panel on_render_control_panel

================
File: entry/load_required_modules.lua
================
local required_modules = {
    "core/modules/heal_engine/index"
}

function FS.entry_helper.load_required_modules()
    require("core/index")
    for _, module_path in ipairs(required_modules) do
        local success, module = pcall(require, module_path)
        if success then
            table.insert(FS.modules, module)
        else
            core.log("Failed to load required module: " .. module_path)
            return false
        end
    end
    return true
end

================
File: entry/load_spec_module.lua
================
---@type enums
local enums = require("common/enums")

---Loads the module for the player's specialization
---@return boolean
function FS.entry_helper.load_spec_module()
    ---@type boolean, SpecConfig
    local success, module = pcall(require,
        "classes/" ..
        FS.entry_helper.class_spec_map
        [enums.class_spec_id.get_specialization_enum(FS.spec_config.class_id, FS.spec_config.spec_id)] ..
        "/bootstrap")
    if success then
        FS.spec_config = module
        return true
    end
    core.log("Failed to load spec module: " .. module)
    return false
end

================
File: header.lua
================
if false then
    return {
        name = "FS Rotations",
        version = "1.0.0",
        author = "FS",
        load = false
    }
end

FS = {
    ---@type SpecConfig
    spec_config = nil,
    ---@type ModuleConfig[]
    modules = {}
}

require("entry/index")

local plugin = {
    name = "FS Rotations",
    version = "1.0.0",
    author = "FS",
    load = true
}

-- Get local player
local local_player = core.object_manager.get_local_player()
if not local_player then
    plugin["load"] = false
    return plugin
end

-- Get player info
local player_class = local_player:get_class()
local player_spec_id = core.spell_book.get_specialization_id()

if FS.entry_helper.check_spec(player_class, player_spec_id) then
    return plugin
end

-- Spec not supported or module failed to load
plugin["load"] = false
return plugin

================
File: main.lua
================
if FS.entry_helper.init() then
    core.register_on_update_callback(FS.entry_helper.on_update)
    core.register_on_render_callback(FS.entry_helper.on_render)
    core.register_on_render_menu_callback(FS.entry_helper.on_render_menu)
    core.register_on_render_control_panel_callback(FS.entry_helper.on_render_control_panel)
else
    core.log("Failed to initialize FS Rotations")
end

================
File: memory-bank/activeContext.md
================
# Current Session Context
Date: 2025-02-10 20:38 (UTC+1:00)

## Current Focus
Heal Engine optimization and enhancement

## Active Goals
1. ✓ Establish Memory Bank structure
2. ✓ Document project architecture
3. ✓ Analyze code patterns and systems
4. ► Monitor heal engine implementation
5. Review rotation logic effectiveness

## Session State
- Memory Bank successfully initialized
- Core documentation completed
- Project structure documented
- Code patterns identified and documented
- Heal engine optimization in progress
  * Performance improvements implemented
  * Enhanced damage tracking system
  * Improved combat state management

## Open Questions
1. How to optimize heal engine performance?
   - Binary search implementation shows promise
   - Caching strategy implemented for DPS calculations
   - Need to validate performance improvements
   - Consider further optimization of health value storage

2. What patterns can be identified in rotation logic?
   - Clear priority-based system identified
   - Potential for enhanced modularity in spell logic

3. How to best structure healing priority system?
   - Current system uses damage prediction
   - Fight-wide DPS tracking added
   - Enhanced damage calculation accuracy
   - Consider additional metrics for priority weighting

## Current Resources
- Complete codebase overview via repomix output
- Core system documentation
- Holy Paladin module implementation
- Initialized Memory Bank structure
- Enhanced heal engine implementation

## Recent Updates
- Implemented performance optimizations in heal engine:
  * Added binary search for damage calculation
  * Implemented DPS caching system
  * Enhanced combat state tracking
  * Added fight-wide DPS monitoring
  * Improved health value storage efficiency
  * Enhanced logging and profiling system

================
File: memory-bank/decisionLog.md
================
# Architectural Decisions Log

## [2025-02-10 20:39] - Heal Engine Performance Optimization

### Context
The heal engine module required performance improvements and enhanced damage tracking capabilities. The previous implementation had potential inefficiencies in damage calculation and health value storage.

### Decisions

1. **Binary Search Implementation**
   - **Decision:** Implement binary search for finding valid health values
   - **Rationale:** Improves performance when searching through health value history
   - **Implementation:** Added in get_damage_taken_per_second.lua with O(log n) complexity

2. **DPS Caching System**
   - **Decision:** Add a caching system for DPS calculations
   - **Rationale:** Reduce redundant calculations and improve performance
   - **Implementation:** Added dps_cache table in module state

3. **Enhanced Combat State Tracking**
   - **Decision:** Implement fight-wide DPS tracking
   - **Rationale:** Provides better context for healing decisions
   - **Implementation:** Added fight_start_time, fight_start_health, and fight_total_damage tracking

4. **Health Value Storage Optimization**
   - **Decision:** Optimize health value storage with conditional updates
   - **Rationale:** Reduce memory usage and improve efficiency
   - **Implementation:** Added checks for significant health changes and time thresholds

5. **Profiling Integration**
   - **Decision:** Add performance profiling
   - **Rationale:** Enable monitoring and optimization of critical paths
   - **Implementation:** Integrated profiler module in damage calculation

### Implications
- Improved performance in damage calculation
- More efficient memory usage
- Better combat analysis capabilities
- Enhanced debugging and profiling capabilities

### Validation Criteria
- Performance metrics through profiler
- Memory usage monitoring
- Calculation accuracy verification
- Combat responsiveness testing

================
File: memory-bank/productContext.md
================
# FS Rotations - Holy Paladin Module

## Project Overview
A World of Warcraft rotation script system focused on Holy Paladin specialization, providing automated combat rotation and decision-making capabilities. The system implements sophisticated healing prediction, damage tracking, and priority-based decision making.

## Project Structure
- Core Framework
  - API Integration
  - Menu System
  - Settings Management
  - Variable Tracking
  - Humanizer System
  - Heal Engine Module

- Holy Paladin Module
  - Rotation Logic
  - Spell Management
  - Combat Decision Making
  - UI Integration
  - Settings Configuration

## Core Components
- Buff/Debuff Management
- Combat Forecasting
- Health Prediction
- Spell Queue System
- Target Selection
- Plugin Support

## Technical Stack
- Language: Lua
- Framework: Custom WoW Integration
- Core Systems: Menu, Settings, Variables
- Specialized Modules: Heal Engine, Combat Logic

## Memory Bank Structure
- activeContext.md: Tracks current development session state
- productContext.md: This file - Project overview and structure
- progress.md: Development progress tracking
- decisionLog.md: Key technical and architectural decisions
- systemPatterns.md: Identified code patterns and conventions

## Project Goals
1. Provide efficient and reliable Holy Paladin rotation automation
2. Maintain modular and extensible architecture
3. Support robust healing prediction and decision making
4. Enable customizable user configuration
5. Ensure smooth integration with WoW client
6. Optimize performance and resource usage
7. Maintain clear documentation and patterns

## Technical Requirements
1. Real-time performance optimization
   - Efficient health tracking
   - Optimized damage prediction
   - Resource-aware processing

2. Accurate spell prediction and queuing
   - Priority-based decision making
   - Smart cooldown management
   - Context-aware casting

3. Reliable buff/debuff tracking
   - Efficient state management
   - Accurate duration tracking
   - Priority-based processing

4. Efficient memory management
   - Optimized data structures
   - Clear cleanup patterns
   - Resource optimization

5. Responsive user interface
   - Clear control panel
   - Intuitive configuration
   - Real-time feedback

## Implementation Focus
1. Heal Engine Optimization
2. Rotation Logic Refinement
3. Pattern-based Development
4. Documentation Maintenance
5. Performance Monitoring

================
File: memory-bank/progress.md
================
# Development Progress

## Current Phase
Heal Engine optimization and enhancement

## Work Done
### 2025-02-10
- ✓ Created Memory Bank structure
- ✓ Initialized core documentation files
- ✓ Analyzed project structure via repomix output
- ✓ Documented project overview and context
- ✓ Identified and documented code patterns
- ✓ Established architectural decision tracking
- ✓ Created comprehensive project documentation
- ✓ Implemented heal engine optimizations:
  * Added binary search for performance
  * Implemented DPS caching system
  * Enhanced combat state tracking
  * Added fight-wide DPS monitoring
  * Improved health value storage
  * Enhanced logging system

## Key Achievements
1. Memory Bank Setup
   - Established core documentation structure
   - Created template formats for tracking
   - Implemented consistent documentation patterns

2. Architecture Analysis
   - Identified core system patterns
   - Documented module relationships
   - Mapped key dependencies

3. Code Pattern Documentation
   - Documented rotation logic patterns
   - Captured spell management patterns
   - Established best practices

4. Heal Engine Enhancement
   - Implemented performance optimizations
   - Enhanced damage tracking system
   - Improved combat state management
   - Added sophisticated logging

## Next Steps
1. Validate Heal Engine Improvements
   - Benchmark performance gains from binary search
   - Monitor DPS cache effectiveness
   - Test combat state tracking accuracy
   - Verify health value storage optimization

2. Review Rotation Logic Structure
   - Evaluate priority system
   - Assess decision making logic
   - Consider optimization opportunities

3. Enhance Documentation
   - Document performance metrics
   - Update optimization strategies
   - Add implementation details

## Current Analysis Plan - Heal Engine (2025-02-10)

### 1. Performance Validation
- [x] Implement binary search optimization
- [x] Add DPS caching system
- [x] Optimize health value storage
- [x] Integrate performance profiling
- [ ] Benchmark improvements
- [ ] Analyze cache hit rates

### 2. Memory Management
- [x] Implement conditional health updates
- [x] Add cleanup for old values
- [x] Optimize storage structures
- [ ] Monitor memory usage patterns
- [ ] Validate cleanup effectiveness

### 3. Combat Analysis
- [x] Add fight-wide DPS tracking
- [x] Implement significant damage detection
- [x] Enhance logging system
- [ ] Test various combat scenarios
- [ ] Validate healing priorities

### 4. Testing & Validation
- [ ] Run performance benchmarks
- [ ] Verify calculation accuracy
- [ ] Test memory optimizations
- [ ] Check combat responsiveness
- [ ] Profile critical paths

## Technical Debt
- Monitor heal engine performance metrics
- Evaluate rotation priority system
- Consider spell prediction improvements
- Assess memory management strategies

## Upcoming Tasks
- Continue heal engine optimization
- Enhance rotation decision making
- Improve combat prediction accuracy
- Refine spell queue management

================
File: memory-bank/systemPatterns.md
================
# System Patterns

## Code Organization Patterns

### Module Structure
```lua
FS.[module_name] = {
    settings = {},  -- Module settings
    menu = {},      -- Menu configuration
    variables = {}, -- State tracking
    logic = {}     -- Core functionality
}
```

### Rotation Logic Pattern
```lua
function FS.[spec_name].logic.rotations.[rotation_type]()
    -- Priority-based checks
    if [condition_1]() then
        return true
    end
    if [condition_2]() then
        return true
    end
    return false
end
```

### Spell Logic Pattern
```lua
function FS.[spec_name].logic.spells.[spell_name]()
    -- Target validation
    local target = FS.variables.[target_type]()
    if not target then
        return false
    end
    
    -- Spell cast validation
    if not FS.api.spell_helper:is_spell_queueable([spell_id], [caster], target, false, false) then
        return false
    end
    
    -- Queue spell cast
    FS.api.spell_queue:queue_spell_target([spell_id], target, [priority])
    return true
end
```

## Core System Patterns

### Settings Management
- Centralized settings in core/settings.lua
- Consistent access patterns through FS.settings
- Type-safe configuration with clear defaults
- Standardized toggle handling

### Menu System
- Hierarchical menu structure
- Consistent naming conventions
- Standardized control panel integration
- Unified keybind management

### Variable Tracking
- Cached state management
- Clear update patterns
- Consistent access methods
- Efficient memory usage

### API Integration
- Modular API structure
- Consistent error handling
- Clear dependency management
- Standardized module exports

## Heal Engine Patterns

### Health Tracking
- Regular health state updates
- Efficient value caching
- Clear data structure patterns
- Historical data management

### Damage Prediction
- Historical data analysis
- Pattern-based prediction
- Efficient data storage
- Priority-based processing

### Memory Management
- Efficient data structures
- Clear cleanup patterns
- Resource optimization
- Cache management

## Documentation Patterns

### Memory Bank Structure
- Clear file organization
- Consistent update patterns
- Comprehensive tracking
- Version management

### Code Documentation
- Standard comment formats
- Clear function documentation
- Pattern documentation
- Implementation notes

## Best Practices
1. Consistent error handling
2. Clear module boundaries
3. Standard naming conventions
4. Efficient state management
5. Modular design patterns
6. Regular documentation updates
7. Performance optimization
8. Resource management
9. Clear dependency tracking
10. Maintainable architecture



================================================================
End of Codebase
================================================================
